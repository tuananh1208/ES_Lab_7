
Bai7_TouchScreen_D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000322c  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c990  0800c990  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c990  0800c990  0001c990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c998  0800c998  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c998  0800c998  0001c998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c99c  0800c99c  0001c99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800c9a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          000004a0  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000554  20000554  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3bc  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004043  00000000  00000000  0003c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  000404e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013a0  00000000  00000000  00041a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026da7  00000000  00000000  00042df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c418  00000000  00000000  00069b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df7bd  00000000  00000000  00085fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00165774  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063f4  00000000  00000000  001657c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0016bbbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0016bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800974c 	.word	0x0800974c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	0800974c 	.word	0x0800974c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000e94:	4a3d      	ldr	r2, [pc, #244]	; (8000f8c <MX_ADC1_Init+0x10c>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ea4:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ec0:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <MX_ADC1_Init+0x110>)
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ecc:	2205      	movs	r2, #5
 8000ece:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ede:	482a      	ldr	r0, [pc, #168]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ee0:	f003 fb10 	bl	8004504 <HAL_ADC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f001 ffbd 	bl	8002e68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	4822      	ldr	r0, [pc, #136]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f00:	f003 fb44 	bl	800458c <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f0a:	f001 ffad 	bl	8002e68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481b      	ldr	r0, [pc, #108]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f1c:	f003 fb36 	bl	800458c <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f26:	f001 ff9f 	bl	8002e68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f38:	f003 fb28 	bl	800458c <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f42:	f001 ff91 	bl	8002e68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f46:	230b      	movs	r3, #11
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f54:	f003 fb1a 	bl	800458c <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f5e:	f001 ff83 	bl	8002e68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f62:	230c      	movs	r3, #12
 8000f64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f66:	2305      	movs	r3, #5
 8000f68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f70:	f003 fb0c 	bl	800458c <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f7a:	f001 ff75 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000288 	.word	0x20000288
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	0f000001 	.word	0x0f000001

08000f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <HAL_ADC_MspInit+0x110>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d171      	bne.n	800109a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800100a:	2307      	movs	r3, #7
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4823      	ldr	r0, [pc, #140]	; (80010ac <HAL_ADC_MspInit+0x118>)
 800101e:	f004 f8cf 	bl	80051c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001022:	2303      	movs	r3, #3
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <HAL_ADC_MspInit+0x11c>)
 8001036:	f004 f8c3 	bl	80051c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800103c:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <HAL_ADC_MspInit+0x124>)
 800103e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001058:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800105c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001060:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001068:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800106c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001070:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001080:	f003 fdb4 	bl	8004bec <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800108a:	f001 feed 	bl	8002e68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012000 	.word	0x40012000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020400 	.word	0x40020400
 80010b4:	200002d0 	.word	0x200002d0
 80010b8:	40026410 	.word	0x40026410

080010bc <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	at24c_Check();
 80010c0:	f000 f83c 	bl	800113c <at24c_Check>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010d6:	88fa      	ldrh	r2, [r7, #6]
 80010d8:	230a      	movs	r3, #10
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	f107 030f 	add.w	r3, r7, #15
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2310      	movs	r3, #16
 80010e8:	21a0      	movs	r1, #160	; 0xa0
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <at24c_ReadOneByte+0x34>)
 80010ec:	f004 fc74 	bl	80059d8 <HAL_I2C_Mem_Read>
	return temp;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000380 	.word	0x20000380

08001100 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	4603      	mov	r3, r0
 8001108:	460a      	mov	r2, r1
 800110a:	80fb      	strh	r3, [r7, #6]
 800110c:	4613      	mov	r3, r2
 800110e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001110:	88fa      	ldrh	r2, [r7, #6]
 8001112:	230a      	movs	r3, #10
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	1d7b      	adds	r3, r7, #5
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2310      	movs	r3, #16
 8001120:	21a0      	movs	r1, #160	; 0xa0
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <at24c_WriteOneByte+0x38>)
 8001124:	f004 fb5e 	bl	80057e4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001128:	2005      	movs	r0, #5
 800112a:	f003 f9c7 	bl	80044bc <HAL_Delay>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000380 	.word	0x20000380

0800113c <at24c_Check>:

uint8_t at24c_Check(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 8001142:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001146:	f7ff ffbf 	bl	80010c8 <at24c_ReadOneByte>
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b55      	cmp	r3, #85	; 0x55
 8001152:	d101      	bne.n	8001158 <at24c_Check+0x1c>
 8001154:	2300      	movs	r3, #0
 8001156:	e010      	b.n	800117a <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001158:	2155      	movs	r1, #85	; 0x55
 800115a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800115e:	f7ff ffcf 	bl	8001100 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 8001162:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001166:	f7ff ffaf 	bl	80010c8 <at24c_ReadOneByte>
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b55      	cmp	r3, #85	; 0x55
 8001172:	d101      	bne.n	8001178 <at24c_Check+0x3c>
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <at24c_Check+0x3e>
	}
	return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	6039      	str	r1, [r7, #0]
 800118c:	80fb      	strh	r3, [r7, #6]
 800118e:	4613      	mov	r3, r2
 8001190:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001192:	e00d      	b.n	80011b0 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	80fa      	strh	r2, [r7, #6]
 800119a:	683c      	ldr	r4, [r7, #0]
 800119c:	1c62      	adds	r2, r4, #1
 800119e:	603a      	str	r2, [r7, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff91 	bl	80010c8 <at24c_ReadOneByte>
 80011a6:	4603      	mov	r3, r0
 80011a8:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1ee      	bne.n	8001194 <at24c_Read+0x12>
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}

080011c0 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011d0:	e00c      	b.n	80011ec <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff90 	bl	8001100 <at24c_WriteOneByte>
		WriteAddr++;
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	3301      	adds	r3, #1
 80011e4:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011ec:	88bb      	ldrh	r3, [r7, #4]
 80011ee:	1e5a      	subs	r2, r3, #1
 80011f0:	80ba      	strh	r2, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ed      	bne.n	80011d2 <at24c_Write+0x12>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	2108      	movs	r1, #8
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <button_init+0x14>)
 800120a:	f004 f98d 	bl	8005528 <HAL_GPIO_WritePin>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40020c00 	.word	0x40020c00

08001218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_DMA_Init+0x3c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <MX_DMA_Init+0x3c>)
 8001228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_DMA_Init+0x3c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2038      	movs	r0, #56	; 0x38
 8001240:	f003 fc9d 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001244:	2038      	movs	r0, #56	; 0x38
 8001246:	f003 fcb6 	bl	8004bb6 <HAL_NVIC_EnableIRQ>

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08e      	sub	sp, #56	; 0x38
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <MX_FSMC_Init+0xec>)
 8001286:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800128a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <MX_FSMC_Init+0xec>)
 800128e:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <MX_FSMC_Init+0xf0>)
 8001290:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_FSMC_Init+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_FSMC_Init+0xec>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_FSMC_Init+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_FSMC_Init+0xec>)
 80012a6:	2210      	movs	r2, #16
 80012a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <MX_FSMC_Init+0xec>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <MX_FSMC_Init+0xec>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_FSMC_Init+0xec>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_FSMC_Init+0xec>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_FSMC_Init+0xec>)
 80012c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_FSMC_Init+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_FSMC_Init+0xec>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_FSMC_Init+0xec>)
 80012da:	2200      	movs	r2, #0
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_FSMC_Init+0xec>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_FSMC_Init+0xec>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012ea:	230f      	movs	r3, #15
 80012ec:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012ee:	230f      	movs	r3, #15
 80012f0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012f2:	233c      	movs	r3, #60	; 0x3c
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80012fa:	2310      	movs	r3, #16
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80012fe:	2311      	movs	r3, #17
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001306:	2308      	movs	r3, #8
 8001308:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800130a:	230f      	movs	r3, #15
 800130c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800130e:	2309      	movs	r3, #9
 8001310:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001316:	2310      	movs	r3, #16
 8001318:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800131a:	2311      	movs	r3, #17
 800131c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001322:	463a      	mov	r2, r7
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_FSMC_Init+0xec>)
 800132c:	f005 ffc6 	bl	80072bc <HAL_SRAM_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001336:	f001 fd97 	bl	8002e68 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800133a:	bf00      	nop
 800133c:	3738      	adds	r7, #56	; 0x38
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000330 	.word	0x20000330
 8001348:	a0000104 	.word	0xa0000104

0800134c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_FSMC_MspInit+0x88>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d131      	bne.n	80013cc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_FSMC_MspInit+0x88>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_FSMC_MspInit+0x8c>)
 8001374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001376:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <HAL_FSMC_MspInit+0x8c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6393      	str	r3, [r2, #56]	; 0x38
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_FSMC_MspInit+0x8c>)
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800138a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800138e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800139c:	230c      	movs	r3, #12
 800139e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <HAL_FSMC_MspInit+0x90>)
 80013a6:	f003 ff0b 	bl	80051c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013aa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80013ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013bc:	230c      	movs	r3, #12
 80013be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4806      	ldr	r0, [pc, #24]	; (80013e0 <HAL_FSMC_MspInit+0x94>)
 80013c6:	f003 fefb 	bl	80051c0 <HAL_GPIO_Init>
 80013ca:	e000      	b.n	80013ce <HAL_FSMC_MspInit+0x82>
    return;
 80013cc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200000d0 	.word	0x200000d0
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40020c00 	.word	0x40020c00

080013e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013ec:	f7ff ffae 	bl	800134c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	; 0x38
 80013fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
 8001412:	4b7e      	ldr	r3, [pc, #504]	; (800160c <MX_GPIO_Init+0x214>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a7d      	ldr	r2, [pc, #500]	; (800160c <MX_GPIO_Init+0x214>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b7b      	ldr	r3, [pc, #492]	; (800160c <MX_GPIO_Init+0x214>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	623b      	str	r3, [r7, #32]
 8001428:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	4b77      	ldr	r3, [pc, #476]	; (800160c <MX_GPIO_Init+0x214>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a76      	ldr	r2, [pc, #472]	; (800160c <MX_GPIO_Init+0x214>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b74      	ldr	r3, [pc, #464]	; (800160c <MX_GPIO_Init+0x214>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	4b70      	ldr	r3, [pc, #448]	; (800160c <MX_GPIO_Init+0x214>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a6f      	ldr	r2, [pc, #444]	; (800160c <MX_GPIO_Init+0x214>)
 8001450:	f043 0320 	orr.w	r3, r3, #32
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b6d      	ldr	r3, [pc, #436]	; (800160c <MX_GPIO_Init+0x214>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	4b69      	ldr	r3, [pc, #420]	; (800160c <MX_GPIO_Init+0x214>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a68      	ldr	r2, [pc, #416]	; (800160c <MX_GPIO_Init+0x214>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b66      	ldr	r3, [pc, #408]	; (800160c <MX_GPIO_Init+0x214>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b62      	ldr	r3, [pc, #392]	; (800160c <MX_GPIO_Init+0x214>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a61      	ldr	r2, [pc, #388]	; (800160c <MX_GPIO_Init+0x214>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <MX_GPIO_Init+0x214>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b5b      	ldr	r3, [pc, #364]	; (800160c <MX_GPIO_Init+0x214>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a5a      	ldr	r2, [pc, #360]	; (800160c <MX_GPIO_Init+0x214>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b58      	ldr	r3, [pc, #352]	; (800160c <MX_GPIO_Init+0x214>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b54      	ldr	r3, [pc, #336]	; (800160c <MX_GPIO_Init+0x214>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a53      	ldr	r2, [pc, #332]	; (800160c <MX_GPIO_Init+0x214>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b51      	ldr	r3, [pc, #324]	; (800160c <MX_GPIO_Init+0x214>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b4d      	ldr	r3, [pc, #308]	; (800160c <MX_GPIO_Init+0x214>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a4c      	ldr	r2, [pc, #304]	; (800160c <MX_GPIO_Init+0x214>)
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b4a      	ldr	r3, [pc, #296]	; (800160c <MX_GPIO_Init+0x214>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2170      	movs	r1, #112	; 0x70
 80014f2:	4847      	ldr	r0, [pc, #284]	; (8001610 <MX_GPIO_Init+0x218>)
 80014f4:	f004 f818 	bl	8005528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80014fe:	4845      	ldr	r0, [pc, #276]	; (8001614 <MX_GPIO_Init+0x21c>)
 8001500:	f004 f812 	bl	8005528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800150a:	4843      	ldr	r0, [pc, #268]	; (8001618 <MX_GPIO_Init+0x220>)
 800150c:	f004 f80c 	bl	8005528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001516:	4841      	ldr	r0, [pc, #260]	; (800161c <MX_GPIO_Init+0x224>)
 8001518:	f004 f806 	bl	8005528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2108      	movs	r1, #8
 8001520:	483f      	ldr	r0, [pc, #252]	; (8001620 <MX_GPIO_Init+0x228>)
 8001522:	f004 f801 	bl	8005528 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001526:	2370      	movs	r3, #112	; 0x70
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	4834      	ldr	r0, [pc, #208]	; (8001610 <MX_GPIO_Init+0x218>)
 800153e:	f003 fe3f 	bl	80051c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001542:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	482e      	ldr	r0, [pc, #184]	; (8001614 <MX_GPIO_Init+0x21c>)
 800155c:	f003 fe30 	bl	80051c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001560:	23c0      	movs	r3, #192	; 0xc0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	482a      	ldr	r0, [pc, #168]	; (800161c <MX_GPIO_Init+0x224>)
 8001574:	f003 fe24 	bl	80051c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001578:	2330      	movs	r3, #48	; 0x30
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	4822      	ldr	r0, [pc, #136]	; (8001614 <MX_GPIO_Init+0x21c>)
 800158c:	f003 fe18 	bl	80051c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001590:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	481b      	ldr	r0, [pc, #108]	; (8001618 <MX_GPIO_Init+0x220>)
 80015aa:	f003 fe09 	bl	80051c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80015ae:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <MX_GPIO_Init+0x21c>)
 80015c4:	f003 fdfc 	bl	80051c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80015c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <MX_GPIO_Init+0x224>)
 80015e2:	f003 fded 	bl	80051c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80015e6:	2308      	movs	r3, #8
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	4808      	ldr	r0, [pc, #32]	; (8001620 <MX_GPIO_Init+0x228>)
 80015fe:	f003 fddf 	bl	80051c0 <HAL_GPIO_Init>

}
 8001602:	bf00      	nop
 8001604:	3738      	adds	r7, #56	; 0x38
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40021000 	.word	0x40021000
 8001614:	40020800 	.word	0x40020800
 8001618:	40021800 	.word	0x40021800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020c00 	.word	0x40020c00

08001624 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_I2C1_Init+0x50>)
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <MX_I2C1_Init+0x54>)
 800162c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_I2C1_Init+0x50>)
 8001630:	4a12      	ldr	r2, [pc, #72]	; (800167c <MX_I2C1_Init+0x58>)
 8001632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_I2C1_Init+0x50>)
 8001642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_I2C1_Init+0x50>)
 8001662:	f003 ff7b 	bl	800555c <HAL_I2C_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800166c:	f001 fbfc 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000380 	.word	0x20000380
 8001678:	40005400 	.word	0x40005400
 800167c:	000186a0 	.word	0x000186a0

08001680 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_I2C_MspInit+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12b      	bne.n	80016fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ce:	2304      	movs	r3, #4
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <HAL_I2C_MspInit+0x8c>)
 80016da:	f003 fd71 	bl	80051c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40005400 	.word	0x40005400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400

08001710 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <LCD_WR_REG+0x1c>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	8013      	strh	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	600ffffe 	.word	0x600ffffe

08001730 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <LCD_WR_DATA+0x1c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	8053      	strh	r3, [r2, #2]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	600ffffe 	.word	0x600ffffe

08001750 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <LCD_RD_DATA+0x20>)
 8001758:	885b      	ldrh	r3, [r3, #2]
 800175a:	b29b      	uxth	r3, r3
 800175c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	b29b      	uxth	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	600ffffe 	.word	0x600ffffe

08001774 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	80fb      	strh	r3, [r7, #6]
 8001786:	4603      	mov	r3, r0
 8001788:	80bb      	strh	r3, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	807b      	strh	r3, [r7, #2]
 800178e:	4613      	mov	r3, r2
 8001790:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001792:	202a      	movs	r0, #42	; 0x2a
 8001794:	f7ff ffbc 	bl	8001710 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	b29b      	uxth	r3, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ffc6 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ffc0 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ffba 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ffb4 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80017c8:	202b      	movs	r0, #43	; 0x2b
 80017ca:	f7ff ffa1 	bl	8001710 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80017ce:	88bb      	ldrh	r3, [r7, #4]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ffab 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80017da:	88bb      	ldrh	r3, [r7, #4]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffa5 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017e6:	883b      	ldrh	r3, [r7, #0]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff9f 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017f2:	883b      	ldrh	r3, [r7, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff99 	bl	8001730 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017fe:	202c      	movs	r0, #44	; 0x2c
 8001800:	f7ff ff86 	bl	8001710 <LCD_WR_REG>
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <lcd_Clear+0x60>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <lcd_Clear+0x60>)
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	3b01      	subs	r3, #1
 8001824:	b29b      	uxth	r3, r3
 8001826:	2100      	movs	r1, #0
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff ffa3 	bl	8001774 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800182e:	2300      	movs	r3, #0
 8001830:	81fb      	strh	r3, [r7, #14]
 8001832:	e011      	b.n	8001858 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001834:	2300      	movs	r3, #0
 8001836:	81bb      	strh	r3, [r7, #12]
 8001838:	e006      	b.n	8001848 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff77 	bl	8001730 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001842:	89bb      	ldrh	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	81bb      	strh	r3, [r7, #12]
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <lcd_Clear+0x60>)
 800184a:	885b      	ldrh	r3, [r3, #2]
 800184c:	89ba      	ldrh	r2, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3f3      	bcc.n	800183a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	3301      	adds	r3, #1
 8001856:	81fb      	strh	r3, [r7, #14]
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <lcd_Clear+0x60>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	89fa      	ldrh	r2, [r7, #14]
 800185e:	429a      	cmp	r2, r3
 8001860:	d3e8      	bcc.n	8001834 <lcd_Clear+0x28>
		}
	}
}
 8001862:	bf00      	nop
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200003d4 	.word	0x200003d4

08001870 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	4604      	mov	r4, r0
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4623      	mov	r3, r4
 8001880:	80fb      	strh	r3, [r7, #6]
 8001882:	4603      	mov	r3, r0
 8001884:	80bb      	strh	r3, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	807b      	strh	r3, [r7, #2]
 800188a:	4613      	mov	r3, r2
 800188c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	883b      	ldrh	r3, [r7, #0]
 8001896:	3b01      	subs	r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	88b9      	ldrh	r1, [r7, #4]
 800189c:	88f8      	ldrh	r0, [r7, #6]
 800189e:	f7ff ff69 	bl	8001774 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80018a2:	88bb      	ldrh	r3, [r7, #4]
 80018a4:	81fb      	strh	r3, [r7, #14]
 80018a6:	e010      	b.n	80018ca <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	81bb      	strh	r3, [r7, #12]
 80018ac:	e006      	b.n	80018bc <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80018ae:	8c3b      	ldrh	r3, [r7, #32]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff3d 	bl	8001730 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80018b6:	89bb      	ldrh	r3, [r7, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	81bb      	strh	r3, [r7, #12]
 80018bc:	89ba      	ldrh	r2, [r7, #12]
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d3f4      	bcc.n	80018ae <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80018c4:	89fb      	ldrh	r3, [r7, #14]
 80018c6:	3301      	adds	r3, #1
 80018c8:	81fb      	strh	r3, [r7, #14]
 80018ca:	89fa      	ldrh	r2, [r7, #14]
 80018cc:	883b      	ldrh	r3, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3ea      	bcc.n	80018a8 <lcd_Fill+0x38>
		}
	}
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd90      	pop	{r4, r7, pc}

080018dc <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
 80018e6:	460b      	mov	r3, r1
 80018e8:	80bb      	strh	r3, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018ee:	88bb      	ldrh	r3, [r7, #4]
 80018f0:	88fa      	ldrh	r2, [r7, #6]
 80018f2:	88b9      	ldrh	r1, [r7, #4]
 80018f4:	88f8      	ldrh	r0, [r7, #6]
 80018f6:	f7ff ff3d 	bl	8001774 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff17 	bl	8001730 <LCD_WR_DATA>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 800190a:	b590      	push	{r4, r7, lr}
 800190c:	b08d      	sub	sp, #52	; 0x34
 800190e:	af00      	add	r7, sp, #0
 8001910:	4604      	mov	r4, r0
 8001912:	4608      	mov	r0, r1
 8001914:	4611      	mov	r1, r2
 8001916:	461a      	mov	r2, r3
 8001918:	4623      	mov	r3, r4
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	4603      	mov	r3, r0
 800191e:	80bb      	strh	r3, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001938:	883a      	ldrh	r2, [r7, #0]
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dd02      	ble.n	8001954 <lcd_DrawLine+0x4a>
 800194e:	2301      	movs	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e00b      	b.n	800196c <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <lcd_DrawLine+0x56>
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e005      	b.n	800196c <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	425b      	negs	r3, r3
 800196a:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	dd02      	ble.n	8001978 <lcd_DrawLine+0x6e>
 8001972:	2301      	movs	r3, #1
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	e00b      	b.n	8001990 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <lcd_DrawLine+0x7a>
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e005      	b.n	8001990 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	425b      	negs	r3, r3
 800198e:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001990:	6a3a      	ldr	r2, [r7, #32]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	429a      	cmp	r2, r3
 8001996:	dd02      	ble.n	800199e <lcd_DrawLine+0x94>
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	e001      	b.n	80019a2 <lcd_DrawLine+0x98>
	else distance=delta_y;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80019a6:	e02b      	b.n	8001a00 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	b291      	uxth	r1, r2
 80019b0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff91 	bl	80018dc <lcd_DrawPoint>
		xerr+=delta_x;
 80019ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	4413      	add	r3, r2
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 80019ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dd07      	ble.n	80019e2 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80019d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dd07      	ble.n	80019fa <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80019fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019fc:	3301      	adds	r3, #1
 80019fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dacf      	bge.n	80019a8 <lcd_DrawLine+0x9e>
		}
	}
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3734      	adds	r7, #52	; 0x34
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}

08001a12 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001a12:	b590      	push	{r4, r7, lr}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af02      	add	r7, sp, #8
 8001a18:	4604      	mov	r4, r0
 8001a1a:	4608      	mov	r0, r1
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4623      	mov	r3, r4
 8001a22:	80fb      	strh	r3, [r7, #6]
 8001a24:	4603      	mov	r3, r0
 8001a26:	80bb      	strh	r3, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001a30:	88bc      	ldrh	r4, [r7, #4]
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	88b9      	ldrh	r1, [r7, #4]
 8001a36:	88f8      	ldrh	r0, [r7, #6]
 8001a38:	8b3b      	ldrh	r3, [r7, #24]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	f7ff ff64 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001a42:	883c      	ldrh	r4, [r7, #0]
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	88b9      	ldrh	r1, [r7, #4]
 8001a48:	88f8      	ldrh	r0, [r7, #6]
 8001a4a:	8b3b      	ldrh	r3, [r7, #24]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	4623      	mov	r3, r4
 8001a50:	f7ff ff5b 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001a54:	883c      	ldrh	r4, [r7, #0]
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	8839      	ldrh	r1, [r7, #0]
 8001a5a:	88f8      	ldrh	r0, [r7, #6]
 8001a5c:	8b3b      	ldrh	r3, [r7, #24]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	4623      	mov	r3, r4
 8001a62:	f7ff ff52 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001a66:	883c      	ldrh	r4, [r7, #0]
 8001a68:	887a      	ldrh	r2, [r7, #2]
 8001a6a:	88b9      	ldrh	r1, [r7, #4]
 8001a6c:	8878      	ldrh	r0, [r7, #2]
 8001a6e:	8b3b      	ldrh	r3, [r7, #24]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	4623      	mov	r3, r4
 8001a74:	f7ff ff49 	bl	800190a <lcd_DrawLine>
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}

08001a80 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4604      	mov	r4, r0
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	80fb      	strh	r3, [r7, #6]
 8001a92:	4603      	mov	r3, r0
 8001a94:	80bb      	strh	r3, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001aa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aaa:	085b      	lsrs	r3, r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bf14      	ite	ne
 8001ac2:	2301      	movne	r3, #1
 8001ac4:	2300      	moveq	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	fb12 f303 	smulbb	r3, r2, r3
 8001ad6:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	3b20      	subs	r3, #32
 8001adc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29c      	uxth	r4, r3
 8001aec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	88b9      	ldrh	r1, [r7, #4]
 8001afe:	88f8      	ldrh	r0, [r7, #6]
 8001b00:	4622      	mov	r2, r4
 8001b02:	f7ff fe37 	bl	8001774 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	827b      	strh	r3, [r7, #18]
 8001b0a:	e07a      	b.n	8001c02 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001b0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	d028      	beq.n	8001b66 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001b14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d108      	bne.n	8001b2e <lcd_ShowChar+0xae>
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	8a7b      	ldrh	r3, [r7, #18]
 8001b20:	493c      	ldr	r1, [pc, #240]	; (8001c14 <lcd_ShowChar+0x194>)
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	440a      	add	r2, r1
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	75fb      	strb	r3, [r7, #23]
 8001b2c:	e01b      	b.n	8001b66 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001b2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b32:	2b18      	cmp	r3, #24
 8001b34:	d10b      	bne.n	8001b4e <lcd_ShowChar+0xce>
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	8a79      	ldrh	r1, [r7, #18]
 8001b3a:	4837      	ldr	r0, [pc, #220]	; (8001c18 <lcd_ShowChar+0x198>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4403      	add	r3, r0
 8001b46:	440b      	add	r3, r1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	75fb      	strb	r3, [r7, #23]
 8001b4c:	e00b      	b.n	8001b66 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d15a      	bne.n	8001c0c <lcd_ShowChar+0x18c>
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	8a7b      	ldrh	r3, [r7, #18]
 8001b5a:	4930      	ldr	r1, [pc, #192]	; (8001c1c <lcd_ShowChar+0x19c>)
 8001b5c:	0192      	lsls	r2, r2, #6
 8001b5e:	440a      	add	r2, r1
 8001b60:	4413      	add	r3, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	75bb      	strb	r3, [r7, #22]
 8001b6a:	e044      	b.n	8001bf6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001b6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d120      	bne.n	8001bb6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001b74:	7dfa      	ldrb	r2, [r7, #23]
 8001b76:	7dbb      	ldrb	r3, [r7, #22]
 8001b78:	fa42 f303 	asr.w	r3, r2, r3
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <lcd_ShowChar+0x10e>
 8001b84:	883b      	ldrh	r3, [r7, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fdd2 	bl	8001730 <LCD_WR_DATA>
 8001b8c:	e003      	b.n	8001b96 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001b8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fdcd 	bl	8001730 <LCD_WR_DATA>
				m++;
 8001b96:	7d7b      	ldrb	r3, [r7, #21]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001b9c:	7d7b      	ldrb	r3, [r7, #21]
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ba4:	fb02 f201 	mul.w	r2, r2, r1
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d11f      	bne.n	8001bf0 <lcd_ShowChar+0x170>
				{
					m=0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	757b      	strb	r3, [r7, #21]
					break;
 8001bb4:	e022      	b.n	8001bfc <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001bb6:	7dfa      	ldrb	r2, [r7, #23]
 8001bb8:	7dbb      	ldrb	r3, [r7, #22]
 8001bba:	fa42 f303 	asr.w	r3, r2, r3
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <lcd_ShowChar+0x152>
 8001bc6:	883a      	ldrh	r2, [r7, #0]
 8001bc8:	88b9      	ldrh	r1, [r7, #4]
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fe85 	bl	80018dc <lcd_DrawPoint>
				x++;
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	8a3b      	ldrh	r3, [r7, #16]
 8001bdc:	1ad2      	subs	r2, r2, r3
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d105      	bne.n	8001bf0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001be4:	8a3b      	ldrh	r3, [r7, #16]
 8001be6:	80fb      	strh	r3, [r7, #6]
					y++;
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	80bb      	strh	r3, [r7, #4]
					break;
 8001bee:	e005      	b.n	8001bfc <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001bf0:	7dbb      	ldrb	r3, [r7, #22]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	75bb      	strb	r3, [r7, #22]
 8001bf6:	7dbb      	ldrb	r3, [r7, #22]
 8001bf8:	2b07      	cmp	r3, #7
 8001bfa:	d9b7      	bls.n	8001b6c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001bfc:	8a7b      	ldrh	r3, [r7, #18]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	827b      	strh	r3, [r7, #18]
 8001c02:	8a7a      	ldrh	r2, [r7, #18]
 8001c04:	89bb      	ldrh	r3, [r7, #12]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d380      	bcc.n	8001b0c <lcd_ShowChar+0x8c>
 8001c0a:	e000      	b.n	8001c0e <lcd_ShowChar+0x18e>
		else return;
 8001c0c:	bf00      	nop
				}
			}
		}
	}
}
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	080098a4 	.word	0x080098a4
 8001c18:	08009e94 	.word	0x08009e94
 8001c1c:	0800b064 	.word	0x0800b064

08001c20 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <lcd_SetDir+0x44>)
 8001c3c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c40:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <lcd_SetDir+0x44>)
 8001c44:	22f0      	movs	r2, #240	; 0xf0
 8001c46:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c48:	e006      	b.n	8001c58 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <lcd_SetDir+0x44>)
 8001c4c:	22f0      	movs	r2, #240	; 0xf0
 8001c4e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <lcd_SetDir+0x44>)
 8001c52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c56:	805a      	strh	r2, [r3, #2]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	200003d4 	.word	0x200003d4

08001c68 <lcd_init>:


void lcd_init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c72:	48aa      	ldr	r0, [pc, #680]	; (8001f1c <lcd_init+0x2b4>)
 8001c74:	f003 fc58 	bl	8005528 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c7c:	f002 fc1e 	bl	80044bc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c86:	48a5      	ldr	r0, [pc, #660]	; (8001f1c <lcd_init+0x2b4>)
 8001c88:	f003 fc4e 	bl	8005528 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c90:	f002 fc14 	bl	80044bc <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff ffc3 	bl	8001c20 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c9a:	20d3      	movs	r0, #211	; 0xd3
 8001c9c:	f7ff fd38 	bl	8001710 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001ca0:	f7ff fd56 	bl	8001750 <LCD_RD_DATA>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b9d      	ldr	r3, [pc, #628]	; (8001f20 <lcd_init+0x2b8>)
 8001caa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cac:	f7ff fd50 	bl	8001750 <LCD_RD_DATA>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b9a      	ldr	r3, [pc, #616]	; (8001f20 <lcd_init+0x2b8>)
 8001cb6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cb8:	f7ff fd4a 	bl	8001750 <LCD_RD_DATA>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b97      	ldr	r3, [pc, #604]	; (8001f20 <lcd_init+0x2b8>)
 8001cc2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001cc4:	4b96      	ldr	r3, [pc, #600]	; (8001f20 <lcd_init+0x2b8>)
 8001cc6:	889b      	ldrh	r3, [r3, #4]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <lcd_init+0x2b8>)
 8001cce:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001cd0:	f7ff fd3e 	bl	8001750 <LCD_RD_DATA>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b91      	ldr	r3, [pc, #580]	; (8001f20 <lcd_init+0x2b8>)
 8001cda:	889b      	ldrh	r3, [r3, #4]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b8f      	ldr	r3, [pc, #572]	; (8001f20 <lcd_init+0x2b8>)
 8001ce2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001ce4:	20cf      	movs	r0, #207	; 0xcf
 8001ce6:	f7ff fd13 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff fd20 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001cf0:	20c1      	movs	r0, #193	; 0xc1
 8001cf2:	f7ff fd1d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001cf6:	2030      	movs	r0, #48	; 0x30
 8001cf8:	f7ff fd1a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001cfc:	20ed      	movs	r0, #237	; 0xed
 8001cfe:	f7ff fd07 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d02:	2064      	movs	r0, #100	; 0x64
 8001d04:	f7ff fd14 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f7ff fd11 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d0e:	2012      	movs	r0, #18
 8001d10:	f7ff fd0e 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d14:	2081      	movs	r0, #129	; 0x81
 8001d16:	f7ff fd0b 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d1a:	20e8      	movs	r0, #232	; 0xe8
 8001d1c:	f7ff fcf8 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d20:	2085      	movs	r0, #133	; 0x85
 8001d22:	f7ff fd05 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d26:	2010      	movs	r0, #16
 8001d28:	f7ff fd02 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d2c:	207a      	movs	r0, #122	; 0x7a
 8001d2e:	f7ff fcff 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d32:	20cb      	movs	r0, #203	; 0xcb
 8001d34:	f7ff fcec 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d38:	2039      	movs	r0, #57	; 0x39
 8001d3a:	f7ff fcf9 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d3e:	202c      	movs	r0, #44	; 0x2c
 8001d40:	f7ff fcf6 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fcf3 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d4a:	2034      	movs	r0, #52	; 0x34
 8001d4c:	f7ff fcf0 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d50:	2002      	movs	r0, #2
 8001d52:	f7ff fced 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d56:	20f7      	movs	r0, #247	; 0xf7
 8001d58:	f7ff fcda 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d5c:	2020      	movs	r0, #32
 8001d5e:	f7ff fce7 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d62:	20ea      	movs	r0, #234	; 0xea
 8001d64:	f7ff fcd4 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff fce1 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff fcde 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d74:	20c0      	movs	r0, #192	; 0xc0
 8001d76:	f7ff fccb 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d7a:	201b      	movs	r0, #27
 8001d7c:	f7ff fcd8 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d80:	20c1      	movs	r0, #193	; 0xc1
 8001d82:	f7ff fcc5 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d86:	2001      	movs	r0, #1
 8001d88:	f7ff fcd2 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d8c:	20c5      	movs	r0, #197	; 0xc5
 8001d8e:	f7ff fcbf 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d92:	2030      	movs	r0, #48	; 0x30
 8001d94:	f7ff fccc 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d98:	2030      	movs	r0, #48	; 0x30
 8001d9a:	f7ff fcc9 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d9e:	20c7      	movs	r0, #199	; 0xc7
 8001da0:	f7ff fcb6 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001da4:	20b7      	movs	r0, #183	; 0xb7
 8001da6:	f7ff fcc3 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001daa:	2036      	movs	r0, #54	; 0x36
 8001dac:	f7ff fcb0 	bl	8001710 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001db0:	2008      	movs	r0, #8
 8001db2:	f7ff fcbd 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001db6:	203a      	movs	r0, #58	; 0x3a
 8001db8:	f7ff fcaa 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001dbc:	2055      	movs	r0, #85	; 0x55
 8001dbe:	f7ff fcb7 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001dc2:	20b1      	movs	r0, #177	; 0xb1
 8001dc4:	f7ff fca4 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f7ff fcb1 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001dce:	201a      	movs	r0, #26
 8001dd0:	f7ff fcae 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001dd4:	20b6      	movs	r0, #182	; 0xb6
 8001dd6:	f7ff fc9b 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001dda:	200a      	movs	r0, #10
 8001ddc:	f7ff fca8 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001de0:	20a2      	movs	r0, #162	; 0xa2
 8001de2:	f7ff fca5 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001de6:	20f2      	movs	r0, #242	; 0xf2
 8001de8:	f7ff fc92 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff fc9f 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001df2:	2026      	movs	r0, #38	; 0x26
 8001df4:	f7ff fc8c 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f7ff fc99 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001dfe:	20e0      	movs	r0, #224	; 0xe0
 8001e00:	f7ff fc86 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e04:	200f      	movs	r0, #15
 8001e06:	f7ff fc93 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e0a:	202a      	movs	r0, #42	; 0x2a
 8001e0c:	f7ff fc90 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e10:	2028      	movs	r0, #40	; 0x28
 8001e12:	f7ff fc8d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e16:	2008      	movs	r0, #8
 8001e18:	f7ff fc8a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e1c:	200e      	movs	r0, #14
 8001e1e:	f7ff fc87 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e22:	2008      	movs	r0, #8
 8001e24:	f7ff fc84 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e28:	2054      	movs	r0, #84	; 0x54
 8001e2a:	f7ff fc81 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e2e:	20a9      	movs	r0, #169	; 0xa9
 8001e30:	f7ff fc7e 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e34:	2043      	movs	r0, #67	; 0x43
 8001e36:	f7ff fc7b 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e3a:	200a      	movs	r0, #10
 8001e3c:	f7ff fc78 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e40:	200f      	movs	r0, #15
 8001e42:	f7ff fc75 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fc72 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff fc6f 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff fc6c 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fc69 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e5e:	20e1      	movs	r0, #225	; 0xe1
 8001e60:	f7ff fc56 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fc63 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e6a:	2015      	movs	r0, #21
 8001e6c:	f7ff fc60 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e70:	2017      	movs	r0, #23
 8001e72:	f7ff fc5d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e76:	2007      	movs	r0, #7
 8001e78:	f7ff fc5a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e7c:	2011      	movs	r0, #17
 8001e7e:	f7ff fc57 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e82:	2006      	movs	r0, #6
 8001e84:	f7ff fc54 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e88:	202b      	movs	r0, #43	; 0x2b
 8001e8a:	f7ff fc51 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e8e:	2056      	movs	r0, #86	; 0x56
 8001e90:	f7ff fc4e 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001e94:	203c      	movs	r0, #60	; 0x3c
 8001e96:	f7ff fc4b 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e9a:	2005      	movs	r0, #5
 8001e9c:	f7ff fc48 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ea0:	2010      	movs	r0, #16
 8001ea2:	f7ff fc45 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f7ff fc42 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001eac:	203f      	movs	r0, #63	; 0x3f
 8001eae:	f7ff fc3f 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001eb2:	203f      	movs	r0, #63	; 0x3f
 8001eb4:	f7ff fc3c 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001eb8:	200f      	movs	r0, #15
 8001eba:	f7ff fc39 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001ebe:	202b      	movs	r0, #43	; 0x2b
 8001ec0:	f7ff fc26 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff fc33 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fc30 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff fc2d 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001ed6:	203f      	movs	r0, #63	; 0x3f
 8001ed8:	f7ff fc2a 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001edc:	202a      	movs	r0, #42	; 0x2a
 8001ede:	f7ff fc17 	bl	8001710 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fc24 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fc21 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff fc1e 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001ef4:	20ef      	movs	r0, #239	; 0xef
 8001ef6:	f7ff fc1b 	bl	8001730 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001efa:	2011      	movs	r0, #17
 8001efc:	f7ff fc08 	bl	8001710 <LCD_WR_REG>
	HAL_Delay(120);
 8001f00:	2078      	movs	r0, #120	; 0x78
 8001f02:	f002 fadb 	bl	80044bc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f06:	2029      	movs	r0, #41	; 0x29
 8001f08:	f7ff fc02 	bl	8001710 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <lcd_init+0x2bc>)
 8001f14:	f003 fb08 	bl	8005528 <HAL_GPIO_WritePin>
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	200003d4 	.word	0x200003d4
 8001f24:	40020000 	.word	0x40020000

08001f28 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	b298      	uxth	r0, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	8b3a      	ldrh	r2, [r7, #24]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7ff fcc3 	bl	80018dc <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	b298      	uxth	r0, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	8b3a      	ldrh	r2, [r7, #24]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7ff fcb3 	bl	80018dc <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	b298      	uxth	r0, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	8b3a      	ldrh	r2, [r7, #24]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7ff fca3 	bl	80018dc <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	b298      	uxth	r0, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	8b3a      	ldrh	r2, [r7, #24]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7ff fc93 	bl	80018dc <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b298      	uxth	r0, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	8b3a      	ldrh	r2, [r7, #24]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7ff fc83 	bl	80018dc <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	b298      	uxth	r0, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	8b3a      	ldrh	r2, [r7, #24]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7ff fc73 	bl	80018dc <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	b298      	uxth	r0, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	b29a      	uxth	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	b29b      	uxth	r3, r3
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	b29b      	uxth	r3, r3
 800200e:	8b3a      	ldrh	r2, [r7, #24]
 8002010:	4619      	mov	r1, r3
 8002012:	f7ff fc63 	bl	80018dc <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	b29a      	uxth	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	b298      	uxth	r0, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	b29b      	uxth	r3, r3
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	b29b      	uxth	r3, r3
 800202e:	8b3a      	ldrh	r2, [r7, #24]
 8002030:	4619      	mov	r1, r3
 8002032:	f7ff fc53 	bl	80018dc <lcd_DrawPoint>
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b08a      	sub	sp, #40	; 0x28
 8002042:	af02      	add	r7, sp, #8
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	f1c3 0303 	rsb	r3, r3, #3
 800205e:	613b      	str	r3, [r7, #16]


	if (fill)
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	d04f      	beq.n	8002106 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8002066:	e029      	b.n	80020bc <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e00a      	b.n	8002084 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff ff55 	bl	8001f28 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	429a      	cmp	r2, r3
 800208a:	ddf0      	ble.n	800206e <lcd_DrawCircle+0x30>

			if (d < 0) {
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	da06      	bge.n	80020a0 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	009a      	lsls	r2, r3, #2
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	3306      	adds	r3, #6
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	e00a      	b.n	80020b6 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	009a      	lsls	r2, r3, #2
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	330a      	adds	r3, #10
 80020ae:	613b      	str	r3, [r7, #16]
				y--;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	ddd1      	ble.n	8002068 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80020c4:	e023      	b.n	800210e <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f7ff ff29 	bl	8001f28 <_draw_circle_8>
			if (d < 0) {
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	da06      	bge.n	80020ea <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	009a      	lsls	r2, r3, #2
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	3306      	adds	r3, #6
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	e00a      	b.n	8002100 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	009a      	lsls	r2, r3, #2
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	330a      	adds	r3, #10
 80020f8:	613b      	str	r3, [r7, #16]
				y--;
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	61bb      	str	r3, [r7, #24]
			x++;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	3301      	adds	r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	429a      	cmp	r2, r3
 800210c:	dddb      	ble.n	80020c6 <lcd_DrawCircle+0x88>
}
 800210e:	bf00      	nop
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b08b      	sub	sp, #44	; 0x2c
 800211c:	af04      	add	r7, sp, #16
 800211e:	60ba      	str	r2, [r7, #8]
 8002120:	461a      	mov	r2, r3
 8002122:	4603      	mov	r3, r0
 8002124:	81fb      	strh	r3, [r7, #14]
 8002126:	460b      	mov	r3, r1
 8002128:	81bb      	strh	r3, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800212e:	89fb      	ldrh	r3, [r7, #14]
 8002130:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8002132:	2300      	movs	r3, #0
 8002134:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002136:	e048      	b.n	80021ca <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d145      	bne.n	80021ca <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800213e:	89fa      	ldrh	r2, [r7, #14]
 8002140:	4b26      	ldr	r3, [pc, #152]	; (80021dc <lcd_ShowStr+0xc4>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	1acb      	subs	r3, r1, r3
 8002150:	429a      	cmp	r2, r3
 8002152:	dc3f      	bgt.n	80021d4 <lcd_ShowStr+0xbc>
 8002154:	89ba      	ldrh	r2, [r7, #12]
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <lcd_ShowStr+0xc4>)
 8002158:	885b      	ldrh	r3, [r3, #2]
 800215a:	4619      	mov	r1, r3
 800215c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002160:	1acb      	subs	r3, r1, r3
 8002162:	429a      	cmp	r2, r3
 8002164:	dc36      	bgt.n	80021d4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b80      	cmp	r3, #128	; 0x80
 800216c:	d902      	bls.n	8002174 <lcd_ShowStr+0x5c>
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
 8002172:	e02a      	b.n	80021ca <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b0d      	cmp	r3, #13
 800217a:	d10b      	bne.n	8002194 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800217c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002180:	b29a      	uxth	r2, r3
 8002182:	89bb      	ldrh	r3, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002188:	8abb      	ldrh	r3, [r7, #20]
 800218a:	81fb      	strh	r3, [r7, #14]
					str++;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	3301      	adds	r3, #1
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	e017      	b.n	80021c4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	88fc      	ldrh	r4, [r7, #6]
 800219a:	89b9      	ldrh	r1, [r7, #12]
 800219c:	89f8      	ldrh	r0, [r7, #14]
 800219e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021a2:	9302      	str	r3, [sp, #8]
 80021a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4623      	mov	r3, r4
 80021b0:	f7ff fc66 	bl	8001a80 <lcd_ShowChar>
					x+=sizey/2;
 80021b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	b29a      	uxth	r2, r3
 80021be:	89fb      	ldrh	r3, [r7, #14]
 80021c0:	4413      	add	r3, r2
 80021c2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1b2      	bne.n	8002138 <lcd_ShowStr+0x20>
 80021d2:	e000      	b.n	80021d6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80021d4:	bf00      	nop
			}
		}
	}
}
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd90      	pop	{r4, r7, pc}
 80021dc:	200003d4 	.word	0x200003d4

080021e0 <lcd_ShowSnake>:
	uint16_t len=strlen((const char *)str);
	uint16_t x1=(lcddev.width-len*8)/2;
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
}

void lcd_ShowSnake(uint8_t arr[20][20]) {
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	6078      	str	r0, [r7, #4]
	// margin = 20
	for (int i = 0; i < 20; i++) {
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e06a      	b.n	80022c4 <lcd_ShowSnake+0xe4>
		for (int j = 0; j < 20; j++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	e061      	b.n	80022b8 <lcd_ShowSnake+0xd8>
			if (arr[i][j] != 0) {
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	461a      	mov	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	441a      	add	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d028      	beq.n	8002260 <lcd_ShowSnake+0x80>
				lcd_DrawRectangle(20+i*10+1, 20+j*10+1, 20+i*10 + 9, 20+j*10 + 9, BLACK);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	b29b      	uxth	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	4413      	add	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	b29b      	uxth	r3, r3
 800221c:	3315      	adds	r3, #21
 800221e:	b298      	uxth	r0, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4413      	add	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	b29b      	uxth	r3, r3
 800222e:	3315      	adds	r3, #21
 8002230:	b299      	uxth	r1, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4413      	add	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	b29b      	uxth	r3, r3
 8002240:	331d      	adds	r3, #29
 8002242:	b29a      	uxth	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	b29b      	uxth	r3, r3
 8002248:	461c      	mov	r4, r3
 800224a:	00a4      	lsls	r4, r4, #2
 800224c:	4423      	add	r3, r4
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	b29b      	uxth	r3, r3
 8002252:	331d      	adds	r3, #29
 8002254:	b29b      	uxth	r3, r3
 8002256:	2400      	movs	r4, #0
 8002258:	9400      	str	r4, [sp, #0]
 800225a:	f7ff fbda 	bl	8001a12 <lcd_DrawRectangle>
 800225e:	e028      	b.n	80022b2 <lcd_ShowSnake+0xd2>
			} else {
				lcd_DrawRectangle(20+i*10+1, 20+j*10+1, 20+i*10 + 9, 20+j*10 + 9, GREEN);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4413      	add	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	b29b      	uxth	r3, r3
 800226e:	3315      	adds	r3, #21
 8002270:	b298      	uxth	r0, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4413      	add	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	b29b      	uxth	r3, r3
 8002280:	3315      	adds	r3, #21
 8002282:	b299      	uxth	r1, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	b29b      	uxth	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	4413      	add	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	331d      	adds	r3, #29
 8002294:	b29a      	uxth	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	b29b      	uxth	r3, r3
 800229a:	461c      	mov	r4, r3
 800229c:	00a4      	lsls	r4, r4, #2
 800229e:	4423      	add	r3, r4
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	331d      	adds	r3, #29
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 80022ac:	9400      	str	r4, [sp, #0]
 80022ae:	f7ff fbb0 	bl	8001a12 <lcd_DrawRectangle>
		for (int j = 0; j < 20; j++) {
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3301      	adds	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b13      	cmp	r3, #19
 80022bc:	dd9a      	ble.n	80021f4 <lcd_ShowSnake+0x14>
	for (int i = 0; i < 20; i++) {
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b13      	cmp	r3, #19
 80022c8:	dd91      	ble.n	80021ee <lcd_ShowSnake+0xe>
			}
		}
	}
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}

080022d4 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80022d8:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <led7_Scan+0x104>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <led7_Scan+0x104>)
 80022e2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80022e4:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <led7_Scan+0x108>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a3d      	ldr	r2, [pc, #244]	; (80023e0 <led7_Scan+0x10c>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	b21a      	sxth	r2, r3
 80022f0:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <led7_Scan+0x104>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <led7_Scan+0x104>)
 80022fe:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002300:	4b36      	ldr	r3, [pc, #216]	; (80023dc <led7_Scan+0x108>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d847      	bhi.n	8002398 <led7_Scan+0xc4>
 8002308:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <led7_Scan+0x3c>)
 800230a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230e:	bf00      	nop
 8002310:	08002321 	.word	0x08002321
 8002314:	0800233f 	.word	0x0800233f
 8002318:	0800235d 	.word	0x0800235d
 800231c:	0800237b 	.word	0x0800237b
	case 0:
		spi_buffer |= 0x00b0;
 8002320:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <led7_Scan+0x104>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002328:	b29a      	uxth	r2, r3
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <led7_Scan+0x104>)
 800232c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <led7_Scan+0x104>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002336:	b29a      	uxth	r2, r3
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <led7_Scan+0x104>)
 800233a:	801a      	strh	r2, [r3, #0]
		break;
 800233c:	e02d      	b.n	800239a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800233e:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <led7_Scan+0x104>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <led7_Scan+0x104>)
 800234a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <led7_Scan+0x104>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	f023 0320 	bic.w	r3, r3, #32
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <led7_Scan+0x104>)
 8002358:	801a      	strh	r2, [r3, #0]
		break;
 800235a:	e01e      	b.n	800239a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <led7_Scan+0x104>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <led7_Scan+0x104>)
 8002368:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <led7_Scan+0x104>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	f023 0310 	bic.w	r3, r3, #16
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <led7_Scan+0x104>)
 8002376:	801a      	strh	r2, [r3, #0]
		break;
 8002378:	e00f      	b.n	800239a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <led7_Scan+0x104>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <led7_Scan+0x104>)
 8002386:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <led7_Scan+0x104>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <led7_Scan+0x104>)
 8002394:	801a      	strh	r2, [r3, #0]
		break;
 8002396:	e000      	b.n	800239a <led7_Scan+0xc6>
	default:
		break;
 8002398:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <led7_Scan+0x108>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	425a      	negs	r2, r3
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	f002 0203 	and.w	r2, r2, #3
 80023aa:	bf58      	it	pl
 80023ac:	4253      	negpl	r3, r2
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <led7_Scan+0x108>)
 80023b0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2140      	movs	r1, #64	; 0x40
 80023b6:	480b      	ldr	r0, [pc, #44]	; (80023e4 <led7_Scan+0x110>)
 80023b8:	f003 f8b6 	bl	8005528 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80023bc:	2301      	movs	r3, #1
 80023be:	2202      	movs	r2, #2
 80023c0:	4905      	ldr	r1, [pc, #20]	; (80023d8 <led7_Scan+0x104>)
 80023c2:	4809      	ldr	r0, [pc, #36]	; (80023e8 <led7_Scan+0x114>)
 80023c4:	f004 fd73 	bl	8006eae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80023c8:	2201      	movs	r2, #1
 80023ca:	2140      	movs	r1, #64	; 0x40
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <led7_Scan+0x110>)
 80023ce:	f003 f8ab 	bl	8005528 <HAL_GPIO_WritePin>
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000004 	.word	0x20000004
 80023dc:	200000d4 	.word	0x200000d4
 80023e0:	20000000 	.word	0x20000000
 80023e4:	40021800 	.word	0x40021800
 80023e8:	20000410 	.word	0x20000410

080023ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023f0:	f001 fff2 	bl	80043d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023f4:	f000 f830 	bl	8002458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f8:	f7fe fffe 	bl	80013f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80023fc:	f000 ffb4 	bl	8003368 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002400:	f000 fda6 	bl	8002f50 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002404:	f7fe ff28 	bl	8001258 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002408:	f7ff f90c 	bl	8001624 <MX_I2C1_Init>
  MX_TIM13_Init();
 800240c:	f000 fff8 	bl	8003400 <MX_TIM13_Init>
  MX_DMA_Init();
 8002410:	f7fe ff02 	bl	8001218 <MX_DMA_Init>
  MX_ADC1_Init();
 8002414:	f7fe fd34 	bl	8000e80 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002418:	f000 ff56 	bl	80032c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  system_init();
 800241c:	f000 f886 	bl	800252c <system_init>
  /* USER CODE END 2 */
  srand(time(NULL));
 8002420:	2000      	movs	r0, #0
 8002422:	f006 f8b5 	bl	8008590 <time>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4613      	mov	r3, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f006 f841 	bl	80084b4 <srand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //touch_Adjust();
  lcd_Clear(BLACK);
 8002432:	2000      	movs	r0, #0
 8002434:	f7ff f9ea 	bl	800180c <lcd_Clear>
  //lcd_Fill(10, 260, 10, 280, GBLUE);
 while (1)
  {
	  //scan touch screen
	  touch_Scan();
 8002438:	f001 ff70 	bl	800431c <touch_Scan>
	  //lcd_Fill(10, 10, 200, 200, RED);
	  //check if touch screen is touched
	  // 50ms task
	  if(flag_timer2 == 1){
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <main+0x68>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d1f9      	bne.n	8002438 <main+0x4c>
		  flag_timer2 = 0;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <main+0x68>)
 8002446:	2200      	movs	r2, #0
 8002448:	801a      	strh	r2, [r3, #0]
		  runSnake();
 800244a:	f000 fae3 	bl	8002a14 <runSnake>
		  snakeRun();
 800244e:	f000 f87d 	bl	800254c <snakeRun>
	  touch_Scan();
 8002452:	e7f1      	b.n	8002438 <main+0x4c>
 8002454:	20000276 	.word	0x20000276

08002458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b094      	sub	sp, #80	; 0x50
 800245c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	2230      	movs	r2, #48	; 0x30
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f006 f81c 	bl	80084a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <SystemClock_Config+0xcc>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <SystemClock_Config+0xcc>)
 8002486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248a:	6413      	str	r3, [r2, #64]	; 0x40
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <SystemClock_Config+0xcc>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <SystemClock_Config+0xd0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <SystemClock_Config+0xd0>)
 80024a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <SystemClock_Config+0xd0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024b4:	2302      	movs	r3, #2
 80024b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b8:	2301      	movs	r3, #1
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024bc:	2310      	movs	r3, #16
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c0:	2302      	movs	r3, #2
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024c8:	2308      	movs	r3, #8
 80024ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024cc:	23a8      	movs	r3, #168	; 0xa8
 80024ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024d0:	2302      	movs	r3, #2
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024d4:	2304      	movs	r3, #4
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4618      	mov	r0, r3
 80024de:	f003 fffd 	bl	80064dc <HAL_RCC_OscConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024e8:	f000 fcbe 	bl	8002e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ec:	230f      	movs	r3, #15
 80024ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f0:	2302      	movs	r3, #2
 80024f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80024fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002502:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	2105      	movs	r1, #5
 800250a:	4618      	mov	r0, r3
 800250c:	f004 fa5e 	bl	80069cc <HAL_RCC_ClockConfig>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002516:	f000 fca7 	bl	8002e68 <Error_Handler>
  }
}
 800251a:	bf00      	nop
 800251c:	3750      	adds	r7, #80	; 0x50
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000

0800252c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	  timer_init();
 8002530:	f000 fca0 	bl	8002e74 <timer_init>
	  button_init();
 8002534:	f7fe fe64 	bl	8001200 <button_init>
	  lcd_init();
 8002538:	f7ff fb96 	bl	8001c68 <lcd_init>
	  touch_init();
 800253c:	f001 fede 	bl	80042fc <touch_init>
	  setTimer2(10);
 8002540:	200a      	movs	r0, #10
 8002542:	f000 fca5 	bl	8002e90 <setTimer2>
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <snakeRun>:

// end


uint8_t count_move = 0;
void snakeRun() {
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	count_move = (count_move + 1) % (20/2); // 0.5s
 8002550:	4baf      	ldr	r3, [pc, #700]	; (8002810 <snakeRun+0x2c4>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	4baf      	ldr	r3, [pc, #700]	; (8002814 <snakeRun+0x2c8>)
 8002558:	fb83 1302 	smull	r1, r3, r3, r2
 800255c:	1099      	asrs	r1, r3, #2
 800255e:	17d3      	asrs	r3, r2, #31
 8002560:	1ac9      	subs	r1, r1, r3
 8002562:	460b      	mov	r3, r1
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	1ad1      	subs	r1, r2, r3
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	4ba8      	ldr	r3, [pc, #672]	; (8002810 <snakeRun+0x2c4>)
 8002570:	701a      	strb	r2, [r3, #0]
	if (count_move == 0) {
 8002572:	4ba7      	ldr	r3, [pc, #668]	; (8002810 <snakeRun+0x2c4>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 8188 	bne.w	800288c <snakeRun+0x340>
		switch (direction) {
 800257c:	4ba6      	ldr	r3, [pc, #664]	; (8002818 <snakeRun+0x2cc>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b03      	cmp	r3, #3
 8002582:	f200 80f3 	bhi.w	800276c <snakeRun+0x220>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <snakeRun+0x40>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	0800259d 	.word	0x0800259d
 8002590:	08002611 	.word	0x08002611
 8002594:	08002685 	.word	0x08002685
 8002598:	080026f9 	.word	0x080026f9
			case up:
				arr[head_x][head_y] = 1;
 800259c:	4b9f      	ldr	r3, [pc, #636]	; (800281c <snakeRun+0x2d0>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	4b9f      	ldr	r3, [pc, #636]	; (8002820 <snakeRun+0x2d4>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	4a9e      	ldr	r2, [pc, #632]	; (8002824 <snakeRun+0x2d8>)
 80025aa:	460b      	mov	r3, r1
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	4403      	add	r3, r0
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
				head_y -= 1;
 80025ba:	4b99      	ldr	r3, [pc, #612]	; (8002820 <snakeRun+0x2d4>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b97      	ldr	r3, [pc, #604]	; (8002820 <snakeRun+0x2d4>)
 80025c4:	701a      	strb	r2, [r3, #0]
				headCheck();
 80025c6:	f000 fbad 	bl	8002d24 <headCheck>
				if (arr[head_x][head_y] > 0) {
 80025ca:	4b94      	ldr	r3, [pc, #592]	; (800281c <snakeRun+0x2d0>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	4b93      	ldr	r3, [pc, #588]	; (8002820 <snakeRun+0x2d4>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	4a93      	ldr	r2, [pc, #588]	; (8002824 <snakeRun+0x2d8>)
 80025d8:	460b      	mov	r3, r1
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	4403      	add	r3, r0
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <snakeRun+0xa4>
					system_status = GAMEOVER;
 80025ea:	4b8f      	ldr	r3, [pc, #572]	; (8002828 <snakeRun+0x2dc>)
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
				}
				arr[head_x][head_y] = 1;
 80025f0:	4b8a      	ldr	r3, [pc, #552]	; (800281c <snakeRun+0x2d0>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	4b8a      	ldr	r3, [pc, #552]	; (8002820 <snakeRun+0x2d4>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	4a89      	ldr	r2, [pc, #548]	; (8002824 <snakeRun+0x2d8>)
 80025fe:	460b      	mov	r3, r1
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	4403      	add	r3, r0
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
				break;
 800260e:	e0ae      	b.n	800276e <snakeRun+0x222>
			case down:
				arr[head_x][head_y] = 2;
 8002610:	4b82      	ldr	r3, [pc, #520]	; (800281c <snakeRun+0x2d0>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	4b82      	ldr	r3, [pc, #520]	; (8002820 <snakeRun+0x2d4>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	4a81      	ldr	r2, [pc, #516]	; (8002824 <snakeRun+0x2d8>)
 800261e:	460b      	mov	r3, r1
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	4403      	add	r3, r0
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
				head_y += 1;
 800262e:	4b7c      	ldr	r3, [pc, #496]	; (8002820 <snakeRun+0x2d4>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	3301      	adds	r3, #1
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b7a      	ldr	r3, [pc, #488]	; (8002820 <snakeRun+0x2d4>)
 8002638:	701a      	strb	r2, [r3, #0]
				headCheck();
 800263a:	f000 fb73 	bl	8002d24 <headCheck>
				if (arr[head_x][head_y] > 0) {
 800263e:	4b77      	ldr	r3, [pc, #476]	; (800281c <snakeRun+0x2d0>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4b76      	ldr	r3, [pc, #472]	; (8002820 <snakeRun+0x2d4>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	4a76      	ldr	r2, [pc, #472]	; (8002824 <snakeRun+0x2d8>)
 800264c:	460b      	mov	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	4403      	add	r3, r0
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <snakeRun+0x118>
					system_status = GAMEOVER;
 800265e:	4b72      	ldr	r3, [pc, #456]	; (8002828 <snakeRun+0x2dc>)
 8002660:	2202      	movs	r2, #2
 8002662:	601a      	str	r2, [r3, #0]
				}
				arr[head_x][head_y] = 2;
 8002664:	4b6d      	ldr	r3, [pc, #436]	; (800281c <snakeRun+0x2d0>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	4b6d      	ldr	r3, [pc, #436]	; (8002820 <snakeRun+0x2d4>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	4a6c      	ldr	r2, [pc, #432]	; (8002824 <snakeRun+0x2d8>)
 8002672:	460b      	mov	r3, r1
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	4403      	add	r3, r0
 800267e:	2202      	movs	r2, #2
 8002680:	701a      	strb	r2, [r3, #0]
				break;
 8002682:	e074      	b.n	800276e <snakeRun+0x222>
			case left:
				arr[head_x][head_y] = 3;
 8002684:	4b65      	ldr	r3, [pc, #404]	; (800281c <snakeRun+0x2d0>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	4b65      	ldr	r3, [pc, #404]	; (8002820 <snakeRun+0x2d4>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	4a64      	ldr	r2, [pc, #400]	; (8002824 <snakeRun+0x2d8>)
 8002692:	460b      	mov	r3, r1
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	4403      	add	r3, r0
 800269e:	2203      	movs	r2, #3
 80026a0:	701a      	strb	r2, [r3, #0]
				head_x -= 1;
 80026a2:	4b5e      	ldr	r3, [pc, #376]	; (800281c <snakeRun+0x2d0>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4b5c      	ldr	r3, [pc, #368]	; (800281c <snakeRun+0x2d0>)
 80026ac:	701a      	strb	r2, [r3, #0]
				headCheck();
 80026ae:	f000 fb39 	bl	8002d24 <headCheck>
				if (arr[head_x][head_y] > 0) {
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <snakeRun+0x2d0>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <snakeRun+0x2d4>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	4a59      	ldr	r2, [pc, #356]	; (8002824 <snakeRun+0x2d8>)
 80026c0:	460b      	mov	r3, r1
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	4403      	add	r3, r0
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <snakeRun+0x18c>
					system_status = GAMEOVER;
 80026d2:	4b55      	ldr	r3, [pc, #340]	; (8002828 <snakeRun+0x2dc>)
 80026d4:	2202      	movs	r2, #2
 80026d6:	601a      	str	r2, [r3, #0]
				}
				arr[head_x][head_y] = 3;
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <snakeRun+0x2d0>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	4b50      	ldr	r3, [pc, #320]	; (8002820 <snakeRun+0x2d4>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	4a4f      	ldr	r2, [pc, #316]	; (8002824 <snakeRun+0x2d8>)
 80026e6:	460b      	mov	r3, r1
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	4403      	add	r3, r0
 80026f2:	2203      	movs	r2, #3
 80026f4:	701a      	strb	r2, [r3, #0]
				break;
 80026f6:	e03a      	b.n	800276e <snakeRun+0x222>
			case right:
				arr[head_x][head_y] = 4;
 80026f8:	4b48      	ldr	r3, [pc, #288]	; (800281c <snakeRun+0x2d0>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	4b48      	ldr	r3, [pc, #288]	; (8002820 <snakeRun+0x2d4>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	4a47      	ldr	r2, [pc, #284]	; (8002824 <snakeRun+0x2d8>)
 8002706:	460b      	mov	r3, r1
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	4403      	add	r3, r0
 8002712:	2204      	movs	r2, #4
 8002714:	701a      	strb	r2, [r3, #0]
				head_x += 1;
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <snakeRun+0x2d0>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b3f      	ldr	r3, [pc, #252]	; (800281c <snakeRun+0x2d0>)
 8002720:	701a      	strb	r2, [r3, #0]
				headCheck();
 8002722:	f000 faff 	bl	8002d24 <headCheck>
				if (arr[head_x][head_y] > 0) {
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <snakeRun+0x2d0>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	4b3c      	ldr	r3, [pc, #240]	; (8002820 <snakeRun+0x2d4>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	4a3c      	ldr	r2, [pc, #240]	; (8002824 <snakeRun+0x2d8>)
 8002734:	460b      	mov	r3, r1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	4403      	add	r3, r0
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <snakeRun+0x200>
					system_status = GAMEOVER;
 8002746:	4b38      	ldr	r3, [pc, #224]	; (8002828 <snakeRun+0x2dc>)
 8002748:	2202      	movs	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
				}
				arr[head_x][head_y] = 4;
 800274c:	4b33      	ldr	r3, [pc, #204]	; (800281c <snakeRun+0x2d0>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	4b33      	ldr	r3, [pc, #204]	; (8002820 <snakeRun+0x2d4>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	4a32      	ldr	r2, [pc, #200]	; (8002824 <snakeRun+0x2d8>)
 800275a:	460b      	mov	r3, r1
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	4403      	add	r3, r0
 8002766:	2204      	movs	r2, #4
 8002768:	701a      	strb	r2, [r3, #0]
				break;
 800276a:	e000      	b.n	800276e <snakeRun+0x222>
			default:
				break;
 800276c:	bf00      	nop
		}

		if (!eatCheck()) { // if dont eat, del tail
 800276e:	f000 fa99 	bl	8002ca4 <eatCheck>
 8002772:	4603      	mov	r3, r0
 8002774:	f083 0301 	eor.w	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8086 	beq.w	800288c <snakeRun+0x340>
			// tail_x tail_y
			switch (arr[tail_x][tail_y]) {
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <snakeRun+0x2e0>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <snakeRun+0x2e4>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <snakeRun+0x2d8>)
 800278e:	460b      	mov	r3, r1
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	4403      	add	r3, r0
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	3b01      	subs	r3, #1
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d876      	bhi.n	8002890 <snakeRun+0x344>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <snakeRun+0x25c>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027e5 	.word	0x080027e5
 80027b0:	08002835 	.word	0x08002835
 80027b4:	08002861 	.word	0x08002861
				case 1:
					tail_y -= 1;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <snakeRun+0x2e4>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	3b01      	subs	r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <snakeRun+0x2e4>)
 80027c2:	701a      	strb	r2, [r3, #0]
					arr[tail_x][tail_y+1] = 0;
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <snakeRun+0x2e0>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <snakeRun+0x2e4>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	4914      	ldr	r1, [pc, #80]	; (8002824 <snakeRun+0x2d8>)
 80027d2:	4603      	mov	r3, r0
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4403      	add	r3, r0
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	4413      	add	r3, r2
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
					break;
 80027e2:	e056      	b.n	8002892 <snakeRun+0x346>
				case 2:
					tail_y += 1;
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <snakeRun+0x2e4>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <snakeRun+0x2e4>)
 80027ee:	701a      	strb	r2, [r3, #0]
					arr[tail_x][tail_y-1] = 0;
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <snakeRun+0x2e0>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <snakeRun+0x2e4>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	1e5a      	subs	r2, r3, #1
 80027fc:	4909      	ldr	r1, [pc, #36]	; (8002824 <snakeRun+0x2d8>)
 80027fe:	4603      	mov	r3, r0
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4403      	add	r3, r0
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	4413      	add	r3, r2
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
					break;
 800280e:	e040      	b.n	8002892 <snakeRun+0x346>
 8002810:	20000274 	.word	0x20000274
 8002814:	66666667 	.word	0x66666667
 8002818:	20000006 	.word	0x20000006
 800281c:	200000de 	.word	0x200000de
 8002820:	200000df 	.word	0x200000df
 8002824:	200000e4 	.word	0x200000e4
 8002828:	200000d8 	.word	0x200000d8
 800282c:	200000e0 	.word	0x200000e0
 8002830:	200000e1 	.word	0x200000e1
				case 3:
					tail_x -= 1;
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <snakeRun+0x34c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3b01      	subs	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <snakeRun+0x34c>)
 800283e:	701a      	strb	r2, [r3, #0]
					arr[tail_x+1][tail_y] = 0;
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <snakeRun+0x34c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <snakeRun+0x350>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	4914      	ldr	r1, [pc, #80]	; (80028a0 <snakeRun+0x354>)
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	4403      	add	r3, r0
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
					break;
 800285e:	e018      	b.n	8002892 <snakeRun+0x346>
				case 4:
					tail_x += 1;
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <snakeRun+0x34c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <snakeRun+0x34c>)
 800286a:	701a      	strb	r2, [r3, #0]
					arr[tail_x-1][tail_y] = 0;
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <snakeRun+0x34c>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	1e5a      	subs	r2, r3, #1
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <snakeRun+0x350>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	4909      	ldr	r1, [pc, #36]	; (80028a0 <snakeRun+0x354>)
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	4403      	add	r3, r0
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
					break;
 800288a:	e002      	b.n	8002892 <snakeRun+0x346>
				default:
					break;
			}
		}
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <snakeRun+0x346>
					break;
 8002890:	bf00      	nop
		//displaySnake();
	}
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200000e0 	.word	0x200000e0
 800289c:	200000e1 	.word	0x200000e1
 80028a0:	200000e4 	.word	0x200000e4

080028a4 <isButtonStart>:

uint8_t isButtonClear(){
	if(!touch_IsTouched()) return 0;
	return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 && touch_GetY() < 60;
}
uint8_t isButtonStart(){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80028a8:	f001 fd42 	bl	8004330 <touch_IsTouched>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <isButtonStart+0x12>
 80028b2:	2300      	movs	r3, #0
 80028b4:	e017      	b.n	80028e6 <isButtonStart+0x42>
	return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 && touch_GetY() < 60;
 80028b6:	f001 fd4d 	bl	8004354 <touch_GetX>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b3c      	cmp	r3, #60	; 0x3c
 80028be:	d910      	bls.n	80028e2 <isButtonStart+0x3e>
 80028c0:	f001 fd48 	bl	8004354 <touch_GetX>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2bb3      	cmp	r3, #179	; 0xb3
 80028c8:	d80b      	bhi.n	80028e2 <isButtonStart+0x3e>
 80028ca:	f001 fd4f 	bl	800436c <touch_GetY>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b0a      	cmp	r3, #10
 80028d2:	d906      	bls.n	80028e2 <isButtonStart+0x3e>
 80028d4:	f001 fd4a 	bl	800436c <touch_GetY>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b3b      	cmp	r3, #59	; 0x3b
 80028dc:	d801      	bhi.n	80028e2 <isButtonStart+0x3e>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <isButtonStart+0x40>
 80028e2:	2300      	movs	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	bd80      	pop	{r7, pc}

080028ea <isButtonUp>:
uint8_t isButtonUp(){
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80028ee:	f001 fd1f 	bl	8004330 <touch_IsTouched>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <isButtonUp+0x12>
 80028f8:	2300      	movs	r3, #0
 80028fa:	e019      	b.n	8002930 <isButtonUp+0x46>
	return touch_GetX() > 15 && touch_GetX() < 60 && touch_GetY() > 260 && touch_GetY() < 340;
 80028fc:	f001 fd2a 	bl	8004354 <touch_GetX>
 8002900:	4603      	mov	r3, r0
 8002902:	2b0f      	cmp	r3, #15
 8002904:	d912      	bls.n	800292c <isButtonUp+0x42>
 8002906:	f001 fd25 	bl	8004354 <touch_GetX>
 800290a:	4603      	mov	r3, r0
 800290c:	2b3b      	cmp	r3, #59	; 0x3b
 800290e:	d80d      	bhi.n	800292c <isButtonUp+0x42>
 8002910:	f001 fd2c 	bl	800436c <touch_GetY>
 8002914:	4603      	mov	r3, r0
 8002916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291a:	d907      	bls.n	800292c <isButtonUp+0x42>
 800291c:	f001 fd26 	bl	800436c <touch_GetY>
 8002920:	4603      	mov	r3, r0
 8002922:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002926:	d201      	bcs.n	800292c <isButtonUp+0x42>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <isButtonUp+0x44>
 800292c:	2300      	movs	r3, #0
 800292e:	b2db      	uxtb	r3, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}

08002934 <isButtonDown>:
uint8_t isButtonDown(){
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8002938:	f001 fcfa 	bl	8004330 <touch_IsTouched>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <isButtonDown+0x12>
 8002942:	2300      	movs	r3, #0
 8002944:	e019      	b.n	800297a <isButtonDown+0x46>
	return touch_GetX() > 70 && touch_GetX() < 115 && touch_GetY() > 260 && touch_GetY() < 340;
 8002946:	f001 fd05 	bl	8004354 <touch_GetX>
 800294a:	4603      	mov	r3, r0
 800294c:	2b46      	cmp	r3, #70	; 0x46
 800294e:	d912      	bls.n	8002976 <isButtonDown+0x42>
 8002950:	f001 fd00 	bl	8004354 <touch_GetX>
 8002954:	4603      	mov	r3, r0
 8002956:	2b72      	cmp	r3, #114	; 0x72
 8002958:	d80d      	bhi.n	8002976 <isButtonDown+0x42>
 800295a:	f001 fd07 	bl	800436c <touch_GetY>
 800295e:	4603      	mov	r3, r0
 8002960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002964:	d907      	bls.n	8002976 <isButtonDown+0x42>
 8002966:	f001 fd01 	bl	800436c <touch_GetY>
 800296a:	4603      	mov	r3, r0
 800296c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002970:	d201      	bcs.n	8002976 <isButtonDown+0x42>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <isButtonDown+0x44>
 8002976:	2300      	movs	r3, #0
 8002978:	b2db      	uxtb	r3, r3
}
 800297a:	4618      	mov	r0, r3
 800297c:	bd80      	pop	{r7, pc}

0800297e <isButtonLeft>:
uint8_t isButtonLeft(){
 800297e:	b580      	push	{r7, lr}
 8002980:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8002982:	f001 fcd5 	bl	8004330 <touch_IsTouched>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <isButtonLeft+0x12>
 800298c:	2300      	movs	r3, #0
 800298e:	e019      	b.n	80029c4 <isButtonLeft+0x46>
	return touch_GetX() > 125 && touch_GetX() < 170 && touch_GetY() > 260 && touch_GetY() < 340;
 8002990:	f001 fce0 	bl	8004354 <touch_GetX>
 8002994:	4603      	mov	r3, r0
 8002996:	2b7d      	cmp	r3, #125	; 0x7d
 8002998:	d912      	bls.n	80029c0 <isButtonLeft+0x42>
 800299a:	f001 fcdb 	bl	8004354 <touch_GetX>
 800299e:	4603      	mov	r3, r0
 80029a0:	2ba9      	cmp	r3, #169	; 0xa9
 80029a2:	d80d      	bhi.n	80029c0 <isButtonLeft+0x42>
 80029a4:	f001 fce2 	bl	800436c <touch_GetY>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ae:	d907      	bls.n	80029c0 <isButtonLeft+0x42>
 80029b0:	f001 fcdc 	bl	800436c <touch_GetY>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80029ba:	d201      	bcs.n	80029c0 <isButtonLeft+0x42>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <isButtonLeft+0x44>
 80029c0:	2300      	movs	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <isButtonRight>:
uint8_t isButtonRight(){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80029cc:	f001 fcb0 	bl	8004330 <touch_IsTouched>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <isButtonRight+0x12>
 80029d6:	2300      	movs	r3, #0
 80029d8:	e019      	b.n	8002a0e <isButtonRight+0x46>
	return touch_GetX() > 180 && touch_GetX() < 225 && touch_GetY() > 260 && touch_GetY() < 340;
 80029da:	f001 fcbb 	bl	8004354 <touch_GetX>
 80029de:	4603      	mov	r3, r0
 80029e0:	2bb4      	cmp	r3, #180	; 0xb4
 80029e2:	d912      	bls.n	8002a0a <isButtonRight+0x42>
 80029e4:	f001 fcb6 	bl	8004354 <touch_GetX>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2be0      	cmp	r3, #224	; 0xe0
 80029ec:	d80d      	bhi.n	8002a0a <isButtonRight+0x42>
 80029ee:	f001 fcbd 	bl	800436c <touch_GetY>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f8:	d907      	bls.n	8002a0a <isButtonRight+0x42>
 80029fa:	f001 fcb7 	bl	800436c <touch_GetY>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002a04:	d201      	bcs.n	8002a0a <isButtonRight+0x42>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <isButtonRight+0x44>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <runSnake>:




void runSnake(){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af04      	add	r7, sp, #16
	switch (system_status) {
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <runSnake+0x1f0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	f000 80cf 	beq.w	8002bc2 <runSnake+0x1ae>
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	f300 80e4 	bgt.w	8002bf2 <runSnake+0x1de>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <runSnake+0x20>
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d078      	beq.n	8002b24 <runSnake+0x110>
			delay_us(2000); //!!!!!!!!!!!!!!!!!!!!!check
			system_status = INIT;
			break;

		default:
			break;
 8002a32:	e0de      	b.n	8002bf2 <runSnake+0x1de>
			head_x = 0;
 8002a34:	4b74      	ldr	r3, [pc, #464]	; (8002c08 <runSnake+0x1f4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
			head_y = 0;
 8002a3a:	4b74      	ldr	r3, [pc, #464]	; (8002c0c <runSnake+0x1f8>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
			tail_x = 0;
 8002a40:	4b73      	ldr	r3, [pc, #460]	; (8002c10 <runSnake+0x1fc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
			tail_y = 0;
 8002a46:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <runSnake+0x200>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
			direction = right;
 8002a4c:	4b72      	ldr	r3, [pc, #456]	; (8002c18 <runSnake+0x204>)
 8002a4e:	2203      	movs	r2, #3
 8002a50:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	e016      	b.n	8002a86 <runSnake+0x72>
				for (int j = 0; j < 20; j++) {
 8002a58:	2300      	movs	r3, #0
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	e00d      	b.n	8002a7a <runSnake+0x66>
					arr[i][j] = 0;
 8002a5e:	496f      	ldr	r1, [pc, #444]	; (8002c1c <runSnake+0x208>)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	18ca      	adds	r2, r1, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 20; j++) {
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	603b      	str	r3, [r7, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b13      	cmp	r3, #19
 8002a7e:	ddee      	ble.n	8002a5e <runSnake+0x4a>
			for (int i = 0; i < 20; i++) {
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3301      	adds	r3, #1
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b13      	cmp	r3, #19
 8002a8a:	dde5      	ble.n	8002a58 <runSnake+0x44>
			arr[0][0] = 4;
 8002a8c:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <runSnake+0x208>)
 8002a8e:	2204      	movs	r2, #4
 8002a90:	701a      	strb	r2, [r3, #0]
			lcd_Fill(60, 10, 180, 60, GBLUE);
 8002a92:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	233c      	movs	r3, #60	; 0x3c
 8002a9a:	22b4      	movs	r2, #180	; 0xb4
 8002a9c:	210a      	movs	r1, #10
 8002a9e:	203c      	movs	r0, #60	; 0x3c
 8002aa0:	f7fe fee6 	bl	8001870 <lcd_Fill>
			lcd_ShowStr(90, 20, "Start", YELLOW, BLACK, 24, 1);
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	2318      	movs	r3, #24
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	2300      	movs	r3, #0
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ab4:	4a5a      	ldr	r2, [pc, #360]	; (8002c20 <runSnake+0x20c>)
 8002ab6:	2114      	movs	r1, #20
 8002ab8:	205a      	movs	r0, #90	; 0x5a
 8002aba:	f7ff fb2d 	bl	8002118 <lcd_ShowStr>
			lcd_ShowStr(20,90,"Welcome to snake", GREEN, BLACK, 24,1);
 8002abe:	2301      	movs	r3, #1
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	2318      	movs	r3, #24
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ace:	4a55      	ldr	r2, [pc, #340]	; (8002c24 <runSnake+0x210>)
 8002ad0:	215a      	movs	r1, #90	; 0x5a
 8002ad2:	2014      	movs	r0, #20
 8002ad4:	f7ff fb20 	bl	8002118 <lcd_ShowStr>
			lcd_ShowStr(20,130,"game, press start to", GREEN, BLACK, 24,1);
 8002ad8:	2301      	movs	r3, #1
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	2318      	movs	r3, #24
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ae8:	4a4f      	ldr	r2, [pc, #316]	; (8002c28 <runSnake+0x214>)
 8002aea:	2182      	movs	r1, #130	; 0x82
 8002aec:	2014      	movs	r0, #20
 8002aee:	f7ff fb13 	bl	8002118 <lcd_ShowStr>
			lcd_ShowStr(20,170,"begin the game", GREEN, BLACK, 24,1);
 8002af2:	2301      	movs	r3, #1
 8002af4:	9302      	str	r3, [sp, #8]
 8002af6:	2318      	movs	r3, #24
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	2300      	movs	r3, #0
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b02:	4a4a      	ldr	r2, [pc, #296]	; (8002c2c <runSnake+0x218>)
 8002b04:	21aa      	movs	r1, #170	; 0xaa
 8002b06:	2014      	movs	r0, #20
 8002b08:	f7ff fb06 	bl	8002118 <lcd_ShowStr>
			if(isButtonStart()){
 8002b0c:	f7ff feca 	bl	80028a4 <isButtonStart>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d06f      	beq.n	8002bf6 <runSnake+0x1e2>
				lcd_Clear(BLACK);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fe fe78 	bl	800180c <lcd_Clear>
				system_status = PLAYING;
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <runSnake+0x1f0>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
			break;
 8002b22:	e068      	b.n	8002bf6 <runSnake+0x1e2>
			displayPlayingArea();
 8002b24:	f000 f91a 	bl	8002d5c <displayPlayingArea>
			displayFruit();
 8002b28:	f000 f884 	bl	8002c34 <displayFruit>
			displaySnake();
 8002b2c:	f000 f992 	bl	8002e54 <displaySnake>
			if(isButtonUp()){
 8002b30:	f7ff fedb 	bl	80028ea <isButtonUp>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <runSnake+0x140>
				if (direction != up && direction != down) {
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <runSnake+0x204>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d006      	beq.n	8002b50 <runSnake+0x13c>
 8002b42:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <runSnake+0x204>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d002      	beq.n	8002b50 <runSnake+0x13c>
					direction = up;
 8002b4a:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <runSnake+0x204>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
				displaySnake();
 8002b50:	f000 f980 	bl	8002e54 <displaySnake>
			if(isButtonDown()){
 8002b54:	f7ff feee 	bl	8002934 <isButtonDown>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <runSnake+0x164>
				if (direction != up && direction != down) {
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <runSnake+0x204>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <runSnake+0x160>
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <runSnake+0x204>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d002      	beq.n	8002b74 <runSnake+0x160>
					direction = down;
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <runSnake+0x204>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
				displaySnake();
 8002b74:	f000 f96e 	bl	8002e54 <displaySnake>
			if(isButtonLeft()){
 8002b78:	f7ff ff01 	bl	800297e <isButtonLeft>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <runSnake+0x188>
				if (direction != left && direction != right) {
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <runSnake+0x204>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d006      	beq.n	8002b98 <runSnake+0x184>
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <runSnake+0x204>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d002      	beq.n	8002b98 <runSnake+0x184>
					direction = left;
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <runSnake+0x204>)
 8002b94:	2202      	movs	r2, #2
 8002b96:	701a      	strb	r2, [r3, #0]
				displaySnake();
 8002b98:	f000 f95c 	bl	8002e54 <displaySnake>
			if(isButtonRight()){
 8002b9c:	f7ff ff14 	bl	80029c8 <isButtonRight>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d029      	beq.n	8002bfa <runSnake+0x1e6>
				if (direction != left && direction != right) {
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <runSnake+0x204>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d006      	beq.n	8002bbc <runSnake+0x1a8>
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <runSnake+0x204>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d002      	beq.n	8002bbc <runSnake+0x1a8>
					direction = right;
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <runSnake+0x204>)
 8002bb8:	2203      	movs	r2, #3
 8002bba:	701a      	strb	r2, [r3, #0]
				displaySnake();
 8002bbc:	f000 f94a 	bl	8002e54 <displaySnake>
			break;
 8002bc0:	e01b      	b.n	8002bfa <runSnake+0x1e6>
			lcd_Clear(BLACK);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fe fe22 	bl	800180c <lcd_Clear>
			lcd_ShowStr(80, 20, "GAME OVER", RED, BLACK, 24, 1);
 8002bc8:	2301      	movs	r3, #1
 8002bca:	9302      	str	r3, [sp, #8]
 8002bcc:	2318      	movs	r3, #24
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <runSnake+0x21c>)
 8002bda:	2114      	movs	r1, #20
 8002bdc:	2050      	movs	r0, #80	; 0x50
 8002bde:	f7ff fa9b 	bl	8002118 <lcd_ShowStr>
			delay_us(2000); //!!!!!!!!!!!!!!!!!!!!!check
 8002be2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002be6:	f000 f999 	bl	8002f1c <delay_us>
			system_status = INIT;
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <runSnake+0x1f0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
			break;
 8002bf0:	e004      	b.n	8002bfc <runSnake+0x1e8>
			break;
 8002bf2:	bf00      	nop
 8002bf4:	e002      	b.n	8002bfc <runSnake+0x1e8>
			break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <runSnake+0x1e8>
			break;
 8002bfa:	bf00      	nop
	}
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200000d8 	.word	0x200000d8
 8002c08:	200000de 	.word	0x200000de
 8002c0c:	200000df 	.word	0x200000df
 8002c10:	200000e0 	.word	0x200000e0
 8002c14:	200000e1 	.word	0x200000e1
 8002c18:	20000006 	.word	0x20000006
 8002c1c:	200000e4 	.word	0x200000e4
 8002c20:	08009764 	.word	0x08009764
 8002c24:	0800976c 	.word	0x0800976c
 8002c28:	08009780 	.word	0x08009780
 8002c2c:	08009798 	.word	0x08009798
 8002c30:	080097a8 	.word	0x080097a8

08002c34 <displayFruit>:
void displayFruit(){
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af02      	add	r7, sp, #8
//	 lcd_ShowStr(fruit_x, fruit_y, "X", BLACK, RED, 24, 1);
	lcd_DrawRectangle(L_MARGIN+fruit_x*10 + 2, T_MARGIN+fruit_y*10 + 2, L_MARGIN+fruit_x*10 + 8, T_MARGIN+fruit_y*10 + 8, RED);
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <displayFruit+0x68>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	0092      	lsls	r2, r2, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3316      	adds	r3, #22
 8002c4c:	b298      	uxth	r0, r3
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <displayFruit+0x6c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3316      	adds	r3, #22
 8002c60:	b299      	uxth	r1, r3
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <displayFruit+0x68>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	331c      	adds	r3, #28
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <displayFruit+0x6c>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461c      	mov	r4, r3
 8002c7e:	00a4      	lsls	r4, r4, #2
 8002c80:	4423      	add	r3, r4
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	331c      	adds	r3, #28
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002c8e:	9400      	str	r4, [sp, #0]
 8002c90:	f7fe febf 	bl	8001a12 <lcd_DrawRectangle>
}
 8002c94:	bf00      	nop
 8002c96:	3704      	adds	r7, #4
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd90      	pop	{r4, r7, pc}
 8002c9c:	200000dc 	.word	0x200000dc
 8002ca0:	200000dd 	.word	0x200000dd

08002ca4 <eatCheck>:

bool eatCheck(){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	if (head_x == fruit_x && head_y == fruit_y) { // Eat
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <eatCheck+0x6c>)
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <eatCheck+0x70>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d129      	bne.n	8002d08 <eatCheck+0x64>
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <eatCheck+0x74>)
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <eatCheck+0x78>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d123      	bne.n	8002d08 <eatCheck+0x64>
		fruit_x = rand()%20;
 8002cc0:	f005 fc26 	bl	8008510 <rand>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <eatCheck+0x7c>)
 8002cc8:	fb83 1302 	smull	r1, r3, r3, r2
 8002ccc:	10d9      	asrs	r1, r3, #3
 8002cce:	17d3      	asrs	r3, r2, #31
 8002cd0:	1ac9      	subs	r1, r1, r3
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	1ad1      	subs	r1, r2, r3
 8002cdc:	b2ca      	uxtb	r2, r1
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <eatCheck+0x70>)
 8002ce0:	701a      	strb	r2, [r3, #0]
		fruit_y = rand()%20;
 8002ce2:	f005 fc15 	bl	8008510 <rand>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <eatCheck+0x7c>)
 8002cea:	fb83 1302 	smull	r1, r3, r3, r2
 8002cee:	10d9      	asrs	r1, r3, #3
 8002cf0:	17d3      	asrs	r3, r2, #31
 8002cf2:	1ac9      	subs	r1, r1, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	1ad1      	subs	r1, r2, r3
 8002cfe:	b2ca      	uxtb	r2, r1
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <eatCheck+0x78>)
 8002d02:	701a      	strb	r2, [r3, #0]
		//system_status=PLAYING;//?
		return 1;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <eatCheck+0x66>
	} else {
		return 0;
 8002d08:	2300      	movs	r3, #0
	}
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200000de 	.word	0x200000de
 8002d14:	200000dc 	.word	0x200000dc
 8002d18:	200000df 	.word	0x200000df
 8002d1c:	200000dd 	.word	0x200000dd
 8002d20:	66666667 	.word	0x66666667

08002d24 <headCheck>:

bool headCheck() {
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
	if (head_x<0 || head_x>19 || head_y<0 || head_y>19) { // check
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <headCheck+0x2c>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b13      	cmp	r3, #19
 8002d2e:	d803      	bhi.n	8002d38 <headCheck+0x14>
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <headCheck+0x30>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b13      	cmp	r3, #19
 8002d36:	d904      	bls.n	8002d42 <headCheck+0x1e>
//		gameOver=1;
		system_status=GAMEOVER;
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <headCheck+0x34>)
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	601a      	str	r2, [r3, #0]
		return 1;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <headCheck+0x20>
	}
	return 0;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	200000de 	.word	0x200000de
 8002d54:	200000df 	.word	0x200000df
 8002d58:	200000d8 	.word	0x200000d8

08002d5c <displayPlayingArea>:



void displayPlayingArea(){
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af04      	add	r7, sp, #16
	// game area 200*200p

	// 20_200_20
	lcd_Fill(L_MARGIN, T_MARGIN, L_MARGIN+200, R_MARGIN+200, GREEN);
 8002d62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	23dc      	movs	r3, #220	; 0xdc
 8002d6a:	22dc      	movs	r2, #220	; 0xdc
 8002d6c:	2114      	movs	r1, #20
 8002d6e:	2014      	movs	r0, #20
 8002d70:	f7fe fd7e 	bl	8001870 <lcd_Fill>

	//Display button
	// button up
	lcd_Fill(15, 260, 60, 340, GBLUE);
 8002d74:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002d7e:	223c      	movs	r2, #60	; 0x3c
 8002d80:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002d84:	200f      	movs	r0, #15
 8002d86:	f7fe fd73 	bl	8001870 <lcd_Fill>
	lcd_ShowStr(20, 280, "U", YELLOW, BLACK, 24, 1);
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	9302      	str	r3, [sp, #8]
 8002d8e:	2318      	movs	r3, #24
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	2300      	movs	r3, #0
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d9a:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <displayPlayingArea+0xe8>)
 8002d9c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002da0:	2014      	movs	r0, #20
 8002da2:	f7ff f9b9 	bl	8002118 <lcd_ShowStr>
	// button down
	lcd_Fill(70, 260, 115, 340, GBLUE);
 8002da6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002db0:	2273      	movs	r2, #115	; 0x73
 8002db2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002db6:	2046      	movs	r0, #70	; 0x46
 8002db8:	f7fe fd5a 	bl	8001870 <lcd_Fill>
	lcd_ShowStr(75, 280, "D", YELLOW, BLACK, 24, 1);
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	2318      	movs	r3, #24
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <displayPlayingArea+0xec>)
 8002dce:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002dd2:	204b      	movs	r0, #75	; 0x4b
 8002dd4:	f7ff f9a0 	bl	8002118 <lcd_ShowStr>
	// button left
	lcd_Fill(125, 260, 170, 340, GBLUE);
 8002dd8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002de2:	22aa      	movs	r2, #170	; 0xaa
 8002de4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002de8:	207d      	movs	r0, #125	; 0x7d
 8002dea:	f7fe fd41 	bl	8001870 <lcd_Fill>
	lcd_ShowStr(130, 280, "L", YELLOW, BLACK, 24, 1);
 8002dee:	2301      	movs	r3, #1
 8002df0:	9302      	str	r3, [sp, #8]
 8002df2:	2318      	movs	r3, #24
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <displayPlayingArea+0xf0>)
 8002e00:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002e04:	2082      	movs	r0, #130	; 0x82
 8002e06:	f7ff f987 	bl	8002118 <lcd_ShowStr>
	// button right
	lcd_Fill(180, 260, 225, 340, GBLUE);
 8002e0a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8002e14:	22e1      	movs	r2, #225	; 0xe1
 8002e16:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002e1a:	20b4      	movs	r0, #180	; 0xb4
 8002e1c:	f7fe fd28 	bl	8001870 <lcd_Fill>
	lcd_ShowStr(185, 280, "R", YELLOW, BLACK, 24, 1);
 8002e20:	2301      	movs	r3, #1
 8002e22:	9302      	str	r3, [sp, #8]
 8002e24:	2318      	movs	r3, #24
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e30:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <displayPlayingArea+0xf4>)
 8002e32:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002e36:	20b9      	movs	r0, #185	; 0xb9
 8002e38:	f7ff f96e 	bl	8002118 <lcd_ShowStr>
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	080097b4 	.word	0x080097b4
 8002e48:	080097b8 	.word	0x080097b8
 8002e4c:	080097bc 	.word	0x080097bc
 8002e50:	080097c0 	.word	0x080097c0

08002e54 <displaySnake>:
void displaySnake(){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	lcd_ShowSnake(arr);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <displaySnake+0x10>)
 8002e5a:	f7ff f9c1 	bl	80021e0 <lcd_ShowSnake>
	//lcd_DrawCircle(snakeStartY, snakeStartY, BLACK, 10, 1);

}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200000e4 	.word	0x200000e4

08002e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6c:	b672      	cpsid	i
}
 8002e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e70:	e7fe      	b.n	8002e70 <Error_Handler+0x8>
	...

08002e74 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002e78:	4803      	ldr	r0, [pc, #12]	; (8002e88 <timer_init+0x14>)
 8002e7a:	f004 fb1b 	bl	80074b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002e7e:	4803      	ldr	r0, [pc, #12]	; (8002e8c <timer_init+0x18>)
 8002e80:	f004 fab0 	bl	80073e4 <HAL_TIM_Base_Start>
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	200004f8 	.word	0x200004f8
 8002e8c:	200004b0 	.word	0x200004b0

08002e90 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <setTimer2+0x2c>)
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <setTimer2+0x2c>)
 8002ea2:	881a      	ldrh	r2, [r3, #0]
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <setTimer2+0x30>)
 8002ea6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <setTimer2+0x34>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	801a      	strh	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	2000027a 	.word	0x2000027a
 8002ec0:	20000278 	.word	0x20000278
 8002ec4:	20000276 	.word	0x20000276

08002ec8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed8:	d116      	bne.n	8002f08 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d010      	beq.n	8002f04 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002eec:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002efe:	881a      	ldrh	r2, [r3, #0]
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f02:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002f04:	f7ff f9e6 	bl	80022d4 <led7_Scan>
	}
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000278 	.word	0x20000278
 8002f14:	20000276 	.word	0x20000276
 8002f18:	2000027a 	.word	0x2000027a

08002f1c <delay_us>:

void delay_us (uint16_t us)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <delay_us+0x30>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002f2e:	bf00      	nop
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <delay_us+0x30>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d3f9      	bcc.n	8002f30 <delay_us+0x14>
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	200004b0 	.word	0x200004b0

08002f50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <MX_SPI1_Init+0x68>)
 8002f58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002f9c:	220a      	movs	r2, #10
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fa0:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <MX_SPI1_Init+0x64>)
 8002fa2:	f003 fefb 	bl	8006d9c <HAL_SPI_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002fac:	f7ff ff5c 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000410 	.word	0x20000410
 8002fb8:	40013000 	.word	0x40013000

08002fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <HAL_SPI_MspInit+0x84>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d12b      	bne.n	8003036 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_SPI_MspInit+0x88>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	4a17      	ldr	r2, [pc, #92]	; (8003044 <HAL_SPI_MspInit+0x88>)
 8002fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fec:	6453      	str	r3, [r2, #68]	; 0x44
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_SPI_MspInit+0x88>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <HAL_SPI_MspInit+0x88>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a10      	ldr	r2, [pc, #64]	; (8003044 <HAL_SPI_MspInit+0x88>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_SPI_MspInit+0x88>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003016:	2338      	movs	r3, #56	; 0x38
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003026:	2305      	movs	r3, #5
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <HAL_SPI_MspInit+0x8c>)
 8003032:	f002 f8c5 	bl	80051c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003036:	bf00      	nop
 8003038:	3728      	adds	r7, #40	; 0x28
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40013000 	.word	0x40013000
 8003044:	40023800 	.word	0x40023800
 8003048:	40020400 	.word	0x40020400

0800304c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_MspInit+0x4c>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <HAL_MspInit+0x4c>)
 800305c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003060:	6453      	str	r3, [r2, #68]	; 0x44
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_MspInit+0x4c>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_MspInit+0x4c>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a08      	ldr	r2, [pc, #32]	; (8003098 <HAL_MspInit+0x4c>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_MspInit+0x4c>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800

0800309c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a0:	e7fe      	b.n	80030a0 <NMI_Handler+0x4>

080030a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <HardFault_Handler+0x4>

080030a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <MemManage_Handler+0x4>

080030ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <BusFault_Handler+0x4>

080030b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <UsageFault_Handler+0x4>

080030ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e8:	f001 f9c8 	bl	800447c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <TIM2_IRQHandler+0x10>)
 80030f6:	f004 faa6 	bl	8007646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200004f8 	.word	0x200004f8

08003104 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <DMA2_Stream0_IRQHandler+0x10>)
 800310a:	f001 fe1d 	bl	8004d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200002d0 	.word	0x200002d0

08003118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
	return 1;
 800311c:	2301      	movs	r3, #1
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <_kill>:

int _kill(int pid, int sig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003132:	f005 f98d 	bl	8008450 <__errno>
 8003136:	4603      	mov	r3, r0
 8003138:	2216      	movs	r2, #22
 800313a:	601a      	str	r2, [r3, #0]
	return -1;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <_exit>:

void _exit (int status)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ffe7 	bl	8003128 <_kill>
	while (1) {}		/* Make sure we hang here */
 800315a:	e7fe      	b.n	800315a <_exit+0x12>

0800315c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	e00a      	b.n	8003184 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800316e:	f3af 8000 	nop.w
 8003172:	4601      	mov	r1, r0
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	60ba      	str	r2, [r7, #8]
 800317a:	b2ca      	uxtb	r2, r1
 800317c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	3301      	adds	r3, #1
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	dbf0      	blt.n	800316e <_read+0x12>
	}

return len;
 800318c:	687b      	ldr	r3, [r7, #4]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e009      	b.n	80031bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	60ba      	str	r2, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dbf1      	blt.n	80031a8 <_write+0x12>
	}
	return len;
 80031c4:	687b      	ldr	r3, [r7, #4]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <_close>:

int _close(int file)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
	return -1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031f6:	605a      	str	r2, [r3, #4]
	return 0;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <_isatty>:

int _isatty(int file)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
	return 1;
 800320e:	2301      	movs	r3, #1
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
	return 0;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <_sbrk+0x5c>)
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <_sbrk+0x60>)
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <_sbrk+0x64>)
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <_sbrk+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d207      	bcs.n	8003278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003268:	f005 f8f2 	bl	8008450 <__errno>
 800326c:	4603      	mov	r3, r0
 800326e:	220c      	movs	r2, #12
 8003270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	e009      	b.n	800328c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <_sbrk+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	4a05      	ldr	r2, [pc, #20]	; (800329c <_sbrk+0x64>)
 8003288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20020000 	.word	0x20020000
 8003298:	00000400 	.word	0x00000400
 800329c:	2000027c 	.word	0x2000027c
 80032a0:	20000558 	.word	0x20000558

080032a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <SystemInit+0x20>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <SystemInit+0x20>)
 80032b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032dc:	463b      	mov	r3, r7
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <MX_TIM1_Init+0x98>)
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <MX_TIM1_Init+0x9c>)
 80032e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80032ea:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <MX_TIM1_Init+0x98>)
 80032ec:	2253      	movs	r2, #83	; 0x53
 80032ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <MX_TIM1_Init+0x98>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <MX_TIM1_Init+0x98>)
 80032f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <MX_TIM1_Init+0x98>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003304:	4b16      	ldr	r3, [pc, #88]	; (8003360 <MX_TIM1_Init+0x98>)
 8003306:	2200      	movs	r2, #0
 8003308:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <MX_TIM1_Init+0x98>)
 800330c:	2200      	movs	r2, #0
 800330e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003310:	4813      	ldr	r0, [pc, #76]	; (8003360 <MX_TIM1_Init+0x98>)
 8003312:	f004 f817 	bl	8007344 <HAL_TIM_Base_Init>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800331c:	f7ff fda4 	bl	8002e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003326:	f107 0308 	add.w	r3, r7, #8
 800332a:	4619      	mov	r1, r3
 800332c:	480c      	ldr	r0, [pc, #48]	; (8003360 <MX_TIM1_Init+0x98>)
 800332e:	f004 fb55 	bl	80079dc <HAL_TIM_ConfigClockSource>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003338:	f7ff fd96 	bl	8002e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800333c:	2300      	movs	r3, #0
 800333e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003340:	2300      	movs	r3, #0
 8003342:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003344:	463b      	mov	r3, r7
 8003346:	4619      	mov	r1, r3
 8003348:	4805      	ldr	r0, [pc, #20]	; (8003360 <MX_TIM1_Init+0x98>)
 800334a:	f004 ff21 	bl	8008190 <HAL_TIMEx_MasterConfigSynchronization>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003354:	f7ff fd88 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003358:	bf00      	nop
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200004b0 	.word	0x200004b0
 8003364:	40010000 	.word	0x40010000

08003368 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800336e:	f107 0308 	add.w	r3, r7, #8
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800337c:	463b      	mov	r3, r7
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <MX_TIM2_Init+0x94>)
 8003386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800338a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <MX_TIM2_Init+0x94>)
 800338e:	f240 3247 	movw	r2, #839	; 0x347
 8003392:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <MX_TIM2_Init+0x94>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <MX_TIM2_Init+0x94>)
 800339c:	2263      	movs	r2, #99	; 0x63
 800339e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a0:	4b16      	ldr	r3, [pc, #88]	; (80033fc <MX_TIM2_Init+0x94>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <MX_TIM2_Init+0x94>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033ac:	4813      	ldr	r0, [pc, #76]	; (80033fc <MX_TIM2_Init+0x94>)
 80033ae:	f003 ffc9 	bl	8007344 <HAL_TIM_Base_Init>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80033b8:	f7ff fd56 	bl	8002e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033c2:	f107 0308 	add.w	r3, r7, #8
 80033c6:	4619      	mov	r1, r3
 80033c8:	480c      	ldr	r0, [pc, #48]	; (80033fc <MX_TIM2_Init+0x94>)
 80033ca:	f004 fb07 	bl	80079dc <HAL_TIM_ConfigClockSource>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80033d4:	f7ff fd48 	bl	8002e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033dc:	2300      	movs	r3, #0
 80033de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033e0:	463b      	mov	r3, r7
 80033e2:	4619      	mov	r1, r3
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_TIM2_Init+0x94>)
 80033e6:	f004 fed3 	bl	8008190 <HAL_TIMEx_MasterConfigSynchronization>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80033f0:	f7ff fd3a 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033f4:	bf00      	nop
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200004f8 	.word	0x200004f8

08003400 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]
 8003414:	615a      	str	r2, [r3, #20]
 8003416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003418:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <MX_TIM13_Init+0x94>)
 800341a:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <MX_TIM13_Init+0x98>)
 800341c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800341e:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <MX_TIM13_Init+0x94>)
 8003420:	f240 3247 	movw	r2, #839	; 0x347
 8003424:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003426:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <MX_TIM13_Init+0x94>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <MX_TIM13_Init+0x94>)
 800342e:	2263      	movs	r2, #99	; 0x63
 8003430:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <MX_TIM13_Init+0x94>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <MX_TIM13_Init+0x94>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800343e:	4815      	ldr	r0, [pc, #84]	; (8003494 <MX_TIM13_Init+0x94>)
 8003440:	f003 ff80 	bl	8007344 <HAL_TIM_Base_Init>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800344a:	f7ff fd0d 	bl	8002e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800344e:	4811      	ldr	r0, [pc, #68]	; (8003494 <MX_TIM13_Init+0x94>)
 8003450:	f004 f8a0 	bl	8007594 <HAL_TIM_PWM_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800345a:	f7ff fd05 	bl	8002e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800345e:	2360      	movs	r3, #96	; 0x60
 8003460:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	2200      	movs	r2, #0
 8003472:	4619      	mov	r1, r3
 8003474:	4807      	ldr	r0, [pc, #28]	; (8003494 <MX_TIM13_Init+0x94>)
 8003476:	f004 f9ef 	bl	8007858 <HAL_TIM_PWM_ConfigChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003480:	f7ff fcf2 	bl	8002e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003484:	4803      	ldr	r0, [pc, #12]	; (8003494 <MX_TIM13_Init+0x94>)
 8003486:	f000 f85b 	bl	8003540 <HAL_TIM_MspPostInit>

}
 800348a:	bf00      	nop
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000468 	.word	0x20000468
 8003498:	40001c00 	.word	0x40001c00

0800349c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a22      	ldr	r2, [pc, #136]	; (8003534 <HAL_TIM_Base_MspInit+0x98>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <HAL_TIM_Base_MspInit+0x9c>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	4a20      	ldr	r2, [pc, #128]	; (8003538 <HAL_TIM_Base_MspInit+0x9c>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_TIM_Base_MspInit+0x9c>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80034ca:	e02e      	b.n	800352a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d116      	bne.n	8003504 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	4b17      	ldr	r3, [pc, #92]	; (8003538 <HAL_TIM_Base_MspInit+0x9c>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	4a16      	ldr	r2, [pc, #88]	; (8003538 <HAL_TIM_Base_MspInit+0x9c>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6413      	str	r3, [r2, #64]	; 0x40
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <HAL_TIM_Base_MspInit+0x9c>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2100      	movs	r1, #0
 80034f6:	201c      	movs	r0, #28
 80034f8:	f001 fb41 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034fc:	201c      	movs	r0, #28
 80034fe:	f001 fb5a 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
}
 8003502:	e012      	b.n	800352a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a0c      	ldr	r2, [pc, #48]	; (800353c <HAL_TIM_Base_MspInit+0xa0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10d      	bne.n	800352a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_TIM_Base_MspInit+0x9c>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4a08      	ldr	r2, [pc, #32]	; (8003538 <HAL_TIM_Base_MspInit+0x9c>)
 8003518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351c:	6413      	str	r3, [r2, #64]	; 0x40
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_TIM_Base_MspInit+0x9c>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000
 8003538:	40023800 	.word	0x40023800
 800353c:	40001c00 	.word	0x40001c00

08003540 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <HAL_TIM_MspPostInit+0x68>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d11e      	bne.n	80035a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_TIM_MspPostInit+0x6c>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a10      	ldr	r2, [pc, #64]	; (80035ac <HAL_TIM_MspPostInit+0x6c>)
 800356c:	f043 0320 	orr.w	r3, r3, #32
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_TIM_MspPostInit+0x6c>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800357e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003582:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2300      	movs	r3, #0
 800358e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003590:	2309      	movs	r3, #9
 8003592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	4619      	mov	r1, r3
 800359a:	4805      	ldr	r0, [pc, #20]	; (80035b0 <HAL_TIM_MspPostInit+0x70>)
 800359c:	f001 fe10 	bl	80051c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40001c00 	.word	0x40001c00
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40021400 	.word	0x40021400

080035b4 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	e025      	b.n	8003614 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 80035c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da06      	bge.n	80035de <TP_Write_Byte+0x2a>
 80035d0:	2201      	movs	r2, #1
 80035d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035d6:	4813      	ldr	r0, [pc, #76]	; (8003624 <TP_Write_Byte+0x70>)
 80035d8:	f001 ffa6 	bl	8005528 <HAL_GPIO_WritePin>
 80035dc:	e005      	b.n	80035ea <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035e4:	480f      	ldr	r0, [pc, #60]	; (8003624 <TP_Write_Byte+0x70>)
 80035e6:	f001 ff9f 	bl	8005528 <HAL_GPIO_WritePin>
		num<<=1;
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035f6:	480c      	ldr	r0, [pc, #48]	; (8003628 <TP_Write_Byte+0x74>)
 80035f8:	f001 ff96 	bl	8005528 <HAL_GPIO_WritePin>
		delay_us(1);
 80035fc:	2001      	movs	r0, #1
 80035fe:	f7ff fc8d 	bl	8002f1c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003602:	2201      	movs	r2, #1
 8003604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003608:	4807      	ldr	r0, [pc, #28]	; (8003628 <TP_Write_Byte+0x74>)
 800360a:	f001 ff8d 	bl	8005528 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	3301      	adds	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b07      	cmp	r3, #7
 8003618:	d9d6      	bls.n	80035c8 <TP_Write_Byte+0x14>
	}
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40020800 	.word	0x40020800
 8003628:	40021800 	.word	0x40021800

0800362c <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 800363a:	2300      	movs	r3, #0
 800363c:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003644:	482f      	ldr	r0, [pc, #188]	; (8003704 <TP_Read_AD+0xd8>)
 8003646:	f001 ff6f 	bl	8005528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003650:	482d      	ldr	r0, [pc, #180]	; (8003708 <TP_Read_AD+0xdc>)
 8003652:	f001 ff69 	bl	8005528 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	482a      	ldr	r0, [pc, #168]	; (8003704 <TP_Read_AD+0xd8>)
 800365c:	f001 ff64 	bl	8005528 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ffa6 	bl	80035b4 <TP_Write_Byte>
	delay_us(6);
 8003668:	2006      	movs	r0, #6
 800366a:	f7ff fc57 	bl	8002f1c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003674:	4823      	ldr	r0, [pc, #140]	; (8003704 <TP_Read_AD+0xd8>)
 8003676:	f001 ff57 	bl	8005528 <HAL_GPIO_WritePin>
	delay_us(1);
 800367a:	2001      	movs	r0, #1
 800367c:	f7ff fc4e 	bl	8002f1c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003680:	2201      	movs	r2, #1
 8003682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003686:	481f      	ldr	r0, [pc, #124]	; (8003704 <TP_Read_AD+0xd8>)
 8003688:	f001 ff4e 	bl	8005528 <HAL_GPIO_WritePin>
	delay_us(1);
 800368c:	2001      	movs	r0, #1
 800368e:	f7ff fc45 	bl	8002f1c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003698:	481a      	ldr	r0, [pc, #104]	; (8003704 <TP_Read_AD+0xd8>)
 800369a:	f001 ff45 	bl	8005528 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	e01f      	b.n	80036e4 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 80036a4:	89bb      	ldrh	r3, [r7, #12]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036b0:	4814      	ldr	r0, [pc, #80]	; (8003704 <TP_Read_AD+0xd8>)
 80036b2:	f001 ff39 	bl	8005528 <HAL_GPIO_WritePin>
		delay_us(1);
 80036b6:	2001      	movs	r0, #1
 80036b8:	f7ff fc30 	bl	8002f1c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80036bc:	2201      	movs	r2, #1
 80036be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c2:	4810      	ldr	r0, [pc, #64]	; (8003704 <TP_Read_AD+0xd8>)
 80036c4:	f001 ff30 	bl	8005528 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 80036c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036cc:	480e      	ldr	r0, [pc, #56]	; (8003708 <TP_Read_AD+0xdc>)
 80036ce:	f001 ff13 	bl	80054f8 <HAL_GPIO_ReadPin>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <TP_Read_AD+0xb2>
 80036d8:	89bb      	ldrh	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	3301      	adds	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b0f      	cmp	r3, #15
 80036e8:	d9dc      	bls.n	80036a4 <TP_Read_AD+0x78>
	}
	Num>>=4;
 80036ea:	89bb      	ldrh	r3, [r7, #12]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 80036f0:	2201      	movs	r2, #1
 80036f2:	2180      	movs	r1, #128	; 0x80
 80036f4:	4803      	ldr	r0, [pc, #12]	; (8003704 <TP_Read_AD+0xd8>)
 80036f6:	f001 ff17 	bl	8005528 <HAL_GPIO_WritePin>
	return(Num);
 80036fa:	89bb      	ldrh	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021800 	.word	0x40021800
 8003708:	40020800 	.word	0x40020800

0800370c <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8003716:	2300      	movs	r3, #0
 8003718:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 800371a:	2300      	movs	r3, #0
 800371c:	83fb      	strh	r3, [r7, #30]
 800371e:	e00f      	b.n	8003740 <TP_Read_XOY+0x34>
 8003720:	8bfc      	ldrh	r4, [r7, #30]
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff81 	bl	800362c <TP_Read_AD>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	0063      	lsls	r3, r4, #1
 8003730:	f107 0120 	add.w	r1, r7, #32
 8003734:	440b      	add	r3, r1
 8003736:	f823 2c14 	strh.w	r2, [r3, #-20]
 800373a:	8bfb      	ldrh	r3, [r7, #30]
 800373c:	3301      	adds	r3, #1
 800373e:	83fb      	strh	r3, [r7, #30]
 8003740:	8bfb      	ldrh	r3, [r7, #30]
 8003742:	2b04      	cmp	r3, #4
 8003744:	d9ec      	bls.n	8003720 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	83fb      	strh	r3, [r7, #30]
 800374a:	e03b      	b.n	80037c4 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 800374c:	8bfb      	ldrh	r3, [r7, #30]
 800374e:	3301      	adds	r3, #1
 8003750:	83bb      	strh	r3, [r7, #28]
 8003752:	e031      	b.n	80037b8 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8003754:	8bfb      	ldrh	r3, [r7, #30]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	f107 0220 	add.w	r2, r7, #32
 800375c:	4413      	add	r3, r2
 800375e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003762:	8bbb      	ldrh	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	f107 0120 	add.w	r1, r7, #32
 800376a:	440b      	add	r3, r1
 800376c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003770:	429a      	cmp	r2, r3
 8003772:	d91e      	bls.n	80037b2 <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8003774:	8bfb      	ldrh	r3, [r7, #30]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	f107 0220 	add.w	r2, r7, #32
 800377c:	4413      	add	r3, r2
 800377e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003782:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8003784:	8bbb      	ldrh	r3, [r7, #28]
 8003786:	8bfa      	ldrh	r2, [r7, #30]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	f107 0120 	add.w	r1, r7, #32
 800378e:	440b      	add	r3, r1
 8003790:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8003794:	0053      	lsls	r3, r2, #1
 8003796:	f107 0220 	add.w	r2, r7, #32
 800379a:	4413      	add	r3, r2
 800379c:	460a      	mov	r2, r1
 800379e:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 80037a2:	8bbb      	ldrh	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	f107 0220 	add.w	r2, r7, #32
 80037aa:	4413      	add	r3, r2
 80037ac:	8b3a      	ldrh	r2, [r7, #24]
 80037ae:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 80037b2:	8bbb      	ldrh	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	83bb      	strh	r3, [r7, #28]
 80037b8:	8bbb      	ldrh	r3, [r7, #28]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d9ca      	bls.n	8003754 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 80037be:	8bfb      	ldrh	r3, [r7, #30]
 80037c0:	3301      	adds	r3, #1
 80037c2:	83fb      	strh	r3, [r7, #30]
 80037c4:	8bfb      	ldrh	r3, [r7, #30]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d9c0      	bls.n	800374c <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 80037ce:	2301      	movs	r3, #1
 80037d0:	83fb      	strh	r3, [r7, #30]
 80037d2:	e00c      	b.n	80037ee <TP_Read_XOY+0xe2>
 80037d4:	8bfb      	ldrh	r3, [r7, #30]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	f107 0220 	add.w	r2, r7, #32
 80037dc:	4413      	add	r3, r2
 80037de:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80037e2:	8b7b      	ldrh	r3, [r7, #26]
 80037e4:	4413      	add	r3, r2
 80037e6:	837b      	strh	r3, [r7, #26]
 80037e8:	8bfb      	ldrh	r3, [r7, #30]
 80037ea:	3301      	adds	r3, #1
 80037ec:	83fb      	strh	r3, [r7, #30]
 80037ee:	8bfb      	ldrh	r3, [r7, #30]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d9ef      	bls.n	80037d4 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 80037f4:	8b7b      	ldrh	r3, [r7, #26]
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <TP_Read_XOY+0x100>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	833b      	strh	r3, [r7, #24]
	return temp;
 8003800:	8b3b      	ldrh	r3, [r7, #24]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	; 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}
 800380a:	bf00      	nop
 800380c:	aaaaaaab 	.word	0xaaaaaaab

08003810 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <TP_Read_XY+0x3c>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff ff74 	bl	800370c <TP_Read_XOY>
 8003824:	4603      	mov	r3, r0
 8003826:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <TP_Read_XY+0x40>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff6d 	bl	800370c <TP_Read_XOY>
 8003832:	4603      	mov	r3, r0
 8003834:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	89fa      	ldrh	r2, [r7, #14]
 800383a:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	89ba      	ldrh	r2, [r7, #12]
 8003840:	801a      	strh	r2, [r3, #0]
	return 1;
 8003842:	2301      	movs	r3, #1
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000040 	.word	0x20000040
 8003850:	20000041 	.word	0x20000041

08003854 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 800385e:	f107 0212 	add.w	r2, r7, #18
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ffd1 	bl	8003810 <TP_Read_XY>
 800386e:	4603      	mov	r3, r0
 8003870:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <TP_Read_XY2+0x28>
 8003878:	2300      	movs	r3, #0
 800387a:	e049      	b.n	8003910 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 800387c:	f107 020e 	add.w	r2, r7, #14
 8003880:	f107 0310 	add.w	r3, r7, #16
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ffc2 	bl	8003810 <TP_Read_XY>
 800388c:	4603      	mov	r3, r0
 800388e:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <TP_Read_XY2+0x46>
 8003896:	2300      	movs	r3, #0
 8003898:	e03a      	b.n	8003910 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 800389a:	8a3a      	ldrh	r2, [r7, #16]
 800389c:	8abb      	ldrh	r3, [r7, #20]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d804      	bhi.n	80038ac <TP_Read_XY2+0x58>
 80038a2:	8a3b      	ldrh	r3, [r7, #16]
 80038a4:	3363      	adds	r3, #99	; 0x63
 80038a6:	8aba      	ldrh	r2, [r7, #20]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	da08      	bge.n	80038be <TP_Read_XY2+0x6a>
 80038ac:	8aba      	ldrh	r2, [r7, #20]
 80038ae:	8a3b      	ldrh	r3, [r7, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d82c      	bhi.n	800390e <TP_Read_XY2+0xba>
 80038b4:	8abb      	ldrh	r3, [r7, #20]
 80038b6:	3363      	adds	r3, #99	; 0x63
 80038b8:	8a3a      	ldrh	r2, [r7, #16]
 80038ba:	4293      	cmp	r3, r2
 80038bc:	db27      	blt.n	800390e <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 80038be:	89fa      	ldrh	r2, [r7, #14]
 80038c0:	8a7b      	ldrh	r3, [r7, #18]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d804      	bhi.n	80038d0 <TP_Read_XY2+0x7c>
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	3363      	adds	r3, #99	; 0x63
 80038ca:	8a7a      	ldrh	r2, [r7, #18]
 80038cc:	4293      	cmp	r3, r2
 80038ce:	da08      	bge.n	80038e2 <TP_Read_XY2+0x8e>
 80038d0:	8a7a      	ldrh	r2, [r7, #18]
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d81a      	bhi.n	800390e <TP_Read_XY2+0xba>
 80038d8:	8a7b      	ldrh	r3, [r7, #18]
 80038da:	3363      	adds	r3, #99	; 0x63
 80038dc:	89fa      	ldrh	r2, [r7, #14]
 80038de:	4293      	cmp	r3, r2
 80038e0:	db15      	blt.n	800390e <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 80038e2:	8abb      	ldrh	r3, [r7, #20]
 80038e4:	461a      	mov	r2, r3
 80038e6:	8a3b      	ldrh	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	0fda      	lsrs	r2, r3, #31
 80038ec:	4413      	add	r3, r2
 80038ee:	105b      	asrs	r3, r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 80038f6:	8a7b      	ldrh	r3, [r7, #18]
 80038f8:	461a      	mov	r2, r3
 80038fa:	89fb      	ldrh	r3, [r7, #14]
 80038fc:	4413      	add	r3, r2
 80038fe:	0fda      	lsrs	r2, r3, #31
 8003900:	4413      	add	r3, r2
 8003902:	105b      	asrs	r3, r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	801a      	strh	r2, [r3, #0]
		return 1;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <TP_Read_XY2+0xbc>
	}else return 0;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b085      	sub	sp, #20
 800391c:	af02      	add	r7, sp, #8
 800391e:	4603      	mov	r3, r0
 8003920:	80fb      	strh	r3, [r7, #6]
 8003922:	460b      	mov	r3, r1
 8003924:	80bb      	strh	r3, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	3b0c      	subs	r3, #12
 800392e:	b298      	uxth	r0, r3
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	330d      	adds	r3, #13
 8003934:	b29a      	uxth	r2, r3
 8003936:	88bc      	ldrh	r4, [r7, #4]
 8003938:	88b9      	ldrh	r1, [r7, #4]
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	4623      	mov	r3, r4
 8003940:	f7fd ffe3 	bl	800190a <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8003944:	88bb      	ldrh	r3, [r7, #4]
 8003946:	3b0c      	subs	r3, #12
 8003948:	b299      	uxth	r1, r3
 800394a:	88bb      	ldrh	r3, [r7, #4]
 800394c:	330d      	adds	r3, #13
 800394e:	b29c      	uxth	r4, r3
 8003950:	88fa      	ldrh	r2, [r7, #6]
 8003952:	88f8      	ldrh	r0, [r7, #6]
 8003954:	887b      	ldrh	r3, [r7, #2]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	4623      	mov	r3, r4
 800395a:	f7fd ffd6 	bl	800190a <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	3301      	adds	r3, #1
 8003962:	b298      	uxth	r0, r3
 8003964:	88bb      	ldrh	r3, [r7, #4]
 8003966:	3301      	adds	r3, #1
 8003968:	b29b      	uxth	r3, r3
 800396a:	887a      	ldrh	r2, [r7, #2]
 800396c:	4619      	mov	r1, r3
 800396e:	f7fd ffb5 	bl	80018dc <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	3b01      	subs	r3, #1
 8003976:	b298      	uxth	r0, r3
 8003978:	88bb      	ldrh	r3, [r7, #4]
 800397a:	3301      	adds	r3, #1
 800397c:	b29b      	uxth	r3, r3
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	4619      	mov	r1, r3
 8003982:	f7fd ffab 	bl	80018dc <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	3301      	adds	r3, #1
 800398a:	b298      	uxth	r0, r3
 800398c:	88bb      	ldrh	r3, [r7, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	b29b      	uxth	r3, r3
 8003992:	887a      	ldrh	r2, [r7, #2]
 8003994:	4619      	mov	r1, r3
 8003996:	f7fd ffa1 	bl	80018dc <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	3b01      	subs	r3, #1
 800399e:	b298      	uxth	r0, r3
 80039a0:	88bb      	ldrh	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	4619      	mov	r1, r3
 80039aa:	f7fd ff97 	bl	80018dc <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 80039ae:	88f8      	ldrh	r0, [r7, #6]
 80039b0:	88b9      	ldrh	r1, [r7, #4]
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	2300      	movs	r3, #0
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2306      	movs	r3, #6
 80039ba:	f7fe fb40 	bl	800203e <lcd_DrawCircle>
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd90      	pop	{r4, r7, pc}
	...

080039c8 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 80039d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039d6:	4843      	ldr	r0, [pc, #268]	; (8003ae4 <TP_Scan+0x11c>)
 80039d8:	f001 fd8e 	bl	80054f8 <HAL_GPIO_ReadPin>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d157      	bne.n	8003a92 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <TP_Scan+0x2a>
 80039e8:	493f      	ldr	r1, [pc, #252]	; (8003ae8 <TP_Scan+0x120>)
 80039ea:	4840      	ldr	r0, [pc, #256]	; (8003aec <TP_Scan+0x124>)
 80039ec:	f7ff ff32 	bl	8003854 <TP_Read_XY2>
 80039f0:	e03c      	b.n	8003a6c <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 80039f2:	493d      	ldr	r1, [pc, #244]	; (8003ae8 <TP_Scan+0x120>)
 80039f4:	483d      	ldr	r0, [pc, #244]	; (8003aec <TP_Scan+0x124>)
 80039f6:	f7ff ff2d 	bl	8003854 <TP_Read_XY2>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d035      	beq.n	8003a6c <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8003a00:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <TP_Scan+0x128>)
 8003a02:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003a06:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <TP_Scan+0x128>)
 8003a08:	899b      	ldrh	r3, [r3, #12]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <TP_Scan+0x128>)
 8003a18:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a2c:	ee17 3a90 	vmov	r3, s15
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <TP_Scan+0x128>)
 8003a34:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8003a36:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <TP_Scan+0x128>)
 8003a38:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <TP_Scan+0x128>)
 8003a3e:	8adb      	ldrh	r3, [r3, #22]
 8003a40:	ee07 3a90 	vmov	s15, r3
 8003a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a4c:	4b28      	ldr	r3, [pc, #160]	; (8003af0 <TP_Scan+0x128>)
 8003a4e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a62:	ee17 3a90 	vmov	r3, s15
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <TP_Scan+0x128>)
 8003a6a:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <TP_Scan+0x128>)
 8003a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db2a      	blt.n	8003ace <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <TP_Scan+0x128>)
 8003a7a:	22c0      	movs	r2, #192	; 0xc0
 8003a7c:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <TP_Scan+0x128>)
 8003a82:	899a      	ldrh	r2, [r3, #12]
 8003a84:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <TP_Scan+0x128>)
 8003a86:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <TP_Scan+0x128>)
 8003a8a:	8ada      	ldrh	r2, [r3, #22]
 8003a8c:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <TP_Scan+0x128>)
 8003a8e:	83da      	strh	r2, [r3, #30]
 8003a90:	e01d      	b.n	8003ace <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8003a92:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <TP_Scan+0x128>)
 8003a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	da09      	bge.n	8003ab2 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8003a9e:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <TP_Scan+0x128>)
 8003aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <TP_Scan+0x128>)
 8003aac:	f883 2020 	strb.w	r2, [r3, #32]
 8003ab0:	e00d      	b.n	8003ace <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <TP_Scan+0x128>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <TP_Scan+0x128>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8003abe:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <TP_Scan+0x128>)
 8003ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac4:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <TP_Scan+0x128>)
 8003ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003acc:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <TP_Scan+0x128>)
 8003ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ad8:	b2db      	uxtb	r3, r3
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40020800 	.word	0x40020800
 8003ae8:	20000022 	.word	0x20000022
 8003aec:	20000018 	.word	0x20000018
 8003af0:	2000000c 	.word	0x2000000c

08003af4 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003af8:	220e      	movs	r2, #14
 8003afa:	4905      	ldr	r1, [pc, #20]	; (8003b10 <TP_Save_Adjdata+0x1c>)
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7fd fb5f 	bl	80011c0 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8003b02:	2100      	movs	r1, #0
 8003b04:	200e      	movs	r0, #14
 8003b06:	f7fd fafb 	bl	8001100 <at24c_WriteOneByte>
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000030 	.word	0x20000030

08003b14 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8003b1e:	200e      	movs	r0, #14
 8003b20:	f7fd fad2 	bl	80010c8 <at24c_ReadOneByte>
 8003b24:	4603      	mov	r3, r0
 8003b26:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003b2e:	220e      	movs	r2, #14
 8003b30:	4905      	ldr	r1, [pc, #20]	; (8003b48 <TP_Get_Adjdata+0x34>)
 8003b32:	2000      	movs	r0, #0
 8003b34:	f7fd fb25 	bl	8001182 <at24c_Read>
		return 1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000030 	.word	0x20000030
 8003b4c:	00000000 	.word	0x00000000

08003b50 <touch_Adjust>:


void touch_Adjust(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08e      	sub	sp, #56	; 0x38
 8003b54:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8003b62:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <touch_Adjust+0x198>)
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	4b60      	ldr	r3, [pc, #384]	; (8003ce8 <touch_Adjust+0x198>)
 8003b68:	885b      	ldrh	r3, [r3, #2]
 8003b6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b6e:	9100      	str	r1, [sp, #0]
 8003b70:	2100      	movs	r1, #0
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7fd fe7c 	bl	8001870 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9302      	str	r3, [sp, #8]
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b8a:	4a58      	ldr	r2, [pc, #352]	; (8003cec <touch_Adjust+0x19c>)
 8003b8c:	2128      	movs	r1, #40	; 0x28
 8003b8e:	2005      	movs	r0, #5
 8003b90:	f7fe fac2 	bl	8002118 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8003b94:	2300      	movs	r3, #0
 8003b96:	9302      	str	r3, [sp, #8]
 8003b98:	2310      	movs	r3, #16
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ba6:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <touch_Adjust+0x1a0>)
 8003ba8:	2141      	movs	r1, #65	; 0x41
 8003baa:	2005      	movs	r0, #5
 8003bac:	f7fe fab4 	bl	8002118 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9302      	str	r3, [sp, #8]
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003bc2:	4a4c      	ldr	r2, [pc, #304]	; (8003cf4 <touch_Adjust+0x1a4>)
 8003bc4:	215a      	movs	r1, #90	; 0x5a
 8003bc6:	2005      	movs	r0, #5
 8003bc8:	f7fe faa6 	bl	8002118 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8003bcc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003bd0:	2114      	movs	r1, #20
 8003bd2:	2014      	movs	r0, #20
 8003bd4:	f7ff fea0 	bl	8003918 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8003bd8:	4b47      	ldr	r3, [pc, #284]	; (8003cf8 <touch_Adjust+0x1a8>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8003be0:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <touch_Adjust+0x1a8>)
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8003be8:	2032      	movs	r0, #50	; 0x32
 8003bea:	f000 fc67 	bl	80044bc <HAL_Delay>
		tp_dev.scan(1);
 8003bee:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <touch_Adjust+0x1a8>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8003bf6:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <touch_Adjust+0x1a8>)
 8003bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	f040 835e 	bne.w	80042c2 <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 8003c06:	4b3c      	ldr	r3, [pc, #240]	; (8003cf8 <touch_Adjust+0x1a8>)
 8003c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <touch_Adjust+0x1a8>)
 8003c14:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8003c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c1c:	4a36      	ldr	r2, [pc, #216]	; (8003cf8 <touch_Adjust+0x1a8>)
 8003c1e:	8992      	ldrh	r2, [r2, #12]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c26:	440b      	add	r3, r1
 8003c28:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8003c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c30:	4a31      	ldr	r2, [pc, #196]	; (8003cf8 <touch_Adjust+0x1a8>)
 8003c32:	8ad2      	ldrh	r2, [r2, #22]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8003c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c44:	3301      	adds	r3, #1
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8003c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d8c9      	bhi.n	8003be8 <touch_Adjust+0x98>
 8003c54:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <touch_Adjust+0x10c>)
 8003c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5a:	bf00      	nop
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c8f 	.word	0x08003c8f
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003cfd 	.word	0x08003cfd
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8003c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c70:	2114      	movs	r1, #20
 8003c72:	2014      	movs	r0, #20
 8003c74:	f7ff fe50 	bl	8003918 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <touch_Adjust+0x198>)
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	3b14      	subs	r3, #20
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003c84:	2114      	movs	r1, #20
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fe46 	bl	8003918 <TP_Drow_Touch_Point>
					break;
 8003c8c:	e31a      	b.n	80042c4 <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8003c8e:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <touch_Adjust+0x198>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	3b14      	subs	r3, #20
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c9a:	2114      	movs	r1, #20
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fe3b 	bl	8003918 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8003ca2:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <touch_Adjust+0x198>)
 8003ca4:	885b      	ldrh	r3, [r3, #2]
 8003ca6:	3b14      	subs	r3, #20
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003cae:	4619      	mov	r1, r3
 8003cb0:	2014      	movs	r0, #20
 8003cb2:	f7ff fe31 	bl	8003918 <TP_Drow_Touch_Point>
					break;
 8003cb6:	e305      	b.n	80042c4 <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <touch_Adjust+0x198>)
 8003cba:	885b      	ldrh	r3, [r3, #2]
 8003cbc:	3b14      	subs	r3, #20
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	2014      	movs	r0, #20
 8003cc8:	f7ff fe26 	bl	8003918 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <touch_Adjust+0x198>)
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	3b14      	subs	r3, #20
 8003cd2:	b298      	uxth	r0, r3
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <touch_Adjust+0x198>)
 8003cd6:	885b      	ldrh	r3, [r3, #2]
 8003cd8:	3b14      	subs	r3, #20
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7ff fe19 	bl	8003918 <TP_Drow_Touch_Point>
					break;
 8003ce6:	e2ed      	b.n	80042c4 <touch_Adjust+0x774>
 8003ce8:	200003d4 	.word	0x200003d4
 8003cec:	080097c4 	.word	0x080097c4
 8003cf0:	080097e0 	.word	0x080097e0
 8003cf4:	080097f8 	.word	0x080097f8
 8003cf8:	2000000c 	.word	0x2000000c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8003cfc:	883b      	ldrh	r3, [r7, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	88bb      	ldrh	r3, [r7, #4]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bfb8      	it	lt
 8003d08:	425b      	neglt	r3, r3
 8003d0a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bfb8      	it	lt
 8003d18:	425b      	neglt	r3, r3
 8003d1a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	fb03 f303 	mul.w	r3, r3, r3
 8003d22:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	fb03 f303 	mul.w	r3, r3, r3
 8003d2a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fbde 	bl	80004f4 <__aeabi_ui2d>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	ec43 2b10 	vmov	d0, r2, r3
 8003d40:	f005 fc14 	bl	800956c <sqrt>
 8003d44:	ec53 2b10 	vmov	r2, r3, d0
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fc fefc 	bl	8000b48 <__aeabi_d2uiz>
 8003d50:	4603      	mov	r3, r0
 8003d52:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8003d54:	893b      	ldrh	r3, [r7, #8]
 8003d56:	461a      	mov	r2, r3
 8003d58:	89bb      	ldrh	r3, [r7, #12]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bfb8      	it	lt
 8003d60:	425b      	neglt	r3, r3
 8003d62:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8003d64:	897b      	ldrh	r3, [r7, #10]
 8003d66:	461a      	mov	r2, r3
 8003d68:	89fb      	ldrh	r3, [r7, #14]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bfb8      	it	lt
 8003d70:	425b      	neglt	r3, r3
 8003d72:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	fb03 f303 	mul.w	r3, r3, r3
 8003d7a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	fb03 f303 	mul.w	r3, r3, r3
 8003d82:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003d84:	6a3a      	ldr	r2, [r7, #32]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fbb2 	bl	80004f4 <__aeabi_ui2d>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	ec43 2b10 	vmov	d0, r2, r3
 8003d98:	f005 fbe8 	bl	800956c <sqrt>
 8003d9c:	ec53 2b10 	vmov	r2, r3, d0
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	f7fc fed0 	bl	8000b48 <__aeabi_d2uiz>
 8003da8:	4603      	mov	r3, r0
 8003daa:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003dac:	8b7b      	ldrh	r3, [r7, #26]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003db6:	8b3b      	ldrh	r3, [r7, #24]
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dc4:	ee16 0a90 	vmov	r0, s13
 8003dc8:	f7fc fbb6 	bl	8000538 <__aeabi_f2d>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8003dd4:	a384      	add	r3, pc, #528	; (adr r3, 8003fe8 <touch_Adjust+0x498>)
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dde:	f7fc fe75 	bl	8000acc <__aeabi_dcmplt>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10f      	bne.n	8003e08 <touch_Adjust+0x2b8>
 8003de8:	a381      	add	r3, pc, #516	; (adr r3, 8003ff0 <touch_Adjust+0x4a0>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003df2:	f7fc fe89 	bl	8000b08 <__aeabi_dcmpgt>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <touch_Adjust+0x2b8>
 8003dfc:	8b7b      	ldrh	r3, [r7, #26]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <touch_Adjust+0x2b8>
 8003e02:	8b3b      	ldrh	r3, [r7, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d136      	bne.n	8003e76 <touch_Adjust+0x326>
					{
						cnt=0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003e0e:	4b7a      	ldr	r3, [pc, #488]	; (8003ff8 <touch_Adjust+0x4a8>)
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	3b14      	subs	r3, #20
 8003e14:	b298      	uxth	r0, r3
 8003e16:	4b78      	ldr	r3, [pc, #480]	; (8003ff8 <touch_Adjust+0x4a8>)
 8003e18:	885b      	ldrh	r3, [r3, #2]
 8003e1a:	3b14      	subs	r3, #20
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e22:	4619      	mov	r1, r3
 8003e24:	f7ff fd78 	bl	8003918 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003e28:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003e2c:	2114      	movs	r1, #20
 8003e2e:	2014      	movs	r0, #20
 8003e30:	f7ff fd72 	bl	8003918 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003e34:	2300      	movs	r3, #0
 8003e36:	9302      	str	r3, [sp, #8]
 8003e38:	2310      	movs	r3, #16
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e46:	4a6d      	ldr	r2, [pc, #436]	; (8003ffc <touch_Adjust+0x4ac>)
 8003e48:	2128      	movs	r1, #40	; 0x28
 8003e4a:	2005      	movs	r0, #5
 8003e4c:	f7fe f964 	bl	8002118 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003e50:	2300      	movs	r3, #0
 8003e52:	9302      	str	r3, [sp, #8]
 8003e54:	2310      	movs	r3, #16
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e62:	4a67      	ldr	r2, [pc, #412]	; (8004000 <touch_Adjust+0x4b0>)
 8003e64:	213c      	movs	r1, #60	; 0x3c
 8003e66:	2005      	movs	r0, #5
 8003e68:	f7fe f956 	bl	8002118 <lcd_ShowStr>
						HAL_Delay(1000);
 8003e6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e70:	f000 fb24 	bl	80044bc <HAL_Delay>
 						continue;
 8003e74:	e226      	b.n	80042c4 <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8003e76:	883b      	ldrh	r3, [r7, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	893b      	ldrh	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bfb8      	it	lt
 8003e82:	425b      	neglt	r3, r3
 8003e84:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8003e86:	887b      	ldrh	r3, [r7, #2]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfb8      	it	lt
 8003e92:	425b      	neglt	r3, r3
 8003e94:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	fb03 f303 	mul.w	r3, r3, r3
 8003e9c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fb03 f303 	mul.w	r3, r3, r3
 8003ea4:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003ea6:	6a3a      	ldr	r2, [r7, #32]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc fb21 	bl	80004f4 <__aeabi_ui2d>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	ec43 2b10 	vmov	d0, r2, r3
 8003eba:	f005 fb57 	bl	800956c <sqrt>
 8003ebe:	ec53 2b10 	vmov	r2, r3, d0
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fc fe3f 	bl	8000b48 <__aeabi_d2uiz>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8003ece:	88bb      	ldrh	r3, [r7, #4]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	89bb      	ldrh	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bfb8      	it	lt
 8003eda:	425b      	neglt	r3, r3
 8003edc:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	89fb      	ldrh	r3, [r7, #14]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bfb8      	it	lt
 8003eea:	425b      	neglt	r3, r3
 8003eec:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	fb03 f303 	mul.w	r3, r3, r3
 8003ef4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	fb03 f303 	mul.w	r3, r3, r3
 8003efc:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003efe:	6a3a      	ldr	r2, [r7, #32]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4413      	add	r3, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fc faf5 	bl	80004f4 <__aeabi_ui2d>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	ec43 2b10 	vmov	d0, r2, r3
 8003f12:	f005 fb2b 	bl	800956c <sqrt>
 8003f16:	ec53 2b10 	vmov	r2, r3, d0
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f7fc fe13 	bl	8000b48 <__aeabi_d2uiz>
 8003f22:	4603      	mov	r3, r0
 8003f24:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003f26:	8b7b      	ldrh	r3, [r7, #26]
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f30:	8b3b      	ldrh	r3, [r7, #24]
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f3e:	ee16 0a90 	vmov	r0, s13
 8003f42:	f7fc faf9 	bl	8000538 <__aeabi_f2d>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003f4e:	a326      	add	r3, pc, #152	; (adr r3, 8003fe8 <touch_Adjust+0x498>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f58:	f7fc fdb8 	bl	8000acc <__aeabi_dcmplt>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <touch_Adjust+0x426>
 8003f62:	a323      	add	r3, pc, #140	; (adr r3, 8003ff0 <touch_Adjust+0x4a0>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f6c:	f7fc fdcc 	bl	8000b08 <__aeabi_dcmpgt>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d046      	beq.n	8004004 <touch_Adjust+0x4b4>
					{
						cnt=0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003f7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <touch_Adjust+0x4a8>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	3b14      	subs	r3, #20
 8003f82:	b298      	uxth	r0, r3
 8003f84:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <touch_Adjust+0x4a8>)
 8003f86:	885b      	ldrh	r3, [r3, #2]
 8003f88:	3b14      	subs	r3, #20
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f90:	4619      	mov	r1, r3
 8003f92:	f7ff fcc1 	bl	8003918 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003f96:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003f9a:	2114      	movs	r1, #20
 8003f9c:	2014      	movs	r0, #20
 8003f9e:	f7ff fcbb 	bl	8003918 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9302      	str	r3, [sp, #8]
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fb4:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <touch_Adjust+0x4ac>)
 8003fb6:	2128      	movs	r1, #40	; 0x28
 8003fb8:	2005      	movs	r0, #5
 8003fba:	f7fe f8ad 	bl	8002118 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9302      	str	r3, [sp, #8]
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fd0:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <touch_Adjust+0x4b0>)
 8003fd2:	213c      	movs	r1, #60	; 0x3c
 8003fd4:	2005      	movs	r0, #5
 8003fd6:	f7fe f89f 	bl	8002118 <lcd_ShowStr>
						HAL_Delay(1000);
 8003fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fde:	f000 fa6d 	bl	80044bc <HAL_Delay>
						continue;
 8003fe2:	e16f      	b.n	80042c4 <touch_Adjust+0x774>
 8003fe4:	f3af 8000 	nop.w
 8003fe8:	66666666 	.word	0x66666666
 8003fec:	3fee6666 	.word	0x3fee6666
 8003ff0:	cccccccd 	.word	0xcccccccd
 8003ff4:	3ff0cccc 	.word	0x3ff0cccc
 8003ff8:	200003d4 	.word	0x200003d4
 8003ffc:	0800980c 	.word	0x0800980c
 8004000:	0800982c 	.word	0x0800982c
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8004004:	88bb      	ldrh	r3, [r7, #4]
 8004006:	461a      	mov	r2, r3
 8004008:	893b      	ldrh	r3, [r7, #8]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfb8      	it	lt
 8004010:	425b      	neglt	r3, r3
 8004012:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	461a      	mov	r2, r3
 8004018:	897b      	ldrh	r3, [r7, #10]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	bfb8      	it	lt
 8004020:	425b      	neglt	r3, r3
 8004022:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	fb03 f303 	mul.w	r3, r3, r3
 800402a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	fb03 f303 	mul.w	r3, r3, r3
 8004032:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8004034:	6a3a      	ldr	r2, [r7, #32]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f7fc fa5a 	bl	80004f4 <__aeabi_ui2d>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	ec43 2b10 	vmov	d0, r2, r3
 8004048:	f005 fa90 	bl	800956c <sqrt>
 800404c:	ec53 2b10 	vmov	r2, r3, d0
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	f7fc fd78 	bl	8000b48 <__aeabi_d2uiz>
 8004058:	4603      	mov	r3, r0
 800405a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 800405c:	883b      	ldrh	r3, [r7, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	89bb      	ldrh	r3, [r7, #12]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	bfb8      	it	lt
 8004068:	425b      	neglt	r3, r3
 800406a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	461a      	mov	r2, r3
 8004070:	89fb      	ldrh	r3, [r7, #14]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	bfb8      	it	lt
 8004078:	425b      	neglt	r3, r3
 800407a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	fb03 f303 	mul.w	r3, r3, r3
 8004082:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	fb03 f303 	mul.w	r3, r3, r3
 800408a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fa2e 	bl	80004f4 <__aeabi_ui2d>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	ec43 2b10 	vmov	d0, r2, r3
 80040a0:	f005 fa64 	bl	800956c <sqrt>
 80040a4:	ec53 2b10 	vmov	r2, r3, d0
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7fc fd4c 	bl	8000b48 <__aeabi_d2uiz>
 80040b0:	4603      	mov	r3, r0
 80040b2:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80040b4:	8b7b      	ldrh	r3, [r7, #26]
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040be:	8b3b      	ldrh	r3, [r7, #24]
 80040c0:	ee07 3a90 	vmov	s15, r3
 80040c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040cc:	ee16 0a90 	vmov	r0, s13
 80040d0:	f7fc fa32 	bl	8000538 <__aeabi_f2d>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80040dc:	a383      	add	r3, pc, #524	; (adr r3, 80042ec <touch_Adjust+0x79c>)
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040e6:	f7fc fcf1 	bl	8000acc <__aeabi_dcmplt>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <touch_Adjust+0x5b4>
 80040f0:	a380      	add	r3, pc, #512	; (adr r3, 80042f4 <touch_Adjust+0x7a4>)
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040fa:	f7fc fd05 	bl	8000b08 <__aeabi_dcmpgt>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d036      	beq.n	8004172 <touch_Adjust+0x622>
					{
						cnt=0;
 8004104:	2300      	movs	r3, #0
 8004106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800410a:	4b71      	ldr	r3, [pc, #452]	; (80042d0 <touch_Adjust+0x780>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	3b14      	subs	r3, #20
 8004110:	b298      	uxth	r0, r3
 8004112:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <touch_Adjust+0x780>)
 8004114:	885b      	ldrh	r3, [r3, #2]
 8004116:	3b14      	subs	r3, #20
 8004118:	b29b      	uxth	r3, r3
 800411a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800411e:	4619      	mov	r1, r3
 8004120:	f7ff fbfa 	bl	8003918 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8004124:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004128:	2114      	movs	r1, #20
 800412a:	2014      	movs	r0, #20
 800412c:	f7ff fbf4 	bl	8003918 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8004130:	2300      	movs	r3, #0
 8004132:	9302      	str	r3, [sp, #8]
 8004134:	2310      	movs	r3, #16
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004142:	4a64      	ldr	r2, [pc, #400]	; (80042d4 <touch_Adjust+0x784>)
 8004144:	2128      	movs	r1, #40	; 0x28
 8004146:	2005      	movs	r0, #5
 8004148:	f7fd ffe6 	bl	8002118 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 800414c:	2300      	movs	r3, #0
 800414e:	9302      	str	r3, [sp, #8]
 8004150:	2310      	movs	r3, #16
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800415e:	4a5e      	ldr	r2, [pc, #376]	; (80042d8 <touch_Adjust+0x788>)
 8004160:	213c      	movs	r1, #60	; 0x3c
 8004162:	2005      	movs	r0, #5
 8004164:	f7fd ffd8 	bl	8002118 <lcd_ShowStr>

						HAL_Delay(1000);
 8004168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800416c:	f000 f9a6 	bl	80044bc <HAL_Delay>
 							continue;
 8004170:	e0a8      	b.n	80042c4 <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8004172:	4b57      	ldr	r3, [pc, #348]	; (80042d0 <touch_Adjust+0x780>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	3b28      	subs	r3, #40	; 0x28
 8004178:	ee07 3a90 	vmov	s15, r3
 800417c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004180:	88bb      	ldrh	r3, [r7, #4]
 8004182:	461a      	mov	r2, r3
 8004184:	883b      	ldrh	r3, [r7, #0]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004194:	4b51      	ldr	r3, [pc, #324]	; (80042dc <touch_Adjust+0x78c>)
 8004196:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 800419a:	4b4d      	ldr	r3, [pc, #308]	; (80042d0 <touch_Adjust+0x780>)
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041a6:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <touch_Adjust+0x78c>)
 80041a8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80041ac:	88bb      	ldrh	r3, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	883b      	ldrh	r3, [r7, #0]
 80041b2:	4413      	add	r3, r2
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80041c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d0:	ee17 3a90 	vmov	r3, s15
 80041d4:	b21a      	sxth	r2, r3
 80041d6:	4b41      	ldr	r3, [pc, #260]	; (80042dc <touch_Adjust+0x78c>)
 80041d8:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 80041da:	4b3d      	ldr	r3, [pc, #244]	; (80042d0 <touch_Adjust+0x780>)
 80041dc:	885b      	ldrh	r3, [r3, #2]
 80041de:	3b28      	subs	r3, #40	; 0x28
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041e8:	897b      	ldrh	r3, [r7, #10]
 80041ea:	461a      	mov	r2, r3
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	ee07 3a90 	vmov	s15, r3
 80041f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041fc:	4b37      	ldr	r3, [pc, #220]	; (80042dc <touch_Adjust+0x78c>)
 80041fe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8004202:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <touch_Adjust+0x780>)
 8004204:	885b      	ldrh	r3, [r3, #2]
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800420e:	4b33      	ldr	r3, [pc, #204]	; (80042dc <touch_Adjust+0x78c>)
 8004210:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004214:	897b      	ldrh	r3, [r7, #10]
 8004216:	461a      	mov	r2, r3
 8004218:	887b      	ldrh	r3, [r7, #2]
 800421a:	4413      	add	r3, r2
 800421c:	ee07 3a90 	vmov	s15, r3
 8004220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800422c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004238:	ee17 3a90 	vmov	r3, s15
 800423c:	b21a      	sxth	r2, r3
 800423e:	4b27      	ldr	r3, [pc, #156]	; (80042dc <touch_Adjust+0x78c>)
 8004240:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8004242:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <touch_Adjust+0x780>)
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	3b14      	subs	r3, #20
 8004248:	b298      	uxth	r0, r3
 800424a:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <touch_Adjust+0x780>)
 800424c:	885b      	ldrh	r3, [r3, #2]
 800424e:	3b14      	subs	r3, #20
 8004250:	b29b      	uxth	r3, r3
 8004252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004256:	4619      	mov	r1, r3
 8004258:	f7ff fb5e 	bl	8003918 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 800425c:	2300      	movs	r3, #0
 800425e:	9302      	str	r3, [sp, #8]
 8004260:	2310      	movs	r3, #16
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800426e:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <touch_Adjust+0x790>)
 8004270:	2128      	movs	r1, #40	; 0x28
 8004272:	2005      	movs	r0, #5
 8004274:	f7fd ff50 	bl	8002118 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8004278:	2300      	movs	r3, #0
 800427a:	9302      	str	r3, [sp, #8]
 800427c:	2310      	movs	r3, #16
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <touch_Adjust+0x794>)
 800428c:	213c      	movs	r1, #60	; 0x3c
 800428e:	2005      	movs	r0, #5
 8004290:	f7fd ff42 	bl	8002118 <lcd_ShowStr>
					HAL_Delay(1000);
 8004294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004298:	f000 f910 	bl	80044bc <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 800429c:	2300      	movs	r3, #0
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	2310      	movs	r3, #16
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042ae:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <touch_Adjust+0x798>)
 80042b0:	2128      	movs	r1, #40	; 0x28
 80042b2:	2005      	movs	r0, #5
 80042b4:	f7fd ff30 	bl	8002118 <lcd_ShowStr>
					TP_Save_Adjdata();
 80042b8:	f7ff fc1c 	bl	8003af4 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 80042bc:	f7ff fc2a 	bl	8003b14 <TP_Get_Adjdata>
					return;
 80042c0:	e001      	b.n	80042c6 <touch_Adjust+0x776>
			}
		}
 80042c2:	bf00      	nop
		HAL_Delay(50);
 80042c4:	e490      	b.n	8003be8 <touch_Adjust+0x98>
 	}
}
 80042c6:	3728      	adds	r7, #40	; 0x28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	f3af 8000 	nop.w
 80042d0:	200003d4 	.word	0x200003d4
 80042d4:	0800980c 	.word	0x0800980c
 80042d8:	0800982c 	.word	0x0800982c
 80042dc:	2000000c 	.word	0x2000000c
 80042e0:	0800984c 	.word	0x0800984c
 80042e4:	0800986c 	.word	0x0800986c
 80042e8:	0800988c 	.word	0x0800988c
 80042ec:	66666666 	.word	0x66666666
 80042f0:	3fee6666 	.word	0x3fee6666
 80042f4:	cccccccd 	.word	0xcccccccd
 80042f8:	3ff0cccc 	.word	0x3ff0cccc

080042fc <touch_init>:

void touch_init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8004300:	4904      	ldr	r1, [pc, #16]	; (8004314 <touch_init+0x18>)
 8004302:	4805      	ldr	r0, [pc, #20]	; (8004318 <touch_init+0x1c>)
 8004304:	f7ff fa84 	bl	8003810 <TP_Read_XY>
	at24c_init();
 8004308:	f7fc fed8 	bl	80010bc <at24c_init>
	TP_Get_Adjdata();
 800430c:	f7ff fc02 	bl	8003b14 <TP_Get_Adjdata>
}
 8004310:	bf00      	nop
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000022 	.word	0x20000022
 8004318:	20000018 	.word	0x20000018

0800431c <touch_Scan>:

void touch_Scan(){
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <touch_Scan+0x10>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2000      	movs	r0, #0
 8004326:	4798      	blx	r3
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}
 800432c:	2000000c 	.word	0x2000000c

08004330 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8004334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004338:	4805      	ldr	r0, [pc, #20]	; (8004350 <touch_IsTouched+0x20>)
 800433a:	f001 f8dd 	bl	80054f8 <HAL_GPIO_ReadPin>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
}
 800434a:	4618      	mov	r0, r3
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40020800 	.word	0x40020800

08004354 <touch_GetX>:

uint16_t touch_GetX(){
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <touch_GetX+0x14>)
 800435a:	899b      	ldrh	r3, [r3, #12]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	2000000c 	.word	0x2000000c

0800436c <touch_GetY>:

uint16_t touch_GetY(){
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <touch_GetY+0x14>)
 8004372:	8adb      	ldrh	r3, [r3, #22]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	2000000c 	.word	0x2000000c

08004384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004388:	480d      	ldr	r0, [pc, #52]	; (80043c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800438a:	490e      	ldr	r1, [pc, #56]	; (80043c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800438c:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800438e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004390:	e002      	b.n	8004398 <LoopCopyDataInit>

08004392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004396:	3304      	adds	r3, #4

08004398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800439a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800439c:	d3f9      	bcc.n	8004392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800439e:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043a0:	4c0b      	ldr	r4, [pc, #44]	; (80043d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043a4:	e001      	b.n	80043aa <LoopFillZerobss>

080043a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043a8:	3204      	adds	r2, #4

080043aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043ac:	d3fb      	bcc.n	80043a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043ae:	f7fe ff79 	bl	80032a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043b2:	f004 f853 	bl	800845c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043b6:	f7fe f819 	bl	80023ec <main>
  bx  lr    
 80043ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043c4:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80043c8:	0800c9a0 	.word	0x0800c9a0
  ldr r2, =_sbss
 80043cc:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80043d0:	20000554 	.word	0x20000554

080043d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043d4:	e7fe      	b.n	80043d4 <ADC_IRQHandler>
	...

080043d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <HAL_Init+0x40>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <HAL_Init+0x40>)
 80043e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_Init+0x40>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <HAL_Init+0x40>)
 80043ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HAL_Init+0x40>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a07      	ldr	r2, [pc, #28]	; (8004418 <HAL_Init+0x40>)
 80043fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004400:	2003      	movs	r0, #3
 8004402:	f000 fbb1 	bl	8004b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004406:	200f      	movs	r0, #15
 8004408:	f000 f808 	bl	800441c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800440c:	f7fe fe1e 	bl	800304c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023c00 	.word	0x40023c00

0800441c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_InitTick+0x54>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_InitTick+0x58>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004432:	fbb3 f3f1 	udiv	r3, r3, r1
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fbc9 	bl	8004bd2 <HAL_SYSTICK_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e00e      	b.n	8004468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d80a      	bhi.n	8004466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004450:	2200      	movs	r2, #0
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	f000 fb91 	bl	8004b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800445c:	4a06      	ldr	r2, [pc, #24]	; (8004478 <HAL_InitTick+0x5c>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000008 	.word	0x20000008
 8004474:	20000048 	.word	0x20000048
 8004478:	20000044 	.word	0x20000044

0800447c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_IncTick+0x20>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_IncTick+0x24>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4413      	add	r3, r2
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <HAL_IncTick+0x24>)
 800448e:	6013      	str	r3, [r2, #0]
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000048 	.word	0x20000048
 80044a0:	20000540 	.word	0x20000540

080044a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return uwTick;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_GetTick+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000540 	.word	0x20000540

080044bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c4:	f7ff ffee 	bl	80044a4 <HAL_GetTick>
 80044c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d005      	beq.n	80044e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_Delay+0x44>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044e2:	bf00      	nop
 80044e4:	f7ff ffde 	bl	80044a4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d8f7      	bhi.n	80044e4 <HAL_Delay+0x28>
  {
  }
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000048 	.word	0x20000048

08004504 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e033      	b.n	8004582 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fc fd36 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d118      	bne.n	8004574 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800454a:	f023 0302 	bic.w	r3, r3, #2
 800454e:	f043 0202 	orr.w	r2, r3, #2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f93a 	bl	80047d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f023 0303 	bic.w	r3, r3, #3
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
 8004572:	e001      	b.n	8004578 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x1c>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e105      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x228>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b09      	cmp	r3, #9
 80045b6:	d925      	bls.n	8004604 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68d9      	ldr	r1, [r3, #12]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	3b1e      	subs	r3, #30
 80045ce:	2207      	movs	r2, #7
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43da      	mvns	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	400a      	ands	r2, r1
 80045dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68d9      	ldr	r1, [r3, #12]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	4618      	mov	r0, r3
 80045f0:	4603      	mov	r3, r0
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4403      	add	r3, r0
 80045f6:	3b1e      	subs	r3, #30
 80045f8:	409a      	lsls	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	e022      	b.n	800464a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6919      	ldr	r1, [r3, #16]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	4613      	mov	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4413      	add	r3, r2
 8004618:	2207      	movs	r2, #7
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43da      	mvns	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	400a      	ands	r2, r1
 8004626:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6919      	ldr	r1, [r3, #16]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	4618      	mov	r0, r3
 800463a:	4603      	mov	r3, r0
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4403      	add	r3, r0
 8004640:	409a      	lsls	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b06      	cmp	r3, #6
 8004650:	d824      	bhi.n	800469c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	3b05      	subs	r3, #5
 8004664:	221f      	movs	r2, #31
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43da      	mvns	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	400a      	ands	r2, r1
 8004672:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	4618      	mov	r0, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	3b05      	subs	r3, #5
 800468e:	fa00 f203 	lsl.w	r2, r0, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	635a      	str	r2, [r3, #52]	; 0x34
 800469a:	e04c      	b.n	8004736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d824      	bhi.n	80046ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	3b23      	subs	r3, #35	; 0x23
 80046b6:	221f      	movs	r2, #31
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43da      	mvns	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	400a      	ands	r2, r1
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	4618      	mov	r0, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	3b23      	subs	r3, #35	; 0x23
 80046e0:	fa00 f203 	lsl.w	r2, r0, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
 80046ec:	e023      	b.n	8004736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	3b41      	subs	r3, #65	; 0x41
 8004700:	221f      	movs	r2, #31
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43da      	mvns	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	400a      	ands	r2, r1
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	4618      	mov	r0, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	3b41      	subs	r3, #65	; 0x41
 800472a:	fa00 f203 	lsl.w	r2, r0, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004736:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <HAL_ADC_ConfigChannel+0x234>)
 8004738:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <HAL_ADC_ConfigChannel+0x238>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d109      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x1cc>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b12      	cmp	r3, #18
 800474a:	d105      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <HAL_ADC_ConfigChannel+0x238>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d123      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x21e>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b10      	cmp	r3, #16
 8004768:	d003      	beq.n	8004772 <HAL_ADC_ConfigChannel+0x1e6>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b11      	cmp	r3, #17
 8004770:	d11b      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b10      	cmp	r3, #16
 8004784:	d111      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_ADC_ConfigChannel+0x23c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a10      	ldr	r2, [pc, #64]	; (80047cc <HAL_ADC_ConfigChannel+0x240>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	0c9a      	lsrs	r2, r3, #18
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800479c:	e002      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f9      	bne.n	800479e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40012300 	.word	0x40012300
 80047c4:	40012000 	.word	0x40012000
 80047c8:	20000008 	.word	0x20000008
 80047cc:	431bde83 	.word	0x431bde83

080047d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047d8:	4b79      	ldr	r3, [pc, #484]	; (80049c0 <ADC_Init+0x1f0>)
 80047da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	021a      	lsls	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6899      	ldr	r1, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <ADC_Init+0x1f4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d022      	beq.n	80048ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004876:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6899      	ldr	r1, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6899      	ldr	r1, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e00f      	b.n	80048ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0202 	bic.w	r2, r2, #2
 80048dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6899      	ldr	r1, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7e1b      	ldrb	r3, [r3, #24]
 80048e8:	005a      	lsls	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800491a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	3b01      	subs	r3, #1
 8004928:	035a      	lsls	r2, r3, #13
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	e007      	b.n	8004944 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004942:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	3b01      	subs	r3, #1
 8004960:	051a      	lsls	r2, r3, #20
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6899      	ldr	r1, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004986:	025a      	lsls	r2, r3, #9
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	029a      	lsls	r2, r3, #10
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40012300 	.word	0x40012300
 80049c4:	0f000001 	.word	0x0f000001

080049c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <__NVIC_SetPriorityGrouping+0x44>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049e4:	4013      	ands	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049fa:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <__NVIC_SetPriorityGrouping+0x44>)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	60d3      	str	r3, [r2, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <__NVIC_GetPriorityGrouping+0x18>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	f003 0307 	and.w	r3, r3, #7
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	db0b      	blt.n	8004a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	f003 021f 	and.w	r2, r3, #31
 8004a44:	4907      	ldr	r1, [pc, #28]	; (8004a64 <__NVIC_EnableIRQ+0x38>)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	e000e100 	.word	0xe000e100

08004a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	db0a      	blt.n	8004a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	490c      	ldr	r1, [pc, #48]	; (8004ab4 <__NVIC_SetPriority+0x4c>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	0112      	lsls	r2, r2, #4
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a90:	e00a      	b.n	8004aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	4908      	ldr	r1, [pc, #32]	; (8004ab8 <__NVIC_SetPriority+0x50>)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	0112      	lsls	r2, r2, #4
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	761a      	strb	r2, [r3, #24]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	e000e100 	.word	0xe000e100
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f1c3 0307 	rsb	r3, r3, #7
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf28      	it	cs
 8004ada:	2304      	movcs	r3, #4
 8004adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d902      	bls.n	8004aec <NVIC_EncodePriority+0x30>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3b03      	subs	r3, #3
 8004aea:	e000      	b.n	8004aee <NVIC_EncodePriority+0x32>
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43da      	mvns	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	401a      	ands	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b04:	f04f 31ff 	mov.w	r1, #4294967295
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	43d9      	mvns	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b14:	4313      	orrs	r3, r2
         );
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	; 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b34:	d301      	bcc.n	8004b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b36:	2301      	movs	r3, #1
 8004b38:	e00f      	b.n	8004b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <SysTick_Config+0x40>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b42:	210f      	movs	r1, #15
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	f7ff ff8e 	bl	8004a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <SysTick_Config+0x40>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b52:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <SysTick_Config+0x40>)
 8004b54:	2207      	movs	r2, #7
 8004b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	e000e010 	.word	0xe000e010

08004b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff29 	bl	80049c8 <__NVIC_SetPriorityGrouping>
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	4603      	mov	r3, r0
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b90:	f7ff ff3e 	bl	8004a10 <__NVIC_GetPriorityGrouping>
 8004b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	6978      	ldr	r0, [r7, #20]
 8004b9c:	f7ff ff8e 	bl	8004abc <NVIC_EncodePriority>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff ff5d 	bl	8004a68 <__NVIC_SetPriority>
}
 8004bae:	bf00      	nop
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff31 	bl	8004a2c <__NVIC_EnableIRQ>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff ffa2 	bl	8004b24 <SysTick_Config>
 8004be0:	4603      	mov	r3, r0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bf8:	f7ff fc54 	bl	80044a4 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e099      	b.n	8004d3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c28:	e00f      	b.n	8004c4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c2a:	f7ff fc3b 	bl	80044a4 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d908      	bls.n	8004c4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2203      	movs	r2, #3
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e078      	b.n	8004d3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e8      	bne.n	8004c2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4b38      	ldr	r3, [pc, #224]	; (8004d44 <HAL_DMA_Init+0x158>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d107      	bne.n	8004cb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	4313      	orrs	r3, r2
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d117      	bne.n	8004d0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00e      	beq.n	8004d0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f9e9 	bl	80050c8 <DMA_CheckFifoParam>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e016      	b.n	8004d3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f9a0 	bl	800505c <DMA_CalcBaseAndBitshift>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	223f      	movs	r2, #63	; 0x3f
 8004d26:	409a      	lsls	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	f010803f 	.word	0xf010803f

08004d48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d54:	4b92      	ldr	r3, [pc, #584]	; (8004fa0 <HAL_DMA_IRQHandler+0x258>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a92      	ldr	r2, [pc, #584]	; (8004fa4 <HAL_DMA_IRQHandler+0x25c>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	0a9b      	lsrs	r3, r3, #10
 8004d60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	2208      	movs	r2, #8
 8004d74:	409a      	lsls	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01a      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0204 	bic.w	r2, r2, #4
 8004d9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	2208      	movs	r2, #8
 8004da2:	409a      	lsls	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db8:	2201      	movs	r2, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d012      	beq.n	8004dea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f043 0202 	orr.w	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	2204      	movs	r2, #4
 8004df0:	409a      	lsls	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d012      	beq.n	8004e20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	f043 0204 	orr.w	r2, r3, #4
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	2210      	movs	r2, #16
 8004e26:	409a      	lsls	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d043      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d03c      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	2210      	movs	r2, #16
 8004e44:	409a      	lsls	r2, r3
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d018      	beq.n	8004e8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d024      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
 8004e76:	e01f      	b.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01b      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
 8004e88:	e016      	b.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0208 	bic.w	r2, r2, #8
 8004ea6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 808e 	beq.w	8004fe6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8086 	beq.w	8004fe6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	2220      	movs	r2, #32
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d136      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0216 	bic.w	r2, r2, #22
 8004f00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_DMA_IRQHandler+0x1da>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0208 	bic.w	r2, r2, #8
 8004f30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f36:	223f      	movs	r2, #63	; 0x3f
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d07d      	beq.n	8005052 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
        }
        return;
 8004f5e:	e078      	b.n	8005052 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01c      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d108      	bne.n	8004f8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d030      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
 8004f8c:	e02b      	b.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d027      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
 8004f9e:	e022      	b.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
 8004fa0:	20000008 	.word	0x20000008
 8004fa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0210 	bic.w	r2, r2, #16
 8004fc4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d032      	beq.n	8005054 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d022      	beq.n	8005040 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	3301      	adds	r3, #1
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	429a      	cmp	r2, r3
 800501c:	d307      	bcc.n	800502e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f2      	bne.n	8005012 <HAL_DMA_IRQHandler+0x2ca>
 800502c:	e000      	b.n	8005030 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800502e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
 8005050:	e000      	b.n	8005054 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005052:	bf00      	nop
    }
  }
}
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop

0800505c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	3b10      	subs	r3, #16
 800506c:	4a14      	ldr	r2, [pc, #80]	; (80050c0 <DMA_CalcBaseAndBitshift+0x64>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005076:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <DMA_CalcBaseAndBitshift+0x68>)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b03      	cmp	r3, #3
 8005088:	d909      	bls.n	800509e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005092:	f023 0303 	bic.w	r3, r3, #3
 8005096:	1d1a      	adds	r2, r3, #4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	659a      	str	r2, [r3, #88]	; 0x58
 800509c:	e007      	b.n	80050ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	aaaaaaab 	.word	0xaaaaaaab
 80050c4:	0800c83c 	.word	0x0800c83c

080050c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d11f      	bne.n	8005122 <DMA_CheckFifoParam+0x5a>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d856      	bhi.n	8005196 <DMA_CheckFifoParam+0xce>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <DMA_CheckFifoParam+0x28>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005101 	.word	0x08005101
 80050f4:	08005113 	.word	0x08005113
 80050f8:	08005101 	.word	0x08005101
 80050fc:	08005197 	.word	0x08005197
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d046      	beq.n	800519a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005110:	e043      	b.n	800519a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800511a:	d140      	bne.n	800519e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005120:	e03d      	b.n	800519e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512a:	d121      	bne.n	8005170 <DMA_CheckFifoParam+0xa8>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d837      	bhi.n	80051a2 <DMA_CheckFifoParam+0xda>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <DMA_CheckFifoParam+0x70>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	08005149 	.word	0x08005149
 800513c:	0800514f 	.word	0x0800514f
 8005140:	08005149 	.word	0x08005149
 8005144:	08005161 	.word	0x08005161
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
      break;
 800514c:	e030      	b.n	80051b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d025      	beq.n	80051a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800515e:	e022      	b.n	80051a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005168:	d11f      	bne.n	80051aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800516e:	e01c      	b.n	80051aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d903      	bls.n	800517e <DMA_CheckFifoParam+0xb6>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b03      	cmp	r3, #3
 800517a:	d003      	beq.n	8005184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800517c:	e018      	b.n	80051b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
      break;
 8005182:	e015      	b.n	80051b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00e      	beq.n	80051ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
      break;
 8005194:	e00b      	b.n	80051ae <DMA_CheckFifoParam+0xe6>
      break;
 8005196:	bf00      	nop
 8005198:	e00a      	b.n	80051b0 <DMA_CheckFifoParam+0xe8>
      break;
 800519a:	bf00      	nop
 800519c:	e008      	b.n	80051b0 <DMA_CheckFifoParam+0xe8>
      break;
 800519e:	bf00      	nop
 80051a0:	e006      	b.n	80051b0 <DMA_CheckFifoParam+0xe8>
      break;
 80051a2:	bf00      	nop
 80051a4:	e004      	b.n	80051b0 <DMA_CheckFifoParam+0xe8>
      break;
 80051a6:	bf00      	nop
 80051a8:	e002      	b.n	80051b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <DMA_CheckFifoParam+0xe8>
      break;
 80051ae:	bf00      	nop
    }
  } 
  
  return status; 
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop

080051c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	e16b      	b.n	80054b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051dc:	2201      	movs	r2, #1
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	f040 815a 	bne.w	80054ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b01      	cmp	r3, #1
 8005204:	d005      	beq.n	8005212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800520e:	2b02      	cmp	r3, #2
 8005210:	d130      	bne.n	8005274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	2203      	movs	r2, #3
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4313      	orrs	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005248:	2201      	movs	r2, #1
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	091b      	lsrs	r3, r3, #4
 800525e:	f003 0201 	and.w	r2, r3, #1
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	2b03      	cmp	r3, #3
 800527e:	d017      	beq.n	80052b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	2203      	movs	r2, #3
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d123      	bne.n	8005304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	08da      	lsrs	r2, r3, #3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3208      	adds	r2, #8
 80052c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	220f      	movs	r2, #15
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4013      	ands	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	08da      	lsrs	r2, r3, #3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3208      	adds	r2, #8
 80052fe:	69b9      	ldr	r1, [r7, #24]
 8005300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	2203      	movs	r2, #3
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	43db      	mvns	r3, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4013      	ands	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 0203 	and.w	r2, r3, #3
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4313      	orrs	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80b4 	beq.w	80054ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	4b60      	ldr	r3, [pc, #384]	; (80054cc <HAL_GPIO_Init+0x30c>)
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	4a5f      	ldr	r2, [pc, #380]	; (80054cc <HAL_GPIO_Init+0x30c>)
 8005350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005354:	6453      	str	r3, [r2, #68]	; 0x44
 8005356:	4b5d      	ldr	r3, [pc, #372]	; (80054cc <HAL_GPIO_Init+0x30c>)
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005362:	4a5b      	ldr	r2, [pc, #364]	; (80054d0 <HAL_GPIO_Init+0x310>)
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	089b      	lsrs	r3, r3, #2
 8005368:	3302      	adds	r3, #2
 800536a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	220f      	movs	r2, #15
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a52      	ldr	r2, [pc, #328]	; (80054d4 <HAL_GPIO_Init+0x314>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d02b      	beq.n	80053e6 <HAL_GPIO_Init+0x226>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a51      	ldr	r2, [pc, #324]	; (80054d8 <HAL_GPIO_Init+0x318>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d025      	beq.n	80053e2 <HAL_GPIO_Init+0x222>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a50      	ldr	r2, [pc, #320]	; (80054dc <HAL_GPIO_Init+0x31c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01f      	beq.n	80053de <HAL_GPIO_Init+0x21e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a4f      	ldr	r2, [pc, #316]	; (80054e0 <HAL_GPIO_Init+0x320>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d019      	beq.n	80053da <HAL_GPIO_Init+0x21a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a4e      	ldr	r2, [pc, #312]	; (80054e4 <HAL_GPIO_Init+0x324>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_GPIO_Init+0x216>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a4d      	ldr	r2, [pc, #308]	; (80054e8 <HAL_GPIO_Init+0x328>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00d      	beq.n	80053d2 <HAL_GPIO_Init+0x212>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a4c      	ldr	r2, [pc, #304]	; (80054ec <HAL_GPIO_Init+0x32c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <HAL_GPIO_Init+0x20e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a4b      	ldr	r2, [pc, #300]	; (80054f0 <HAL_GPIO_Init+0x330>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d101      	bne.n	80053ca <HAL_GPIO_Init+0x20a>
 80053c6:	2307      	movs	r3, #7
 80053c8:	e00e      	b.n	80053e8 <HAL_GPIO_Init+0x228>
 80053ca:	2308      	movs	r3, #8
 80053cc:	e00c      	b.n	80053e8 <HAL_GPIO_Init+0x228>
 80053ce:	2306      	movs	r3, #6
 80053d0:	e00a      	b.n	80053e8 <HAL_GPIO_Init+0x228>
 80053d2:	2305      	movs	r3, #5
 80053d4:	e008      	b.n	80053e8 <HAL_GPIO_Init+0x228>
 80053d6:	2304      	movs	r3, #4
 80053d8:	e006      	b.n	80053e8 <HAL_GPIO_Init+0x228>
 80053da:	2303      	movs	r3, #3
 80053dc:	e004      	b.n	80053e8 <HAL_GPIO_Init+0x228>
 80053de:	2302      	movs	r3, #2
 80053e0:	e002      	b.n	80053e8 <HAL_GPIO_Init+0x228>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <HAL_GPIO_Init+0x228>
 80053e6:	2300      	movs	r3, #0
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	f002 0203 	and.w	r2, r2, #3
 80053ee:	0092      	lsls	r2, r2, #2
 80053f0:	4093      	lsls	r3, r2
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053f8:	4935      	ldr	r1, [pc, #212]	; (80054d0 <HAL_GPIO_Init+0x310>)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	089b      	lsrs	r3, r3, #2
 80053fe:	3302      	adds	r3, #2
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005406:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <HAL_GPIO_Init+0x334>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800542a:	4a32      	ldr	r2, [pc, #200]	; (80054f4 <HAL_GPIO_Init+0x334>)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005430:	4b30      	ldr	r3, [pc, #192]	; (80054f4 <HAL_GPIO_Init+0x334>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005454:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <HAL_GPIO_Init+0x334>)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800545a:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <HAL_GPIO_Init+0x334>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800547e:	4a1d      	ldr	r2, [pc, #116]	; (80054f4 <HAL_GPIO_Init+0x334>)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005484:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <HAL_GPIO_Init+0x334>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	43db      	mvns	r3, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054a8:	4a12      	ldr	r2, [pc, #72]	; (80054f4 <HAL_GPIO_Init+0x334>)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	3301      	adds	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	2b0f      	cmp	r3, #15
 80054b8:	f67f ae90 	bls.w	80051dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	3724      	adds	r7, #36	; 0x24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40023800 	.word	0x40023800
 80054d0:	40013800 	.word	0x40013800
 80054d4:	40020000 	.word	0x40020000
 80054d8:	40020400 	.word	0x40020400
 80054dc:	40020800 	.word	0x40020800
 80054e0:	40020c00 	.word	0x40020c00
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40021400 	.word	0x40021400
 80054ec:	40021800 	.word	0x40021800
 80054f0:	40021c00 	.word	0x40021c00
 80054f4:	40013c00 	.word	0x40013c00

080054f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	887b      	ldrh	r3, [r7, #2]
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
 8005514:	e001      	b.n	800551a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	807b      	strh	r3, [r7, #2]
 8005534:	4613      	mov	r3, r2
 8005536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005538:	787b      	ldrb	r3, [r7, #1]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800553e:	887a      	ldrh	r2, [r7, #2]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005544:	e003      	b.n	800554e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005546:	887b      	ldrh	r3, [r7, #2]
 8005548:	041a      	lsls	r2, r3, #16
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	619a      	str	r2, [r3, #24]
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e12b      	b.n	80057c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc f87c 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055c0:	f001 fbd8 	bl	8006d74 <HAL_RCC_GetPCLK1Freq>
 80055c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	4a81      	ldr	r2, [pc, #516]	; (80057d0 <HAL_I2C_Init+0x274>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d807      	bhi.n	80055e0 <HAL_I2C_Init+0x84>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a80      	ldr	r2, [pc, #512]	; (80057d4 <HAL_I2C_Init+0x278>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bf94      	ite	ls
 80055d8:	2301      	movls	r3, #1
 80055da:	2300      	movhi	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e006      	b.n	80055ee <HAL_I2C_Init+0x92>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a7d      	ldr	r2, [pc, #500]	; (80057d8 <HAL_I2C_Init+0x27c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	bf94      	ite	ls
 80055e8:	2301      	movls	r3, #1
 80055ea:	2300      	movhi	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e0e7      	b.n	80057c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4a78      	ldr	r2, [pc, #480]	; (80057dc <HAL_I2C_Init+0x280>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	0c9b      	lsrs	r3, r3, #18
 8005600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4a6a      	ldr	r2, [pc, #424]	; (80057d0 <HAL_I2C_Init+0x274>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d802      	bhi.n	8005630 <HAL_I2C_Init+0xd4>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	3301      	adds	r3, #1
 800562e:	e009      	b.n	8005644 <HAL_I2C_Init+0xe8>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	4a69      	ldr	r2, [pc, #420]	; (80057e0 <HAL_I2C_Init+0x284>)
 800563c:	fba2 2303 	umull	r2, r3, r2, r3
 8005640:	099b      	lsrs	r3, r3, #6
 8005642:	3301      	adds	r3, #1
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	430b      	orrs	r3, r1
 800564a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	495c      	ldr	r1, [pc, #368]	; (80057d0 <HAL_I2C_Init+0x274>)
 8005660:	428b      	cmp	r3, r1
 8005662:	d819      	bhi.n	8005698 <HAL_I2C_Init+0x13c>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	1e59      	subs	r1, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005672:	1c59      	adds	r1, r3, #1
 8005674:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005678:	400b      	ands	r3, r1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_I2C_Init+0x138>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1e59      	subs	r1, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	fbb1 f3f3 	udiv	r3, r1, r3
 800568c:	3301      	adds	r3, #1
 800568e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005692:	e051      	b.n	8005738 <HAL_I2C_Init+0x1dc>
 8005694:	2304      	movs	r3, #4
 8005696:	e04f      	b.n	8005738 <HAL_I2C_Init+0x1dc>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d111      	bne.n	80056c4 <HAL_I2C_Init+0x168>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1e58      	subs	r0, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	440b      	add	r3, r1
 80056ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b2:	3301      	adds	r3, #1
 80056b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf0c      	ite	eq
 80056bc:	2301      	moveq	r3, #1
 80056be:	2300      	movne	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e012      	b.n	80056ea <HAL_I2C_Init+0x18e>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	1e58      	subs	r0, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6859      	ldr	r1, [r3, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	0099      	lsls	r1, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056da:	3301      	adds	r3, #1
 80056dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_I2C_Init+0x196>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e022      	b.n	8005738 <HAL_I2C_Init+0x1dc>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10e      	bne.n	8005718 <HAL_I2C_Init+0x1bc>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1e58      	subs	r0, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6859      	ldr	r1, [r3, #4]
 8005702:	460b      	mov	r3, r1
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	440b      	add	r3, r1
 8005708:	fbb0 f3f3 	udiv	r3, r0, r3
 800570c:	3301      	adds	r3, #1
 800570e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005716:	e00f      	b.n	8005738 <HAL_I2C_Init+0x1dc>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	1e58      	subs	r0, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6859      	ldr	r1, [r3, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	0099      	lsls	r1, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	fbb0 f3f3 	udiv	r3, r0, r3
 800572e:	3301      	adds	r3, #1
 8005730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	6809      	ldr	r1, [r1, #0]
 800573c:	4313      	orrs	r3, r2
 800573e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69da      	ldr	r2, [r3, #28]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6911      	ldr	r1, [r2, #16]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68d2      	ldr	r2, [r2, #12]
 8005772:	4311      	orrs	r1, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	430b      	orrs	r3, r1
 800577a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	000186a0 	.word	0x000186a0
 80057d4:	001e847f 	.word	0x001e847f
 80057d8:	003d08ff 	.word	0x003d08ff
 80057dc:	431bde83 	.word	0x431bde83
 80057e0:	10624dd3 	.word	0x10624dd3

080057e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	4608      	mov	r0, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	461a      	mov	r2, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	817b      	strh	r3, [r7, #10]
 80057f6:	460b      	mov	r3, r1
 80057f8:	813b      	strh	r3, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057fe:	f7fe fe51 	bl	80044a4 <HAL_GetTick>
 8005802:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b20      	cmp	r3, #32
 800580e:	f040 80d9 	bne.w	80059c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	2319      	movs	r3, #25
 8005818:	2201      	movs	r2, #1
 800581a:	496d      	ldr	r1, [pc, #436]	; (80059d0 <HAL_I2C_Mem_Write+0x1ec>)
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fc7f 	bl	8006120 <I2C_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005828:	2302      	movs	r3, #2
 800582a:	e0cc      	b.n	80059c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_I2C_Mem_Write+0x56>
 8005836:	2302      	movs	r3, #2
 8005838:	e0c5      	b.n	80059c6 <HAL_I2C_Mem_Write+0x1e2>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b01      	cmp	r3, #1
 800584e:	d007      	beq.n	8005860 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800586e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2221      	movs	r2, #33	; 0x21
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2240      	movs	r2, #64	; 0x40
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a3a      	ldr	r2, [r7, #32]
 800588a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005890:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4a4d      	ldr	r2, [pc, #308]	; (80059d4 <HAL_I2C_Mem_Write+0x1f0>)
 80058a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058a2:	88f8      	ldrh	r0, [r7, #6]
 80058a4:	893a      	ldrh	r2, [r7, #8]
 80058a6:	8979      	ldrh	r1, [r7, #10]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	9301      	str	r3, [sp, #4]
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	4603      	mov	r3, r0
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fab6 	bl	8005e24 <I2C_RequestMemoryWrite>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d052      	beq.n	8005964 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e081      	b.n	80059c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fd00 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00d      	beq.n	80058ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d107      	bne.n	80058ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e06b      	b.n	80059c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d11b      	bne.n	8005964 <HAL_I2C_Mem_Write+0x180>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005930:	2b00      	cmp	r3, #0
 8005932:	d017      	beq.n	8005964 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1aa      	bne.n	80058c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fcec 	bl	800634e <I2C_WaitOnBTFFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00d      	beq.n	8005998 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	2b04      	cmp	r3, #4
 8005982:	d107      	bne.n	8005994 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005992:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e016      	b.n	80059c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	e000      	b.n	80059c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
  }
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	00100002 	.word	0x00100002
 80059d4:	ffff0000 	.word	0xffff0000

080059d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	; 0x30
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	461a      	mov	r2, r3
 80059e6:	4603      	mov	r3, r0
 80059e8:	817b      	strh	r3, [r7, #10]
 80059ea:	460b      	mov	r3, r1
 80059ec:	813b      	strh	r3, [r7, #8]
 80059ee:	4613      	mov	r3, r2
 80059f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059f2:	f7fe fd57 	bl	80044a4 <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	f040 8208 	bne.w	8005e16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	2319      	movs	r3, #25
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	497b      	ldr	r1, [pc, #492]	; (8005bfc <HAL_I2C_Mem_Read+0x224>)
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fb85 	bl	8006120 <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e1fb      	b.n	8005e18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_I2C_Mem_Read+0x56>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e1f4      	b.n	8005e18 <HAL_I2C_Mem_Read+0x440>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d007      	beq.n	8005a54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2222      	movs	r2, #34	; 0x22
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a5b      	ldr	r2, [pc, #364]	; (8005c00 <HAL_I2C_Mem_Read+0x228>)
 8005a94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a96:	88f8      	ldrh	r0, [r7, #6]
 8005a98:	893a      	ldrh	r2, [r7, #8]
 8005a9a:	8979      	ldrh	r1, [r7, #10]
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fa52 	bl	8005f50 <I2C_RequestMemoryRead>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e1b0      	b.n	8005e18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d113      	bne.n	8005ae6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005abe:	2300      	movs	r3, #0
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	623b      	str	r3, [r7, #32]
 8005ad2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e184      	b.n	8005df0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d11b      	bne.n	8005b26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	e164      	b.n	8005df0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d11b      	bne.n	8005b66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	e144      	b.n	8005df0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b7c:	e138      	b.n	8005df0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	f200 80f1 	bhi.w	8005d6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d123      	bne.n	8005bd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 fc1b 	bl	80063d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e139      	b.n	8005e18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bd6:	e10b      	b.n	8005df0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d14e      	bne.n	8005c7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	2200      	movs	r2, #0
 8005be8:	4906      	ldr	r1, [pc, #24]	; (8005c04 <HAL_I2C_Mem_Read+0x22c>)
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fa98 	bl	8006120 <I2C_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d008      	beq.n	8005c08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e10e      	b.n	8005e18 <HAL_I2C_Mem_Read+0x440>
 8005bfa:	bf00      	nop
 8005bfc:	00100002 	.word	0x00100002
 8005c00:	ffff0000 	.word	0xffff0000
 8005c04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c7c:	e0b8      	b.n	8005df0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	2200      	movs	r2, #0
 8005c86:	4966      	ldr	r1, [pc, #408]	; (8005e20 <HAL_I2C_Mem_Read+0x448>)
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fa49 	bl	8006120 <I2C_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0bf      	b.n	8005e18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	494f      	ldr	r1, [pc, #316]	; (8005e20 <HAL_I2C_Mem_Read+0x448>)
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fa1b 	bl	8006120 <I2C_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e091      	b.n	8005e18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d68:	e042      	b.n	8005df0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fb2e 	bl	80063d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e04c      	b.n	8005e18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d118      	bne.n	8005df0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f47f aec2 	bne.w	8005b7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	e000      	b.n	8005e18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e16:	2302      	movs	r3, #2
  }
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3728      	adds	r7, #40	; 0x28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	00010004 	.word	0x00010004

08005e24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	817b      	strh	r3, [r7, #10]
 8005e36:	460b      	mov	r3, r1
 8005e38:	813b      	strh	r3, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f960 	bl	8006120 <I2C_WaitOnFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e74:	d103      	bne.n	8005e7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e05f      	b.n	8005f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e82:	897b      	ldrh	r3, [r7, #10]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	6a3a      	ldr	r2, [r7, #32]
 8005e96:	492d      	ldr	r1, [pc, #180]	; (8005f4c <I2C_RequestMemoryWrite+0x128>)
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f998 	bl	80061ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e04c      	b.n	8005f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec0:	6a39      	ldr	r1, [r7, #32]
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 fa02 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00d      	beq.n	8005eea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d107      	bne.n	8005ee6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e02b      	b.n	8005f42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d105      	bne.n	8005efc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ef0:	893b      	ldrh	r3, [r7, #8]
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]
 8005efa:	e021      	b.n	8005f40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005efc:	893b      	ldrh	r3, [r7, #8]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0c:	6a39      	ldr	r1, [r7, #32]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 f9dc 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00d      	beq.n	8005f36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d107      	bne.n	8005f32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e005      	b.n	8005f42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f36:	893b      	ldrh	r3, [r7, #8]
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	00010002 	.word	0x00010002

08005f50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	817b      	strh	r3, [r7, #10]
 8005f62:	460b      	mov	r3, r1
 8005f64:	813b      	strh	r3, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f8c2 	bl	8006120 <I2C_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb0:	d103      	bne.n	8005fba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e0aa      	b.n	8006114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fbe:	897b      	ldrh	r3, [r7, #10]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	4952      	ldr	r1, [pc, #328]	; (800611c <I2C_RequestMemoryRead+0x1cc>)
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f8fa 	bl	80061ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e097      	b.n	8006114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	6a39      	ldr	r1, [r7, #32]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f964 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	2b04      	cmp	r3, #4
 8006010:	d107      	bne.n	8006022 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e076      	b.n	8006114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d105      	bne.n	8006038 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800602c:	893b      	ldrh	r3, [r7, #8]
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	611a      	str	r2, [r3, #16]
 8006036:	e021      	b.n	800607c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006038:	893b      	ldrh	r3, [r7, #8]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	b29b      	uxth	r3, r3
 800603e:	b2da      	uxtb	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006048:	6a39      	ldr	r1, [r7, #32]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f93e 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00d      	beq.n	8006072 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2b04      	cmp	r3, #4
 800605c:	d107      	bne.n	800606e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e050      	b.n	8006114 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006072:	893b      	ldrh	r3, [r7, #8]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800607c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607e:	6a39      	ldr	r1, [r7, #32]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f923 	bl	80062cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00d      	beq.n	80060a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	2b04      	cmp	r3, #4
 8006092:	d107      	bne.n	80060a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e035      	b.n	8006114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	2200      	movs	r2, #0
 80060c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f82b 	bl	8006120 <I2C_WaitOnFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060de:	d103      	bne.n	80060e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e013      	b.n	8006114 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060ec:	897b      	ldrh	r3, [r7, #10]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	6a3a      	ldr	r2, [r7, #32]
 8006100:	4906      	ldr	r1, [pc, #24]	; (800611c <I2C_RequestMemoryRead+0x1cc>)
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f863 	bl	80061ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	00010002 	.word	0x00010002

08006120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006130:	e025      	b.n	800617e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d021      	beq.n	800617e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613a:	f7fe f9b3 	bl	80044a4 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d116      	bne.n	800617e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	f043 0220 	orr.w	r2, r3, #32
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e023      	b.n	80061c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	0c1b      	lsrs	r3, r3, #16
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b01      	cmp	r3, #1
 8006186:	d10d      	bne.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	43da      	mvns	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4013      	ands	r3, r2
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	bf0c      	ite	eq
 800619a:	2301      	moveq	r3, #1
 800619c:	2300      	movne	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	e00c      	b.n	80061be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	43da      	mvns	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4013      	ands	r3, r2
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bf0c      	ite	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	2300      	movne	r3, #0
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d0b6      	beq.n	8006132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061dc:	e051      	b.n	8006282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ec:	d123      	bne.n	8006236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006206:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e046      	b.n	80062c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623c:	d021      	beq.n	8006282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623e:	f7fe f931 	bl	80044a4 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	429a      	cmp	r2, r3
 800624c:	d302      	bcc.n	8006254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d116      	bne.n	8006282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2220      	movs	r2, #32
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f043 0220 	orr.w	r2, r3, #32
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e020      	b.n	80062c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	0c1b      	lsrs	r3, r3, #16
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d10c      	bne.n	80062a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	43da      	mvns	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4013      	ands	r3, r2
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e00b      	b.n	80062be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	43da      	mvns	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4013      	ands	r3, r2
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d18d      	bne.n	80061de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062d8:	e02d      	b.n	8006336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 f8ce 	bl	800647c <I2C_IsAcknowledgeFailed>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e02d      	b.n	8006346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f0:	d021      	beq.n	8006336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f2:	f7fe f8d7 	bl	80044a4 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d302      	bcc.n	8006308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d116      	bne.n	8006336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e007      	b.n	8006346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006340:	2b80      	cmp	r3, #128	; 0x80
 8006342:	d1ca      	bne.n	80062da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800635a:	e02d      	b.n	80063b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f88d 	bl	800647c <I2C_IsAcknowledgeFailed>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e02d      	b.n	80063c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006372:	d021      	beq.n	80063b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006374:	f7fe f896 	bl	80044a4 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	429a      	cmp	r2, r3
 8006382:	d302      	bcc.n	800638a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d116      	bne.n	80063b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	f043 0220 	orr.w	r2, r3, #32
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e007      	b.n	80063c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d1ca      	bne.n	800635c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063dc:	e042      	b.n	8006464 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d119      	bne.n	8006420 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0210 	mvn.w	r2, #16
 80063f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e029      	b.n	8006474 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006420:	f7fe f840 	bl	80044a4 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	429a      	cmp	r2, r3
 800642e:	d302      	bcc.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d116      	bne.n	8006464 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	f043 0220 	orr.w	r2, r3, #32
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e007      	b.n	8006474 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b40      	cmp	r3, #64	; 0x40
 8006470:	d1b5      	bne.n	80063de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006492:	d11b      	bne.n	80064cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800649c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	f043 0204 	orr.w	r2, r3, #4
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e264      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d075      	beq.n	80065e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064fa:	4ba3      	ldr	r3, [pc, #652]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 030c 	and.w	r3, r3, #12
 8006502:	2b04      	cmp	r3, #4
 8006504:	d00c      	beq.n	8006520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006506:	4ba0      	ldr	r3, [pc, #640]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800650e:	2b08      	cmp	r3, #8
 8006510:	d112      	bne.n	8006538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006512:	4b9d      	ldr	r3, [pc, #628]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800651a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800651e:	d10b      	bne.n	8006538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006520:	4b99      	ldr	r3, [pc, #612]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d05b      	beq.n	80065e4 <HAL_RCC_OscConfig+0x108>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d157      	bne.n	80065e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e23f      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006540:	d106      	bne.n	8006550 <HAL_RCC_OscConfig+0x74>
 8006542:	4b91      	ldr	r3, [pc, #580]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a90      	ldr	r2, [pc, #576]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	e01d      	b.n	800658c <HAL_RCC_OscConfig+0xb0>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006558:	d10c      	bne.n	8006574 <HAL_RCC_OscConfig+0x98>
 800655a:	4b8b      	ldr	r3, [pc, #556]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a8a      	ldr	r2, [pc, #552]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	4b88      	ldr	r3, [pc, #544]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a87      	ldr	r2, [pc, #540]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800656c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e00b      	b.n	800658c <HAL_RCC_OscConfig+0xb0>
 8006574:	4b84      	ldr	r3, [pc, #528]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a83      	ldr	r2, [pc, #524]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800657a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	4b81      	ldr	r3, [pc, #516]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a80      	ldr	r2, [pc, #512]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800658a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006594:	f7fd ff86 	bl	80044a4 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800659c:	f7fd ff82 	bl	80044a4 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b64      	cmp	r3, #100	; 0x64
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e204      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ae:	4b76      	ldr	r3, [pc, #472]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0xc0>
 80065ba:	e014      	b.n	80065e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fd ff72 	bl	80044a4 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fd ff6e 	bl	80044a4 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b64      	cmp	r3, #100	; 0x64
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e1f0      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065d6:	4b6c      	ldr	r3, [pc, #432]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0xe8>
 80065e2:	e000      	b.n	80065e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d063      	beq.n	80066ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065f2:	4b65      	ldr	r3, [pc, #404]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 030c 	and.w	r3, r3, #12
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065fe:	4b62      	ldr	r3, [pc, #392]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006606:	2b08      	cmp	r3, #8
 8006608:	d11c      	bne.n	8006644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800660a:	4b5f      	ldr	r3, [pc, #380]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d116      	bne.n	8006644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006616:	4b5c      	ldr	r3, [pc, #368]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <HAL_RCC_OscConfig+0x152>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d001      	beq.n	800662e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e1c4      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800662e:	4b56      	ldr	r3, [pc, #344]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	4952      	ldr	r1, [pc, #328]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800663e:	4313      	orrs	r3, r2
 8006640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006642:	e03a      	b.n	80066ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d020      	beq.n	800668e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800664c:	4b4f      	ldr	r3, [pc, #316]	; (800678c <HAL_RCC_OscConfig+0x2b0>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006652:	f7fd ff27 	bl	80044a4 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800665a:	f7fd ff23 	bl	80044a4 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e1a5      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800666c:	4b46      	ldr	r3, [pc, #280]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006678:	4b43      	ldr	r3, [pc, #268]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	4940      	ldr	r1, [pc, #256]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006688:	4313      	orrs	r3, r2
 800668a:	600b      	str	r3, [r1, #0]
 800668c:	e015      	b.n	80066ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800668e:	4b3f      	ldr	r3, [pc, #252]	; (800678c <HAL_RCC_OscConfig+0x2b0>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fd ff06 	bl	80044a4 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800669c:	f7fd ff02 	bl	80044a4 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e184      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ae:	4b36      	ldr	r3, [pc, #216]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d030      	beq.n	8006728 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066ce:	4b30      	ldr	r3, [pc, #192]	; (8006790 <HAL_RCC_OscConfig+0x2b4>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d4:	f7fd fee6 	bl	80044a4 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066dc:	f7fd fee2 	bl	80044a4 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e164      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ee:	4b26      	ldr	r3, [pc, #152]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 80066f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCC_OscConfig+0x200>
 80066fa:	e015      	b.n	8006728 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066fc:	4b24      	ldr	r3, [pc, #144]	; (8006790 <HAL_RCC_OscConfig+0x2b4>)
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006702:	f7fd fecf 	bl	80044a4 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800670a:	f7fd fecb 	bl	80044a4 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e14d      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800671c:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800671e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f0      	bne.n	800670a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80a0 	beq.w	8006876 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006736:	2300      	movs	r3, #0
 8006738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800673a:	4b13      	ldr	r3, [pc, #76]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10f      	bne.n	8006766 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006754:	6413      	str	r3, [r2, #64]	; 0x40
 8006756:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <HAL_RCC_OscConfig+0x2ac>)
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006762:	2301      	movs	r3, #1
 8006764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <HAL_RCC_OscConfig+0x2b8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d121      	bne.n	80067b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006772:	4b08      	ldr	r3, [pc, #32]	; (8006794 <HAL_RCC_OscConfig+0x2b8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a07      	ldr	r2, [pc, #28]	; (8006794 <HAL_RCC_OscConfig+0x2b8>)
 8006778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800677e:	f7fd fe91 	bl	80044a4 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006784:	e011      	b.n	80067aa <HAL_RCC_OscConfig+0x2ce>
 8006786:	bf00      	nop
 8006788:	40023800 	.word	0x40023800
 800678c:	42470000 	.word	0x42470000
 8006790:	42470e80 	.word	0x42470e80
 8006794:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006798:	f7fd fe84 	bl	80044a4 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e106      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067aa:	4b85      	ldr	r3, [pc, #532]	; (80069c0 <HAL_RCC_OscConfig+0x4e4>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f0      	beq.n	8006798 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d106      	bne.n	80067cc <HAL_RCC_OscConfig+0x2f0>
 80067be:	4b81      	ldr	r3, [pc, #516]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80067c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c2:	4a80      	ldr	r2, [pc, #512]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ca:	e01c      	b.n	8006806 <HAL_RCC_OscConfig+0x32a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b05      	cmp	r3, #5
 80067d2:	d10c      	bne.n	80067ee <HAL_RCC_OscConfig+0x312>
 80067d4:	4b7b      	ldr	r3, [pc, #492]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80067d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d8:	4a7a      	ldr	r2, [pc, #488]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80067da:	f043 0304 	orr.w	r3, r3, #4
 80067de:	6713      	str	r3, [r2, #112]	; 0x70
 80067e0:	4b78      	ldr	r3, [pc, #480]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a77      	ldr	r2, [pc, #476]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	6713      	str	r3, [r2, #112]	; 0x70
 80067ec:	e00b      	b.n	8006806 <HAL_RCC_OscConfig+0x32a>
 80067ee:	4b75      	ldr	r3, [pc, #468]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	4a74      	ldr	r2, [pc, #464]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80067f4:	f023 0301 	bic.w	r3, r3, #1
 80067f8:	6713      	str	r3, [r2, #112]	; 0x70
 80067fa:	4b72      	ldr	r3, [pc, #456]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	4a71      	ldr	r2, [pc, #452]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 8006800:	f023 0304 	bic.w	r3, r3, #4
 8006804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d015      	beq.n	800683a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800680e:	f7fd fe49 	bl	80044a4 <HAL_GetTick>
 8006812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006814:	e00a      	b.n	800682c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006816:	f7fd fe45 	bl	80044a4 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	f241 3288 	movw	r2, #5000	; 0x1388
 8006824:	4293      	cmp	r3, r2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e0c5      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800682c:	4b65      	ldr	r3, [pc, #404]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 800682e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0ee      	beq.n	8006816 <HAL_RCC_OscConfig+0x33a>
 8006838:	e014      	b.n	8006864 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800683a:	f7fd fe33 	bl	80044a4 <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006840:	e00a      	b.n	8006858 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006842:	f7fd fe2f 	bl	80044a4 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006850:	4293      	cmp	r3, r2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e0af      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006858:	4b5a      	ldr	r3, [pc, #360]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 800685a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1ee      	bne.n	8006842 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d105      	bne.n	8006876 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800686a:	4b56      	ldr	r3, [pc, #344]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	4a55      	ldr	r2, [pc, #340]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 8006870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 809b 	beq.w	80069b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006880:	4b50      	ldr	r3, [pc, #320]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b08      	cmp	r3, #8
 800688a:	d05c      	beq.n	8006946 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d141      	bne.n	8006918 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006894:	4b4c      	ldr	r3, [pc, #304]	; (80069c8 <HAL_RCC_OscConfig+0x4ec>)
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689a:	f7fd fe03 	bl	80044a4 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068a2:	f7fd fdff 	bl	80044a4 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e081      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068b4:	4b43      	ldr	r3, [pc, #268]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1f0      	bne.n	80068a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	019b      	lsls	r3, r3, #6
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	3b01      	subs	r3, #1
 80068da:	041b      	lsls	r3, r3, #16
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	061b      	lsls	r3, r3, #24
 80068e4:	4937      	ldr	r1, [pc, #220]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068ea:	4b37      	ldr	r3, [pc, #220]	; (80069c8 <HAL_RCC_OscConfig+0x4ec>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f0:	f7fd fdd8 	bl	80044a4 <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068f6:	e008      	b.n	800690a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068f8:	f7fd fdd4 	bl	80044a4 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e056      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800690a:	4b2e      	ldr	r3, [pc, #184]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0f0      	beq.n	80068f8 <HAL_RCC_OscConfig+0x41c>
 8006916:	e04e      	b.n	80069b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006918:	4b2b      	ldr	r3, [pc, #172]	; (80069c8 <HAL_RCC_OscConfig+0x4ec>)
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691e:	f7fd fdc1 	bl	80044a4 <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006926:	f7fd fdbd 	bl	80044a4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e03f      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006938:	4b22      	ldr	r3, [pc, #136]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1f0      	bne.n	8006926 <HAL_RCC_OscConfig+0x44a>
 8006944:	e037      	b.n	80069b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e032      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <HAL_RCC_OscConfig+0x4e8>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d028      	beq.n	80069b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800696a:	429a      	cmp	r2, r3
 800696c:	d121      	bne.n	80069b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006978:	429a      	cmp	r2, r3
 800697a:	d11a      	bne.n	80069b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006982:	4013      	ands	r3, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006988:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800698a:	4293      	cmp	r3, r2
 800698c:	d111      	bne.n	80069b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	3b01      	subs	r3, #1
 800699c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800699e:	429a      	cmp	r2, r3
 80069a0:	d107      	bne.n	80069b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d001      	beq.n	80069b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40007000 	.word	0x40007000
 80069c4:	40023800 	.word	0x40023800
 80069c8:	42470060 	.word	0x42470060

080069cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0cc      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069e0:	4b68      	ldr	r3, [pc, #416]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d90c      	bls.n	8006a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ee:	4b65      	ldr	r3, [pc, #404]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f6:	4b63      	ldr	r3, [pc, #396]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0b8      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d020      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a20:	4b59      	ldr	r3, [pc, #356]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	4a58      	ldr	r2, [pc, #352]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a38:	4b53      	ldr	r3, [pc, #332]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4a52      	ldr	r2, [pc, #328]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a44:	4b50      	ldr	r3, [pc, #320]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	494d      	ldr	r1, [pc, #308]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d044      	beq.n	8006aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d107      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6a:	4b47      	ldr	r3, [pc, #284]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d119      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e07f      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d003      	beq.n	8006a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d107      	bne.n	8006a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a8a:	4b3f      	ldr	r3, [pc, #252]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e06f      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a9a:	4b3b      	ldr	r3, [pc, #236]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e067      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aaa:	4b37      	ldr	r3, [pc, #220]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f023 0203 	bic.w	r2, r3, #3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4934      	ldr	r1, [pc, #208]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006abc:	f7fd fcf2 	bl	80044a4 <HAL_GetTick>
 8006ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ac2:	e00a      	b.n	8006ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac4:	f7fd fcee 	bl	80044a4 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e04f      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ada:	4b2b      	ldr	r3, [pc, #172]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 020c 	and.w	r2, r3, #12
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d1eb      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006aec:	4b25      	ldr	r3, [pc, #148]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d20c      	bcs.n	8006b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006afa:	4b22      	ldr	r3, [pc, #136]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b02:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <HAL_RCC_ClockConfig+0x1b8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d001      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e032      	b.n	8006b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d008      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b20:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	4916      	ldr	r1, [pc, #88]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b3e:	4b12      	ldr	r3, [pc, #72]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	490e      	ldr	r1, [pc, #56]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b52:	f000 f821 	bl	8006b98 <HAL_RCC_GetSysClockFreq>
 8006b56:	4602      	mov	r2, r0
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	091b      	lsrs	r3, r3, #4
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	490a      	ldr	r1, [pc, #40]	; (8006b8c <HAL_RCC_ClockConfig+0x1c0>)
 8006b64:	5ccb      	ldrb	r3, [r1, r3]
 8006b66:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6a:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b6e:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fd fc52 	bl	800441c <HAL_InitTick>

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40023c00 	.word	0x40023c00
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	0800c824 	.word	0x0800c824
 8006b90:	20000008 	.word	0x20000008
 8006b94:	20000044 	.word	0x20000044

08006b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	607b      	str	r3, [r7, #4]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bb0:	4b67      	ldr	r3, [pc, #412]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 030c 	and.w	r3, r3, #12
 8006bb8:	2b08      	cmp	r3, #8
 8006bba:	d00d      	beq.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	f200 80bd 	bhi.w	8006d3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_RCC_GetSysClockFreq+0x34>
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d003      	beq.n	8006bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006bca:	e0b7      	b.n	8006d3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bcc:	4b61      	ldr	r3, [pc, #388]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006bce:	60bb      	str	r3, [r7, #8]
       break;
 8006bd0:	e0b7      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bd2:	4b61      	ldr	r3, [pc, #388]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006bd4:	60bb      	str	r3, [r7, #8]
      break;
 8006bd6:	e0b4      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bd8:	4b5d      	ldr	r3, [pc, #372]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006be0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006be2:	4b5b      	ldr	r3, [pc, #364]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d04d      	beq.n	8006c8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bee:	4b58      	ldr	r3, [pc, #352]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	099b      	lsrs	r3, r3, #6
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f04f 0300 	mov.w	r3, #0
 8006bfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006bfe:	f04f 0100 	mov.w	r1, #0
 8006c02:	ea02 0800 	and.w	r8, r2, r0
 8006c06:	ea03 0901 	and.w	r9, r3, r1
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	014b      	lsls	r3, r1, #5
 8006c18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c1c:	0142      	lsls	r2, r0, #5
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	ebb0 0008 	subs.w	r0, r0, r8
 8006c26:	eb61 0109 	sbc.w	r1, r1, r9
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	018b      	lsls	r3, r1, #6
 8006c34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c38:	0182      	lsls	r2, r0, #6
 8006c3a:	1a12      	subs	r2, r2, r0
 8006c3c:	eb63 0301 	sbc.w	r3, r3, r1
 8006c40:	f04f 0000 	mov.w	r0, #0
 8006c44:	f04f 0100 	mov.w	r1, #0
 8006c48:	00d9      	lsls	r1, r3, #3
 8006c4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c4e:	00d0      	lsls	r0, r2, #3
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	eb12 0208 	adds.w	r2, r2, r8
 8006c58:	eb43 0309 	adc.w	r3, r3, r9
 8006c5c:	f04f 0000 	mov.w	r0, #0
 8006c60:	f04f 0100 	mov.w	r1, #0
 8006c64:	0259      	lsls	r1, r3, #9
 8006c66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006c6a:	0250      	lsls	r0, r2, #9
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4610      	mov	r0, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	f7f9 ff84 	bl	8000b88 <__aeabi_uldivmod>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4613      	mov	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e04a      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c8a:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	099b      	lsrs	r3, r3, #6
 8006c90:	461a      	mov	r2, r3
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c9a:	f04f 0100 	mov.w	r1, #0
 8006c9e:	ea02 0400 	and.w	r4, r2, r0
 8006ca2:	ea03 0501 	and.w	r5, r3, r1
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	014b      	lsls	r3, r1, #5
 8006cb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006cb8:	0142      	lsls	r2, r0, #5
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	1b00      	subs	r0, r0, r4
 8006cc0:	eb61 0105 	sbc.w	r1, r1, r5
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	018b      	lsls	r3, r1, #6
 8006cce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006cd2:	0182      	lsls	r2, r0, #6
 8006cd4:	1a12      	subs	r2, r2, r0
 8006cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8006cda:	f04f 0000 	mov.w	r0, #0
 8006cde:	f04f 0100 	mov.w	r1, #0
 8006ce2:	00d9      	lsls	r1, r3, #3
 8006ce4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ce8:	00d0      	lsls	r0, r2, #3
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	1912      	adds	r2, r2, r4
 8006cf0:	eb45 0303 	adc.w	r3, r5, r3
 8006cf4:	f04f 0000 	mov.w	r0, #0
 8006cf8:	f04f 0100 	mov.w	r1, #0
 8006cfc:	0299      	lsls	r1, r3, #10
 8006cfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006d02:	0290      	lsls	r0, r2, #10
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	f7f9 ff38 	bl	8000b88 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	0c1b      	lsrs	r3, r3, #16
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d38:	60bb      	str	r3, [r7, #8]
      break;
 8006d3a:	e002      	b.n	8006d42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006d3e:	60bb      	str	r3, [r7, #8]
      break;
 8006d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d42:	68bb      	ldr	r3, [r7, #8]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006d4e:	bf00      	nop
 8006d50:	40023800 	.word	0x40023800
 8006d54:	00f42400 	.word	0x00f42400
 8006d58:	007a1200 	.word	0x007a1200

08006d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d60:	4b03      	ldr	r3, [pc, #12]	; (8006d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d62:	681b      	ldr	r3, [r3, #0]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	20000008 	.word	0x20000008

08006d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d78:	f7ff fff0 	bl	8006d5c <HAL_RCC_GetHCLKFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	0a9b      	lsrs	r3, r3, #10
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	4903      	ldr	r1, [pc, #12]	; (8006d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40023800 	.word	0x40023800
 8006d98:	0800c834 	.word	0x0800c834

08006d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e07b      	b.n	8006ea6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d108      	bne.n	8006dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dbe:	d009      	beq.n	8006dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	61da      	str	r2, [r3, #28]
 8006dc6:	e005      	b.n	8006dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fc f8e4 	bl	8002fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e58:	ea42 0103 	orr.w	r1, r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	0c1b      	lsrs	r3, r3, #16
 8006e72:	f003 0104 	and.w	r1, r3, #4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	f003 0210 	and.w	r2, r3, #16
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b088      	sub	sp, #32
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_SPI_Transmit+0x22>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e126      	b.n	800711e <HAL_SPI_Transmit+0x270>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed8:	f7fd fae4 	bl	80044a4 <HAL_GetTick>
 8006edc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d002      	beq.n	8006ef4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ef2:	e10b      	b.n	800710c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_SPI_Transmit+0x52>
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f04:	e102      	b.n	800710c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2203      	movs	r2, #3
 8006f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	88fa      	ldrh	r2, [r7, #6]
 8006f1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4c:	d10f      	bne.n	8006f6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d007      	beq.n	8006f8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f94:	d14b      	bne.n	800702e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_SPI_Transmit+0xf6>
 8006f9e:	8afb      	ldrh	r3, [r7, #22]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d13e      	bne.n	8007022 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa8:	881a      	ldrh	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	1c9a      	adds	r2, r3, #2
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fc8:	e02b      	b.n	8007022 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d112      	bne.n	8006ffe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	881a      	ldrh	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe8:	1c9a      	adds	r2, r3, #2
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ffc:	e011      	b.n	8007022 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ffe:	f7fd fa51 	bl	80044a4 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d803      	bhi.n	8007016 <HAL_SPI_Transmit+0x168>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d102      	bne.n	800701c <HAL_SPI_Transmit+0x16e>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d102      	bne.n	8007022 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007020:	e074      	b.n	800710c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1ce      	bne.n	8006fca <HAL_SPI_Transmit+0x11c>
 800702c:	e04c      	b.n	80070c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_SPI_Transmit+0x18e>
 8007036:	8afb      	ldrh	r3, [r7, #22]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d140      	bne.n	80070be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	330c      	adds	r3, #12
 8007046:	7812      	ldrb	r2, [r2, #0]
 8007048:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007062:	e02c      	b.n	80070be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b02      	cmp	r3, #2
 8007070:	d113      	bne.n	800709a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	86da      	strh	r2, [r3, #54]	; 0x36
 8007098:	e011      	b.n	80070be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800709a:	f7fd fa03 	bl	80044a4 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d803      	bhi.n	80070b2 <HAL_SPI_Transmit+0x204>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d102      	bne.n	80070b8 <HAL_SPI_Transmit+0x20a>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070bc:	e026      	b.n	800710c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1cd      	bne.n	8007064 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f8b3 	bl	8007238 <SPI_EndRxTxTransaction>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070e6:	2300      	movs	r3, #0
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	77fb      	strb	r3, [r7, #31]
 8007108:	e000      	b.n	800710c <HAL_SPI_Transmit+0x25e>
  }

error:
 800710a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800711c:	7ffb      	ldrb	r3, [r7, #31]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	4613      	mov	r3, r2
 8007136:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007138:	f7fd f9b4 	bl	80044a4 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4413      	add	r3, r2
 8007146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007148:	f7fd f9ac 	bl	80044a4 <HAL_GetTick>
 800714c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800714e:	4b39      	ldr	r3, [pc, #228]	; (8007234 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	015b      	lsls	r3, r3, #5
 8007154:	0d1b      	lsrs	r3, r3, #20
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800715e:	e054      	b.n	800720a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007166:	d050      	beq.n	800720a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007168:	f7fd f99c 	bl	80044a4 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	429a      	cmp	r2, r3
 8007176:	d902      	bls.n	800717e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d13d      	bne.n	80071fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800718c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007196:	d111      	bne.n	80071bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a0:	d004      	beq.n	80071ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071aa:	d107      	bne.n	80071bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c4:	d10f      	bne.n	80071e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e017      	b.n	800722a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3b01      	subs	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4013      	ands	r3, r2
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	429a      	cmp	r2, r3
 8007218:	bf0c      	ite	eq
 800721a:	2301      	moveq	r3, #1
 800721c:	2300      	movne	r3, #0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	429a      	cmp	r2, r3
 8007226:	d19b      	bne.n	8007160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3720      	adds	r7, #32
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000008 	.word	0x20000008

08007238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af02      	add	r7, sp, #8
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007244:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <SPI_EndRxTxTransaction+0x7c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <SPI_EndRxTxTransaction+0x80>)
 800724a:	fba2 2303 	umull	r2, r3, r2, r3
 800724e:	0d5b      	lsrs	r3, r3, #21
 8007250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007254:	fb02 f303 	mul.w	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007262:	d112      	bne.n	800728a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2200      	movs	r2, #0
 800726c:	2180      	movs	r1, #128	; 0x80
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff ff5a 	bl	8007128 <SPI_WaitFlagStateUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d016      	beq.n	80072a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727e:	f043 0220 	orr.w	r2, r3, #32
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e00f      	b.n	80072aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	3b01      	subs	r3, #1
 8007294:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a0:	2b80      	cmp	r3, #128	; 0x80
 80072a2:	d0f2      	beq.n	800728a <SPI_EndRxTxTransaction+0x52>
 80072a4:	e000      	b.n	80072a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80072a6:	bf00      	nop
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20000008 	.word	0x20000008
 80072b8:	165e9f81 	.word	0x165e9f81

080072bc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e034      	b.n	800733c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d106      	bne.n	80072ec <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f7fa f87c 	bl	80013e4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3308      	adds	r3, #8
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f000 ffda 	bl	80082b0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	461a      	mov	r2, r3
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	f001 f824 	bl	8008354 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6858      	ldr	r0, [r3, #4]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	f001 f859 	bl	80083d0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	6892      	ldr	r2, [r2, #8]
 8007326:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	6892      	ldr	r2, [r2, #8]
 8007332:	f041 0101 	orr.w	r1, r1, #1
 8007336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e041      	b.n	80073da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fc f896 	bl	800349c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f000 fc1a 	bl	8007bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d001      	beq.n	80073fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e046      	b.n	800748a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a23      	ldr	r2, [pc, #140]	; (8007498 <HAL_TIM_Base_Start+0xb4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d022      	beq.n	8007454 <HAL_TIM_Base_Start+0x70>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007416:	d01d      	beq.n	8007454 <HAL_TIM_Base_Start+0x70>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a1f      	ldr	r2, [pc, #124]	; (800749c <HAL_TIM_Base_Start+0xb8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d018      	beq.n	8007454 <HAL_TIM_Base_Start+0x70>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a1e      	ldr	r2, [pc, #120]	; (80074a0 <HAL_TIM_Base_Start+0xbc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d013      	beq.n	8007454 <HAL_TIM_Base_Start+0x70>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a1c      	ldr	r2, [pc, #112]	; (80074a4 <HAL_TIM_Base_Start+0xc0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d00e      	beq.n	8007454 <HAL_TIM_Base_Start+0x70>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a1b      	ldr	r2, [pc, #108]	; (80074a8 <HAL_TIM_Base_Start+0xc4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d009      	beq.n	8007454 <HAL_TIM_Base_Start+0x70>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a19      	ldr	r2, [pc, #100]	; (80074ac <HAL_TIM_Base_Start+0xc8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d004      	beq.n	8007454 <HAL_TIM_Base_Start+0x70>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a18      	ldr	r2, [pc, #96]	; (80074b0 <HAL_TIM_Base_Start+0xcc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d111      	bne.n	8007478 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b06      	cmp	r3, #6
 8007464:	d010      	beq.n	8007488 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0201 	orr.w	r2, r2, #1
 8007474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007476:	e007      	b.n	8007488 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0201 	orr.w	r2, r2, #1
 8007486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40010000 	.word	0x40010000
 800749c:	40000400 	.word	0x40000400
 80074a0:	40000800 	.word	0x40000800
 80074a4:	40000c00 	.word	0x40000c00
 80074a8:	40010400 	.word	0x40010400
 80074ac:	40014000 	.word	0x40014000
 80074b0:	40001800 	.word	0x40001800

080074b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d001      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e04e      	b.n	800756a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0201 	orr.w	r2, r2, #1
 80074e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a23      	ldr	r2, [pc, #140]	; (8007578 <HAL_TIM_Base_Start_IT+0xc4>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d022      	beq.n	8007534 <HAL_TIM_Base_Start_IT+0x80>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f6:	d01d      	beq.n	8007534 <HAL_TIM_Base_Start_IT+0x80>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a1f      	ldr	r2, [pc, #124]	; (800757c <HAL_TIM_Base_Start_IT+0xc8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d018      	beq.n	8007534 <HAL_TIM_Base_Start_IT+0x80>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a1e      	ldr	r2, [pc, #120]	; (8007580 <HAL_TIM_Base_Start_IT+0xcc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d013      	beq.n	8007534 <HAL_TIM_Base_Start_IT+0x80>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <HAL_TIM_Base_Start_IT+0xd0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00e      	beq.n	8007534 <HAL_TIM_Base_Start_IT+0x80>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a1b      	ldr	r2, [pc, #108]	; (8007588 <HAL_TIM_Base_Start_IT+0xd4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d009      	beq.n	8007534 <HAL_TIM_Base_Start_IT+0x80>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a19      	ldr	r2, [pc, #100]	; (800758c <HAL_TIM_Base_Start_IT+0xd8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d004      	beq.n	8007534 <HAL_TIM_Base_Start_IT+0x80>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a18      	ldr	r2, [pc, #96]	; (8007590 <HAL_TIM_Base_Start_IT+0xdc>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d111      	bne.n	8007558 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b06      	cmp	r3, #6
 8007544:	d010      	beq.n	8007568 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0201 	orr.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007556:	e007      	b.n	8007568 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0201 	orr.w	r2, r2, #1
 8007566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	40010000 	.word	0x40010000
 800757c:	40000400 	.word	0x40000400
 8007580:	40000800 	.word	0x40000800
 8007584:	40000c00 	.word	0x40000c00
 8007588:	40010400 	.word	0x40010400
 800758c:	40014000 	.word	0x40014000
 8007590:	40001800 	.word	0x40001800

08007594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e041      	b.n	800762a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f839 	bl	8007632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4619      	mov	r1, r3
 80075d2:	4610      	mov	r0, r2
 80075d4:	f000 faf2 	bl	8007bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b02      	cmp	r3, #2
 800765a:	d122      	bne.n	80076a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b02      	cmp	r3, #2
 8007668:	d11b      	bne.n	80076a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f06f 0202 	mvn.w	r2, #2
 8007672:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	f003 0303 	and.w	r3, r3, #3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fa78 	bl	8007b7e <HAL_TIM_IC_CaptureCallback>
 800768e:	e005      	b.n	800769c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fa6a 	bl	8007b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa7b 	bl	8007b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d122      	bne.n	80076f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d11b      	bne.n	80076f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f06f 0204 	mvn.w	r2, #4
 80076c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa4e 	bl	8007b7e <HAL_TIM_IC_CaptureCallback>
 80076e2:	e005      	b.n	80076f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fa40 	bl	8007b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa51 	bl	8007b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b08      	cmp	r3, #8
 8007702:	d122      	bne.n	800774a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f003 0308 	and.w	r3, r3, #8
 800770e:	2b08      	cmp	r3, #8
 8007710:	d11b      	bne.n	800774a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f06f 0208 	mvn.w	r2, #8
 800771a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2204      	movs	r2, #4
 8007720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fa24 	bl	8007b7e <HAL_TIM_IC_CaptureCallback>
 8007736:	e005      	b.n	8007744 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fa16 	bl	8007b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa27 	bl	8007b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b10      	cmp	r3, #16
 8007756:	d122      	bne.n	800779e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f003 0310 	and.w	r3, r3, #16
 8007762:	2b10      	cmp	r3, #16
 8007764:	d11b      	bne.n	800779e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f06f 0210 	mvn.w	r2, #16
 800776e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2208      	movs	r2, #8
 8007774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f9fa 	bl	8007b7e <HAL_TIM_IC_CaptureCallback>
 800778a:	e005      	b.n	8007798 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f9ec 	bl	8007b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f9fd 	bl	8007b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10e      	bne.n	80077ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d107      	bne.n	80077ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f06f 0201 	mvn.w	r2, #1
 80077c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7fb fb7f 	bl	8002ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d10e      	bne.n	80077f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e2:	2b80      	cmp	r3, #128	; 0x80
 80077e4:	d107      	bne.n	80077f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fd53 	bl	800829c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	d10e      	bne.n	8007822 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d107      	bne.n	8007822 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800781a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9c2 	bl	8007ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b20      	cmp	r3, #32
 800782e:	d10e      	bne.n	800784e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b20      	cmp	r3, #32
 800783c:	d107      	bne.n	800784e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f06f 0220 	mvn.w	r2, #32
 8007846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fd1d 	bl	8008288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007872:	2302      	movs	r3, #2
 8007874:	e0ae      	b.n	80079d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b0c      	cmp	r3, #12
 8007882:	f200 809f 	bhi.w	80079c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078c1 	.word	0x080078c1
 8007890:	080079c5 	.word	0x080079c5
 8007894:	080079c5 	.word	0x080079c5
 8007898:	080079c5 	.word	0x080079c5
 800789c:	08007901 	.word	0x08007901
 80078a0:	080079c5 	.word	0x080079c5
 80078a4:	080079c5 	.word	0x080079c5
 80078a8:	080079c5 	.word	0x080079c5
 80078ac:	08007943 	.word	0x08007943
 80078b0:	080079c5 	.word	0x080079c5
 80078b4:	080079c5 	.word	0x080079c5
 80078b8:	080079c5 	.word	0x080079c5
 80078bc:	08007983 	.word	0x08007983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fa18 	bl	8007cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0208 	orr.w	r2, r2, #8
 80078da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	699a      	ldr	r2, [r3, #24]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0204 	bic.w	r2, r2, #4
 80078ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6999      	ldr	r1, [r3, #24]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	691a      	ldr	r2, [r3, #16]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	619a      	str	r2, [r3, #24]
      break;
 80078fe:	e064      	b.n	80079ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fa68 	bl	8007ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800791a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800792a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6999      	ldr	r1, [r3, #24]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	021a      	lsls	r2, r3, #8
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	619a      	str	r2, [r3, #24]
      break;
 8007940:	e043      	b.n	80079ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68b9      	ldr	r1, [r7, #8]
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fabd 	bl	8007ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69da      	ldr	r2, [r3, #28]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f042 0208 	orr.w	r2, r2, #8
 800795c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69da      	ldr	r2, [r3, #28]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0204 	bic.w	r2, r2, #4
 800796c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69d9      	ldr	r1, [r3, #28]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	61da      	str	r2, [r3, #28]
      break;
 8007980:	e023      	b.n	80079ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68b9      	ldr	r1, [r7, #8]
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fb11 	bl	8007fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800799c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69da      	ldr	r2, [r3, #28]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69d9      	ldr	r1, [r3, #28]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	021a      	lsls	r2, r3, #8
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	61da      	str	r2, [r3, #28]
      break;
 80079c2:	e002      	b.n	80079ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	75fb      	strb	r3, [r7, #23]
      break;
 80079c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <HAL_TIM_ConfigClockSource+0x1c>
 80079f4:	2302      	movs	r3, #2
 80079f6:	e0b4      	b.n	8007b62 <HAL_TIM_ConfigClockSource+0x186>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a30:	d03e      	beq.n	8007ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8007a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a36:	f200 8087 	bhi.w	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3e:	f000 8086 	beq.w	8007b4e <HAL_TIM_ConfigClockSource+0x172>
 8007a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a46:	d87f      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a48:	2b70      	cmp	r3, #112	; 0x70
 8007a4a:	d01a      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0xa6>
 8007a4c:	2b70      	cmp	r3, #112	; 0x70
 8007a4e:	d87b      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a50:	2b60      	cmp	r3, #96	; 0x60
 8007a52:	d050      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0x11a>
 8007a54:	2b60      	cmp	r3, #96	; 0x60
 8007a56:	d877      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a58:	2b50      	cmp	r3, #80	; 0x50
 8007a5a:	d03c      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8007a5c:	2b50      	cmp	r3, #80	; 0x50
 8007a5e:	d873      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a60:	2b40      	cmp	r3, #64	; 0x40
 8007a62:	d058      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x13a>
 8007a64:	2b40      	cmp	r3, #64	; 0x40
 8007a66:	d86f      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a68:	2b30      	cmp	r3, #48	; 0x30
 8007a6a:	d064      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15a>
 8007a6c:	2b30      	cmp	r3, #48	; 0x30
 8007a6e:	d86b      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d060      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15a>
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d867      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d05c      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15a>
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d05a      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15a>
 8007a80:	e062      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6899      	ldr	r1, [r3, #8]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	f000 fb5d 	bl	8008150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	609a      	str	r2, [r3, #8]
      break;
 8007aae:	e04f      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	6899      	ldr	r1, [r3, #8]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f000 fb46 	bl	8008150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ad2:	609a      	str	r2, [r3, #8]
      break;
 8007ad4:	e03c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6859      	ldr	r1, [r3, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f000 faba 	bl	800805c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2150      	movs	r1, #80	; 0x50
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fb13 	bl	800811a <TIM_ITRx_SetConfig>
      break;
 8007af4:	e02c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	6859      	ldr	r1, [r3, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	461a      	mov	r2, r3
 8007b04:	f000 fad9 	bl	80080ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2160      	movs	r1, #96	; 0x60
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fb03 	bl	800811a <TIM_ITRx_SetConfig>
      break;
 8007b14:	e01c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6859      	ldr	r1, [r3, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f000 fa9a 	bl	800805c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2140      	movs	r1, #64	; 0x40
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 faf3 	bl	800811a <TIM_ITRx_SetConfig>
      break;
 8007b34:	e00c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f000 faea 	bl	800811a <TIM_ITRx_SetConfig>
      break;
 8007b46:	e003      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4c:	e000      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b72:	bf00      	nop
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a40      	ldr	r2, [pc, #256]	; (8007cd0 <TIM_Base_SetConfig+0x114>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bda:	d00f      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a3d      	ldr	r2, [pc, #244]	; (8007cd4 <TIM_Base_SetConfig+0x118>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00b      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a3c      	ldr	r2, [pc, #240]	; (8007cd8 <TIM_Base_SetConfig+0x11c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d007      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a3b      	ldr	r2, [pc, #236]	; (8007cdc <TIM_Base_SetConfig+0x120>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d003      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a3a      	ldr	r2, [pc, #232]	; (8007ce0 <TIM_Base_SetConfig+0x124>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d108      	bne.n	8007c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a2f      	ldr	r2, [pc, #188]	; (8007cd0 <TIM_Base_SetConfig+0x114>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d02b      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c1c:	d027      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a2c      	ldr	r2, [pc, #176]	; (8007cd4 <TIM_Base_SetConfig+0x118>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d023      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a2b      	ldr	r2, [pc, #172]	; (8007cd8 <TIM_Base_SetConfig+0x11c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d01f      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a2a      	ldr	r2, [pc, #168]	; (8007cdc <TIM_Base_SetConfig+0x120>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d01b      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a29      	ldr	r2, [pc, #164]	; (8007ce0 <TIM_Base_SetConfig+0x124>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d017      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a28      	ldr	r2, [pc, #160]	; (8007ce4 <TIM_Base_SetConfig+0x128>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d013      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a27      	ldr	r2, [pc, #156]	; (8007ce8 <TIM_Base_SetConfig+0x12c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00f      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a26      	ldr	r2, [pc, #152]	; (8007cec <TIM_Base_SetConfig+0x130>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00b      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a25      	ldr	r2, [pc, #148]	; (8007cf0 <TIM_Base_SetConfig+0x134>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d007      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a24      	ldr	r2, [pc, #144]	; (8007cf4 <TIM_Base_SetConfig+0x138>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d003      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a23      	ldr	r2, [pc, #140]	; (8007cf8 <TIM_Base_SetConfig+0x13c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d108      	bne.n	8007c80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a0a      	ldr	r2, [pc, #40]	; (8007cd0 <TIM_Base_SetConfig+0x114>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_Base_SetConfig+0xf8>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a0c      	ldr	r2, [pc, #48]	; (8007ce0 <TIM_Base_SetConfig+0x124>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d103      	bne.n	8007cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	615a      	str	r2, [r3, #20]
}
 8007cc2:	bf00      	nop
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40010000 	.word	0x40010000
 8007cd4:	40000400 	.word	0x40000400
 8007cd8:	40000800 	.word	0x40000800
 8007cdc:	40000c00 	.word	0x40000c00
 8007ce0:	40010400 	.word	0x40010400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40014400 	.word	0x40014400
 8007cec:	40014800 	.word	0x40014800
 8007cf0:	40001800 	.word	0x40001800
 8007cf4:	40001c00 	.word	0x40001c00
 8007cf8:	40002000 	.word	0x40002000

08007cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	f023 0201 	bic.w	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0303 	bic.w	r3, r3, #3
 8007d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f023 0302 	bic.w	r3, r3, #2
 8007d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a20      	ldr	r2, [pc, #128]	; (8007dd4 <TIM_OC1_SetConfig+0xd8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_OC1_SetConfig+0x64>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a1f      	ldr	r2, [pc, #124]	; (8007dd8 <TIM_OC1_SetConfig+0xdc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d10c      	bne.n	8007d7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f023 0308 	bic.w	r3, r3, #8
 8007d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f023 0304 	bic.w	r3, r3, #4
 8007d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <TIM_OC1_SetConfig+0xd8>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d003      	beq.n	8007d8a <TIM_OC1_SetConfig+0x8e>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <TIM_OC1_SetConfig+0xdc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d111      	bne.n	8007dae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	621a      	str	r2, [r3, #32]
}
 8007dc8:	bf00      	nop
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40010400 	.word	0x40010400

08007ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f023 0210 	bic.w	r2, r3, #16
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f023 0320 	bic.w	r3, r3, #32
 8007e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a22      	ldr	r2, [pc, #136]	; (8007ec0 <TIM_OC2_SetConfig+0xe4>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_OC2_SetConfig+0x68>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a21      	ldr	r2, [pc, #132]	; (8007ec4 <TIM_OC2_SetConfig+0xe8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d10d      	bne.n	8007e60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a17      	ldr	r2, [pc, #92]	; (8007ec0 <TIM_OC2_SetConfig+0xe4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d003      	beq.n	8007e70 <TIM_OC2_SetConfig+0x94>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a16      	ldr	r2, [pc, #88]	; (8007ec4 <TIM_OC2_SetConfig+0xe8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d113      	bne.n	8007e98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40010000 	.word	0x40010000
 8007ec4:	40010400 	.word	0x40010400

08007ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a21      	ldr	r2, [pc, #132]	; (8007fa8 <TIM_OC3_SetConfig+0xe0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d003      	beq.n	8007f2e <TIM_OC3_SetConfig+0x66>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a20      	ldr	r2, [pc, #128]	; (8007fac <TIM_OC3_SetConfig+0xe4>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d10d      	bne.n	8007f4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a16      	ldr	r2, [pc, #88]	; (8007fa8 <TIM_OC3_SetConfig+0xe0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d003      	beq.n	8007f5a <TIM_OC3_SetConfig+0x92>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a15      	ldr	r2, [pc, #84]	; (8007fac <TIM_OC3_SetConfig+0xe4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d113      	bne.n	8007f82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	621a      	str	r2, [r3, #32]
}
 8007f9c:	bf00      	nop
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40010400 	.word	0x40010400

08007fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	021b      	lsls	r3, r3, #8
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	031b      	lsls	r3, r3, #12
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a12      	ldr	r2, [pc, #72]	; (8008054 <TIM_OC4_SetConfig+0xa4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_OC4_SetConfig+0x68>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a11      	ldr	r2, [pc, #68]	; (8008058 <TIM_OC4_SetConfig+0xa8>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d109      	bne.n	800802c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800801e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	019b      	lsls	r3, r3, #6
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	4313      	orrs	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40010000 	.word	0x40010000
 8008058:	40010400 	.word	0x40010400

0800805c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	f023 0201 	bic.w	r2, r3, #1
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4313      	orrs	r3, r2
 8008090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f023 030a 	bic.w	r3, r3, #10
 8008098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4313      	orrs	r3, r2
 80080a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	621a      	str	r2, [r3, #32]
}
 80080ae:	bf00      	nop
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b087      	sub	sp, #28
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	f023 0210 	bic.w	r2, r3, #16
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	031b      	lsls	r3, r3, #12
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	4313      	orrs	r3, r2
 8008100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	621a      	str	r2, [r3, #32]
}
 800810e:	bf00      	nop
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	f043 0307 	orr.w	r3, r3, #7
 800813c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	609a      	str	r2, [r3, #8]
}
 8008144:	bf00      	nop
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800816a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	021a      	lsls	r2, r3, #8
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	431a      	orrs	r2, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	4313      	orrs	r3, r2
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	609a      	str	r2, [r3, #8]
}
 8008184:	bf00      	nop
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e05a      	b.n	800825e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a21      	ldr	r2, [pc, #132]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d022      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f4:	d01d      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1d      	ldr	r2, [pc, #116]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d018      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1b      	ldr	r2, [pc, #108]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d013      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1a      	ldr	r2, [pc, #104]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00e      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a18      	ldr	r2, [pc, #96]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d009      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a17      	ldr	r2, [pc, #92]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d004      	beq.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a15      	ldr	r2, [pc, #84]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d10c      	bne.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4313      	orrs	r3, r2
 8008242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40010000 	.word	0x40010000
 8008270:	40000400 	.word	0x40000400
 8008274:	40000800 	.word	0x40000800
 8008278:	40000c00 	.word	0x40000c00
 800827c:	40010400 	.word	0x40010400
 8008280:	40014000 	.word	0x40014000
 8008284:	40001800 	.word	0x40001800

08008288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4b20      	ldr	r3, [pc, #128]	; (8008350 <FSMC_NORSRAM_Init+0xa0>)
 80082ce:	4013      	ands	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80082da:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80082e0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80082e6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80082ec:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80082f2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80082f8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80082fe:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008304:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800830a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008310:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008316:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800831c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	4313      	orrs	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d103      	bne.n	8008334 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008332:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	fff00080 	.word	0xfff00080

08008354 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008376:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008382:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800838a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008392:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	3b01      	subs	r3, #1
 800839a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800839c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	3b02      	subs	r3, #2
 80083a4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80083a6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083ac:	4313      	orrs	r3, r2
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6979      	ldr	r1, [r7, #20]
 80083bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
	...

080083d0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083e8:	d122      	bne.n	8008430 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	4b15      	ldr	r3, [pc, #84]	; (800844c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008406:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800840e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008416:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800841c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6979      	ldr	r1, [r7, #20]
 800842a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800842e:	e005      	b.n	800843c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	cff00000 	.word	0xcff00000

08008450 <__errno>:
 8008450:	4b01      	ldr	r3, [pc, #4]	; (8008458 <__errno+0x8>)
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	2000004c 	.word	0x2000004c

0800845c <__libc_init_array>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	4d0d      	ldr	r5, [pc, #52]	; (8008494 <__libc_init_array+0x38>)
 8008460:	4c0d      	ldr	r4, [pc, #52]	; (8008498 <__libc_init_array+0x3c>)
 8008462:	1b64      	subs	r4, r4, r5
 8008464:	10a4      	asrs	r4, r4, #2
 8008466:	2600      	movs	r6, #0
 8008468:	42a6      	cmp	r6, r4
 800846a:	d109      	bne.n	8008480 <__libc_init_array+0x24>
 800846c:	4d0b      	ldr	r5, [pc, #44]	; (800849c <__libc_init_array+0x40>)
 800846e:	4c0c      	ldr	r4, [pc, #48]	; (80084a0 <__libc_init_array+0x44>)
 8008470:	f001 f96c 	bl	800974c <_init>
 8008474:	1b64      	subs	r4, r4, r5
 8008476:	10a4      	asrs	r4, r4, #2
 8008478:	2600      	movs	r6, #0
 800847a:	42a6      	cmp	r6, r4
 800847c:	d105      	bne.n	800848a <__libc_init_array+0x2e>
 800847e:	bd70      	pop	{r4, r5, r6, pc}
 8008480:	f855 3b04 	ldr.w	r3, [r5], #4
 8008484:	4798      	blx	r3
 8008486:	3601      	adds	r6, #1
 8008488:	e7ee      	b.n	8008468 <__libc_init_array+0xc>
 800848a:	f855 3b04 	ldr.w	r3, [r5], #4
 800848e:	4798      	blx	r3
 8008490:	3601      	adds	r6, #1
 8008492:	e7f2      	b.n	800847a <__libc_init_array+0x1e>
 8008494:	0800c998 	.word	0x0800c998
 8008498:	0800c998 	.word	0x0800c998
 800849c:	0800c998 	.word	0x0800c998
 80084a0:	0800c99c 	.word	0x0800c99c

080084a4 <memset>:
 80084a4:	4402      	add	r2, r0
 80084a6:	4603      	mov	r3, r0
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d100      	bne.n	80084ae <memset+0xa>
 80084ac:	4770      	bx	lr
 80084ae:	f803 1b01 	strb.w	r1, [r3], #1
 80084b2:	e7f9      	b.n	80084a8 <memset+0x4>

080084b4 <srand>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4b10      	ldr	r3, [pc, #64]	; (80084f8 <srand+0x44>)
 80084b8:	681d      	ldr	r5, [r3, #0]
 80084ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80084bc:	4604      	mov	r4, r0
 80084be:	b9b3      	cbnz	r3, 80084ee <srand+0x3a>
 80084c0:	2018      	movs	r0, #24
 80084c2:	f000 f8c1 	bl	8008648 <malloc>
 80084c6:	4602      	mov	r2, r0
 80084c8:	63a8      	str	r0, [r5, #56]	; 0x38
 80084ca:	b920      	cbnz	r0, 80084d6 <srand+0x22>
 80084cc:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <srand+0x48>)
 80084ce:	480c      	ldr	r0, [pc, #48]	; (8008500 <srand+0x4c>)
 80084d0:	2142      	movs	r1, #66	; 0x42
 80084d2:	f000 f877 	bl	80085c4 <__assert_func>
 80084d6:	490b      	ldr	r1, [pc, #44]	; (8008504 <srand+0x50>)
 80084d8:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <srand+0x54>)
 80084da:	e9c0 1300 	strd	r1, r3, [r0]
 80084de:	4b0b      	ldr	r3, [pc, #44]	; (800850c <srand+0x58>)
 80084e0:	6083      	str	r3, [r0, #8]
 80084e2:	230b      	movs	r3, #11
 80084e4:	8183      	strh	r3, [r0, #12]
 80084e6:	2100      	movs	r1, #0
 80084e8:	2001      	movs	r0, #1
 80084ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80084ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80084f0:	2200      	movs	r2, #0
 80084f2:	611c      	str	r4, [r3, #16]
 80084f4:	615a      	str	r2, [r3, #20]
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	2000004c 	.word	0x2000004c
 80084fc:	0800c848 	.word	0x0800c848
 8008500:	0800c85f 	.word	0x0800c85f
 8008504:	abcd330e 	.word	0xabcd330e
 8008508:	e66d1234 	.word	0xe66d1234
 800850c:	0005deec 	.word	0x0005deec

08008510 <rand>:
 8008510:	4b17      	ldr	r3, [pc, #92]	; (8008570 <rand+0x60>)
 8008512:	b510      	push	{r4, lr}
 8008514:	681c      	ldr	r4, [r3, #0]
 8008516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008518:	b9b3      	cbnz	r3, 8008548 <rand+0x38>
 800851a:	2018      	movs	r0, #24
 800851c:	f000 f894 	bl	8008648 <malloc>
 8008520:	63a0      	str	r0, [r4, #56]	; 0x38
 8008522:	b928      	cbnz	r0, 8008530 <rand+0x20>
 8008524:	4602      	mov	r2, r0
 8008526:	4b13      	ldr	r3, [pc, #76]	; (8008574 <rand+0x64>)
 8008528:	4813      	ldr	r0, [pc, #76]	; (8008578 <rand+0x68>)
 800852a:	214e      	movs	r1, #78	; 0x4e
 800852c:	f000 f84a 	bl	80085c4 <__assert_func>
 8008530:	4a12      	ldr	r2, [pc, #72]	; (800857c <rand+0x6c>)
 8008532:	4b13      	ldr	r3, [pc, #76]	; (8008580 <rand+0x70>)
 8008534:	e9c0 2300 	strd	r2, r3, [r0]
 8008538:	4b12      	ldr	r3, [pc, #72]	; (8008584 <rand+0x74>)
 800853a:	6083      	str	r3, [r0, #8]
 800853c:	230b      	movs	r3, #11
 800853e:	8183      	strh	r3, [r0, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	2300      	movs	r3, #0
 8008544:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008548:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800854a:	480f      	ldr	r0, [pc, #60]	; (8008588 <rand+0x78>)
 800854c:	690a      	ldr	r2, [r1, #16]
 800854e:	694b      	ldr	r3, [r1, #20]
 8008550:	4c0e      	ldr	r4, [pc, #56]	; (800858c <rand+0x7c>)
 8008552:	4350      	muls	r0, r2
 8008554:	fb04 0003 	mla	r0, r4, r3, r0
 8008558:	fba2 3404 	umull	r3, r4, r2, r4
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	4404      	add	r4, r0
 8008560:	f144 0000 	adc.w	r0, r4, #0
 8008564:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8008568:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800856c:	bd10      	pop	{r4, pc}
 800856e:	bf00      	nop
 8008570:	2000004c 	.word	0x2000004c
 8008574:	0800c848 	.word	0x0800c848
 8008578:	0800c85f 	.word	0x0800c85f
 800857c:	abcd330e 	.word	0xabcd330e
 8008580:	e66d1234 	.word	0xe66d1234
 8008584:	0005deec 	.word	0x0005deec
 8008588:	5851f42d 	.word	0x5851f42d
 800858c:	4c957f2d 	.word	0x4c957f2d

08008590 <time>:
 8008590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <time+0x30>)
 8008594:	2200      	movs	r2, #0
 8008596:	4669      	mov	r1, sp
 8008598:	4604      	mov	r4, r0
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	f000 f842 	bl	8008624 <_gettimeofday_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	bfbe      	ittt	lt
 80085a4:	f04f 32ff 	movlt.w	r2, #4294967295
 80085a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085ac:	e9cd 2300 	strdlt	r2, r3, [sp]
 80085b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085b4:	b10c      	cbz	r4, 80085ba <time+0x2a>
 80085b6:	e9c4 0100 	strd	r0, r1, [r4]
 80085ba:	b004      	add	sp, #16
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	bf00      	nop
 80085c0:	2000004c 	.word	0x2000004c

080085c4 <__assert_func>:
 80085c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085c6:	4614      	mov	r4, r2
 80085c8:	461a      	mov	r2, r3
 80085ca:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <__assert_func+0x2c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4605      	mov	r5, r0
 80085d0:	68d8      	ldr	r0, [r3, #12]
 80085d2:	b14c      	cbz	r4, 80085e8 <__assert_func+0x24>
 80085d4:	4b07      	ldr	r3, [pc, #28]	; (80085f4 <__assert_func+0x30>)
 80085d6:	9100      	str	r1, [sp, #0]
 80085d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085dc:	4906      	ldr	r1, [pc, #24]	; (80085f8 <__assert_func+0x34>)
 80085de:	462b      	mov	r3, r5
 80085e0:	f000 f80e 	bl	8008600 <fiprintf>
 80085e4:	f000 fca0 	bl	8008f28 <abort>
 80085e8:	4b04      	ldr	r3, [pc, #16]	; (80085fc <__assert_func+0x38>)
 80085ea:	461c      	mov	r4, r3
 80085ec:	e7f3      	b.n	80085d6 <__assert_func+0x12>
 80085ee:	bf00      	nop
 80085f0:	2000004c 	.word	0x2000004c
 80085f4:	0800c8be 	.word	0x0800c8be
 80085f8:	0800c8cb 	.word	0x0800c8cb
 80085fc:	0800c8f9 	.word	0x0800c8f9

08008600 <fiprintf>:
 8008600:	b40e      	push	{r1, r2, r3}
 8008602:	b503      	push	{r0, r1, lr}
 8008604:	4601      	mov	r1, r0
 8008606:	ab03      	add	r3, sp, #12
 8008608:	4805      	ldr	r0, [pc, #20]	; (8008620 <fiprintf+0x20>)
 800860a:	f853 2b04 	ldr.w	r2, [r3], #4
 800860e:	6800      	ldr	r0, [r0, #0]
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	f000 f8f5 	bl	8008800 <_vfiprintf_r>
 8008616:	b002      	add	sp, #8
 8008618:	f85d eb04 	ldr.w	lr, [sp], #4
 800861c:	b003      	add	sp, #12
 800861e:	4770      	bx	lr
 8008620:	2000004c 	.word	0x2000004c

08008624 <_gettimeofday_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d07      	ldr	r5, [pc, #28]	; (8008644 <_gettimeofday_r+0x20>)
 8008628:	2300      	movs	r3, #0
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	4611      	mov	r1, r2
 8008630:	602b      	str	r3, [r5, #0]
 8008632:	f001 f883 	bl	800973c <_gettimeofday>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d102      	bne.n	8008640 <_gettimeofday_r+0x1c>
 800863a:	682b      	ldr	r3, [r5, #0]
 800863c:	b103      	cbz	r3, 8008640 <_gettimeofday_r+0x1c>
 800863e:	6023      	str	r3, [r4, #0]
 8008640:	bd38      	pop	{r3, r4, r5, pc}
 8008642:	bf00      	nop
 8008644:	20000544 	.word	0x20000544

08008648 <malloc>:
 8008648:	4b02      	ldr	r3, [pc, #8]	; (8008654 <malloc+0xc>)
 800864a:	4601      	mov	r1, r0
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f000 b853 	b.w	80086f8 <_malloc_r>
 8008652:	bf00      	nop
 8008654:	2000004c 	.word	0x2000004c

08008658 <_free_r>:
 8008658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800865a:	2900      	cmp	r1, #0
 800865c:	d048      	beq.n	80086f0 <_free_r+0x98>
 800865e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008662:	9001      	str	r0, [sp, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f1a1 0404 	sub.w	r4, r1, #4
 800866a:	bfb8      	it	lt
 800866c:	18e4      	addlt	r4, r4, r3
 800866e:	f000 fe81 	bl	8009374 <__malloc_lock>
 8008672:	4a20      	ldr	r2, [pc, #128]	; (80086f4 <_free_r+0x9c>)
 8008674:	9801      	ldr	r0, [sp, #4]
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	4615      	mov	r5, r2
 800867a:	b933      	cbnz	r3, 800868a <_free_r+0x32>
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	6014      	str	r4, [r2, #0]
 8008680:	b003      	add	sp, #12
 8008682:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008686:	f000 be7b 	b.w	8009380 <__malloc_unlock>
 800868a:	42a3      	cmp	r3, r4
 800868c:	d90b      	bls.n	80086a6 <_free_r+0x4e>
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	1862      	adds	r2, r4, r1
 8008692:	4293      	cmp	r3, r2
 8008694:	bf04      	itt	eq
 8008696:	681a      	ldreq	r2, [r3, #0]
 8008698:	685b      	ldreq	r3, [r3, #4]
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	bf04      	itt	eq
 800869e:	1852      	addeq	r2, r2, r1
 80086a0:	6022      	streq	r2, [r4, #0]
 80086a2:	602c      	str	r4, [r5, #0]
 80086a4:	e7ec      	b.n	8008680 <_free_r+0x28>
 80086a6:	461a      	mov	r2, r3
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	b10b      	cbz	r3, 80086b0 <_free_r+0x58>
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d9fa      	bls.n	80086a6 <_free_r+0x4e>
 80086b0:	6811      	ldr	r1, [r2, #0]
 80086b2:	1855      	adds	r5, r2, r1
 80086b4:	42a5      	cmp	r5, r4
 80086b6:	d10b      	bne.n	80086d0 <_free_r+0x78>
 80086b8:	6824      	ldr	r4, [r4, #0]
 80086ba:	4421      	add	r1, r4
 80086bc:	1854      	adds	r4, r2, r1
 80086be:	42a3      	cmp	r3, r4
 80086c0:	6011      	str	r1, [r2, #0]
 80086c2:	d1dd      	bne.n	8008680 <_free_r+0x28>
 80086c4:	681c      	ldr	r4, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	6053      	str	r3, [r2, #4]
 80086ca:	4421      	add	r1, r4
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	e7d7      	b.n	8008680 <_free_r+0x28>
 80086d0:	d902      	bls.n	80086d8 <_free_r+0x80>
 80086d2:	230c      	movs	r3, #12
 80086d4:	6003      	str	r3, [r0, #0]
 80086d6:	e7d3      	b.n	8008680 <_free_r+0x28>
 80086d8:	6825      	ldr	r5, [r4, #0]
 80086da:	1961      	adds	r1, r4, r5
 80086dc:	428b      	cmp	r3, r1
 80086de:	bf04      	itt	eq
 80086e0:	6819      	ldreq	r1, [r3, #0]
 80086e2:	685b      	ldreq	r3, [r3, #4]
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	bf04      	itt	eq
 80086e8:	1949      	addeq	r1, r1, r5
 80086ea:	6021      	streq	r1, [r4, #0]
 80086ec:	6054      	str	r4, [r2, #4]
 80086ee:	e7c7      	b.n	8008680 <_free_r+0x28>
 80086f0:	b003      	add	sp, #12
 80086f2:	bd30      	pop	{r4, r5, pc}
 80086f4:	20000280 	.word	0x20000280

080086f8 <_malloc_r>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	1ccd      	adds	r5, r1, #3
 80086fc:	f025 0503 	bic.w	r5, r5, #3
 8008700:	3508      	adds	r5, #8
 8008702:	2d0c      	cmp	r5, #12
 8008704:	bf38      	it	cc
 8008706:	250c      	movcc	r5, #12
 8008708:	2d00      	cmp	r5, #0
 800870a:	4606      	mov	r6, r0
 800870c:	db01      	blt.n	8008712 <_malloc_r+0x1a>
 800870e:	42a9      	cmp	r1, r5
 8008710:	d903      	bls.n	800871a <_malloc_r+0x22>
 8008712:	230c      	movs	r3, #12
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	2000      	movs	r0, #0
 8008718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871a:	f000 fe2b 	bl	8009374 <__malloc_lock>
 800871e:	4921      	ldr	r1, [pc, #132]	; (80087a4 <_malloc_r+0xac>)
 8008720:	680a      	ldr	r2, [r1, #0]
 8008722:	4614      	mov	r4, r2
 8008724:	b99c      	cbnz	r4, 800874e <_malloc_r+0x56>
 8008726:	4f20      	ldr	r7, [pc, #128]	; (80087a8 <_malloc_r+0xb0>)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	b923      	cbnz	r3, 8008736 <_malloc_r+0x3e>
 800872c:	4621      	mov	r1, r4
 800872e:	4630      	mov	r0, r6
 8008730:	f000 fb2a 	bl	8008d88 <_sbrk_r>
 8008734:	6038      	str	r0, [r7, #0]
 8008736:	4629      	mov	r1, r5
 8008738:	4630      	mov	r0, r6
 800873a:	f000 fb25 	bl	8008d88 <_sbrk_r>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	d123      	bne.n	800878a <_malloc_r+0x92>
 8008742:	230c      	movs	r3, #12
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	4630      	mov	r0, r6
 8008748:	f000 fe1a 	bl	8009380 <__malloc_unlock>
 800874c:	e7e3      	b.n	8008716 <_malloc_r+0x1e>
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	1b5b      	subs	r3, r3, r5
 8008752:	d417      	bmi.n	8008784 <_malloc_r+0x8c>
 8008754:	2b0b      	cmp	r3, #11
 8008756:	d903      	bls.n	8008760 <_malloc_r+0x68>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	441c      	add	r4, r3
 800875c:	6025      	str	r5, [r4, #0]
 800875e:	e004      	b.n	800876a <_malloc_r+0x72>
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	42a2      	cmp	r2, r4
 8008764:	bf0c      	ite	eq
 8008766:	600b      	streq	r3, [r1, #0]
 8008768:	6053      	strne	r3, [r2, #4]
 800876a:	4630      	mov	r0, r6
 800876c:	f000 fe08 	bl	8009380 <__malloc_unlock>
 8008770:	f104 000b 	add.w	r0, r4, #11
 8008774:	1d23      	adds	r3, r4, #4
 8008776:	f020 0007 	bic.w	r0, r0, #7
 800877a:	1ac2      	subs	r2, r0, r3
 800877c:	d0cc      	beq.n	8008718 <_malloc_r+0x20>
 800877e:	1a1b      	subs	r3, r3, r0
 8008780:	50a3      	str	r3, [r4, r2]
 8008782:	e7c9      	b.n	8008718 <_malloc_r+0x20>
 8008784:	4622      	mov	r2, r4
 8008786:	6864      	ldr	r4, [r4, #4]
 8008788:	e7cc      	b.n	8008724 <_malloc_r+0x2c>
 800878a:	1cc4      	adds	r4, r0, #3
 800878c:	f024 0403 	bic.w	r4, r4, #3
 8008790:	42a0      	cmp	r0, r4
 8008792:	d0e3      	beq.n	800875c <_malloc_r+0x64>
 8008794:	1a21      	subs	r1, r4, r0
 8008796:	4630      	mov	r0, r6
 8008798:	f000 faf6 	bl	8008d88 <_sbrk_r>
 800879c:	3001      	adds	r0, #1
 800879e:	d1dd      	bne.n	800875c <_malloc_r+0x64>
 80087a0:	e7cf      	b.n	8008742 <_malloc_r+0x4a>
 80087a2:	bf00      	nop
 80087a4:	20000280 	.word	0x20000280
 80087a8:	20000284 	.word	0x20000284

080087ac <__sfputc_r>:
 80087ac:	6893      	ldr	r3, [r2, #8]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	b410      	push	{r4}
 80087b4:	6093      	str	r3, [r2, #8]
 80087b6:	da08      	bge.n	80087ca <__sfputc_r+0x1e>
 80087b8:	6994      	ldr	r4, [r2, #24]
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	db01      	blt.n	80087c2 <__sfputc_r+0x16>
 80087be:	290a      	cmp	r1, #10
 80087c0:	d103      	bne.n	80087ca <__sfputc_r+0x1e>
 80087c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c6:	f000 baef 	b.w	8008da8 <__swbuf_r>
 80087ca:	6813      	ldr	r3, [r2, #0]
 80087cc:	1c58      	adds	r0, r3, #1
 80087ce:	6010      	str	r0, [r2, #0]
 80087d0:	7019      	strb	r1, [r3, #0]
 80087d2:	4608      	mov	r0, r1
 80087d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087d8:	4770      	bx	lr

080087da <__sfputs_r>:
 80087da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087dc:	4606      	mov	r6, r0
 80087de:	460f      	mov	r7, r1
 80087e0:	4614      	mov	r4, r2
 80087e2:	18d5      	adds	r5, r2, r3
 80087e4:	42ac      	cmp	r4, r5
 80087e6:	d101      	bne.n	80087ec <__sfputs_r+0x12>
 80087e8:	2000      	movs	r0, #0
 80087ea:	e007      	b.n	80087fc <__sfputs_r+0x22>
 80087ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f0:	463a      	mov	r2, r7
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff ffda 	bl	80087ac <__sfputc_r>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d1f3      	bne.n	80087e4 <__sfputs_r+0xa>
 80087fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008800 <_vfiprintf_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	460d      	mov	r5, r1
 8008806:	b09d      	sub	sp, #116	; 0x74
 8008808:	4614      	mov	r4, r2
 800880a:	4698      	mov	r8, r3
 800880c:	4606      	mov	r6, r0
 800880e:	b118      	cbz	r0, 8008818 <_vfiprintf_r+0x18>
 8008810:	6983      	ldr	r3, [r0, #24]
 8008812:	b90b      	cbnz	r3, 8008818 <_vfiprintf_r+0x18>
 8008814:	f000 fcaa 	bl	800916c <__sinit>
 8008818:	4b89      	ldr	r3, [pc, #548]	; (8008a40 <_vfiprintf_r+0x240>)
 800881a:	429d      	cmp	r5, r3
 800881c:	d11b      	bne.n	8008856 <_vfiprintf_r+0x56>
 800881e:	6875      	ldr	r5, [r6, #4]
 8008820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008822:	07d9      	lsls	r1, r3, #31
 8008824:	d405      	bmi.n	8008832 <_vfiprintf_r+0x32>
 8008826:	89ab      	ldrh	r3, [r5, #12]
 8008828:	059a      	lsls	r2, r3, #22
 800882a:	d402      	bmi.n	8008832 <_vfiprintf_r+0x32>
 800882c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800882e:	f000 fd3b 	bl	80092a8 <__retarget_lock_acquire_recursive>
 8008832:	89ab      	ldrh	r3, [r5, #12]
 8008834:	071b      	lsls	r3, r3, #28
 8008836:	d501      	bpl.n	800883c <_vfiprintf_r+0x3c>
 8008838:	692b      	ldr	r3, [r5, #16]
 800883a:	b9eb      	cbnz	r3, 8008878 <_vfiprintf_r+0x78>
 800883c:	4629      	mov	r1, r5
 800883e:	4630      	mov	r0, r6
 8008840:	f000 fb04 	bl	8008e4c <__swsetup_r>
 8008844:	b1c0      	cbz	r0, 8008878 <_vfiprintf_r+0x78>
 8008846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008848:	07dc      	lsls	r4, r3, #31
 800884a:	d50e      	bpl.n	800886a <_vfiprintf_r+0x6a>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295
 8008850:	b01d      	add	sp, #116	; 0x74
 8008852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008856:	4b7b      	ldr	r3, [pc, #492]	; (8008a44 <_vfiprintf_r+0x244>)
 8008858:	429d      	cmp	r5, r3
 800885a:	d101      	bne.n	8008860 <_vfiprintf_r+0x60>
 800885c:	68b5      	ldr	r5, [r6, #8]
 800885e:	e7df      	b.n	8008820 <_vfiprintf_r+0x20>
 8008860:	4b79      	ldr	r3, [pc, #484]	; (8008a48 <_vfiprintf_r+0x248>)
 8008862:	429d      	cmp	r5, r3
 8008864:	bf08      	it	eq
 8008866:	68f5      	ldreq	r5, [r6, #12]
 8008868:	e7da      	b.n	8008820 <_vfiprintf_r+0x20>
 800886a:	89ab      	ldrh	r3, [r5, #12]
 800886c:	0598      	lsls	r0, r3, #22
 800886e:	d4ed      	bmi.n	800884c <_vfiprintf_r+0x4c>
 8008870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008872:	f000 fd1a 	bl	80092aa <__retarget_lock_release_recursive>
 8008876:	e7e9      	b.n	800884c <_vfiprintf_r+0x4c>
 8008878:	2300      	movs	r3, #0
 800887a:	9309      	str	r3, [sp, #36]	; 0x24
 800887c:	2320      	movs	r3, #32
 800887e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008882:	f8cd 800c 	str.w	r8, [sp, #12]
 8008886:	2330      	movs	r3, #48	; 0x30
 8008888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a4c <_vfiprintf_r+0x24c>
 800888c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008890:	f04f 0901 	mov.w	r9, #1
 8008894:	4623      	mov	r3, r4
 8008896:	469a      	mov	sl, r3
 8008898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800889c:	b10a      	cbz	r2, 80088a2 <_vfiprintf_r+0xa2>
 800889e:	2a25      	cmp	r2, #37	; 0x25
 80088a0:	d1f9      	bne.n	8008896 <_vfiprintf_r+0x96>
 80088a2:	ebba 0b04 	subs.w	fp, sl, r4
 80088a6:	d00b      	beq.n	80088c0 <_vfiprintf_r+0xc0>
 80088a8:	465b      	mov	r3, fp
 80088aa:	4622      	mov	r2, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	4630      	mov	r0, r6
 80088b0:	f7ff ff93 	bl	80087da <__sfputs_r>
 80088b4:	3001      	adds	r0, #1
 80088b6:	f000 80aa 	beq.w	8008a0e <_vfiprintf_r+0x20e>
 80088ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088bc:	445a      	add	r2, fp
 80088be:	9209      	str	r2, [sp, #36]	; 0x24
 80088c0:	f89a 3000 	ldrb.w	r3, [sl]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 80a2 	beq.w	8008a0e <_vfiprintf_r+0x20e>
 80088ca:	2300      	movs	r3, #0
 80088cc:	f04f 32ff 	mov.w	r2, #4294967295
 80088d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d4:	f10a 0a01 	add.w	sl, sl, #1
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	9307      	str	r3, [sp, #28]
 80088dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088e0:	931a      	str	r3, [sp, #104]	; 0x68
 80088e2:	4654      	mov	r4, sl
 80088e4:	2205      	movs	r2, #5
 80088e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ea:	4858      	ldr	r0, [pc, #352]	; (8008a4c <_vfiprintf_r+0x24c>)
 80088ec:	f7f7 fc70 	bl	80001d0 <memchr>
 80088f0:	9a04      	ldr	r2, [sp, #16]
 80088f2:	b9d8      	cbnz	r0, 800892c <_vfiprintf_r+0x12c>
 80088f4:	06d1      	lsls	r1, r2, #27
 80088f6:	bf44      	itt	mi
 80088f8:	2320      	movmi	r3, #32
 80088fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088fe:	0713      	lsls	r3, r2, #28
 8008900:	bf44      	itt	mi
 8008902:	232b      	movmi	r3, #43	; 0x2b
 8008904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008908:	f89a 3000 	ldrb.w	r3, [sl]
 800890c:	2b2a      	cmp	r3, #42	; 0x2a
 800890e:	d015      	beq.n	800893c <_vfiprintf_r+0x13c>
 8008910:	9a07      	ldr	r2, [sp, #28]
 8008912:	4654      	mov	r4, sl
 8008914:	2000      	movs	r0, #0
 8008916:	f04f 0c0a 	mov.w	ip, #10
 800891a:	4621      	mov	r1, r4
 800891c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008920:	3b30      	subs	r3, #48	; 0x30
 8008922:	2b09      	cmp	r3, #9
 8008924:	d94e      	bls.n	80089c4 <_vfiprintf_r+0x1c4>
 8008926:	b1b0      	cbz	r0, 8008956 <_vfiprintf_r+0x156>
 8008928:	9207      	str	r2, [sp, #28]
 800892a:	e014      	b.n	8008956 <_vfiprintf_r+0x156>
 800892c:	eba0 0308 	sub.w	r3, r0, r8
 8008930:	fa09 f303 	lsl.w	r3, r9, r3
 8008934:	4313      	orrs	r3, r2
 8008936:	9304      	str	r3, [sp, #16]
 8008938:	46a2      	mov	sl, r4
 800893a:	e7d2      	b.n	80088e2 <_vfiprintf_r+0xe2>
 800893c:	9b03      	ldr	r3, [sp, #12]
 800893e:	1d19      	adds	r1, r3, #4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	9103      	str	r1, [sp, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	bfbb      	ittet	lt
 8008948:	425b      	neglt	r3, r3
 800894a:	f042 0202 	orrlt.w	r2, r2, #2
 800894e:	9307      	strge	r3, [sp, #28]
 8008950:	9307      	strlt	r3, [sp, #28]
 8008952:	bfb8      	it	lt
 8008954:	9204      	strlt	r2, [sp, #16]
 8008956:	7823      	ldrb	r3, [r4, #0]
 8008958:	2b2e      	cmp	r3, #46	; 0x2e
 800895a:	d10c      	bne.n	8008976 <_vfiprintf_r+0x176>
 800895c:	7863      	ldrb	r3, [r4, #1]
 800895e:	2b2a      	cmp	r3, #42	; 0x2a
 8008960:	d135      	bne.n	80089ce <_vfiprintf_r+0x1ce>
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	1d1a      	adds	r2, r3, #4
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	9203      	str	r2, [sp, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	bfb8      	it	lt
 800896e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008972:	3402      	adds	r4, #2
 8008974:	9305      	str	r3, [sp, #20]
 8008976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a5c <_vfiprintf_r+0x25c>
 800897a:	7821      	ldrb	r1, [r4, #0]
 800897c:	2203      	movs	r2, #3
 800897e:	4650      	mov	r0, sl
 8008980:	f7f7 fc26 	bl	80001d0 <memchr>
 8008984:	b140      	cbz	r0, 8008998 <_vfiprintf_r+0x198>
 8008986:	2340      	movs	r3, #64	; 0x40
 8008988:	eba0 000a 	sub.w	r0, r0, sl
 800898c:	fa03 f000 	lsl.w	r0, r3, r0
 8008990:	9b04      	ldr	r3, [sp, #16]
 8008992:	4303      	orrs	r3, r0
 8008994:	3401      	adds	r4, #1
 8008996:	9304      	str	r3, [sp, #16]
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	482c      	ldr	r0, [pc, #176]	; (8008a50 <_vfiprintf_r+0x250>)
 800899e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089a2:	2206      	movs	r2, #6
 80089a4:	f7f7 fc14 	bl	80001d0 <memchr>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d03f      	beq.n	8008a2c <_vfiprintf_r+0x22c>
 80089ac:	4b29      	ldr	r3, [pc, #164]	; (8008a54 <_vfiprintf_r+0x254>)
 80089ae:	bb1b      	cbnz	r3, 80089f8 <_vfiprintf_r+0x1f8>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	3307      	adds	r3, #7
 80089b4:	f023 0307 	bic.w	r3, r3, #7
 80089b8:	3308      	adds	r3, #8
 80089ba:	9303      	str	r3, [sp, #12]
 80089bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089be:	443b      	add	r3, r7
 80089c0:	9309      	str	r3, [sp, #36]	; 0x24
 80089c2:	e767      	b.n	8008894 <_vfiprintf_r+0x94>
 80089c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089c8:	460c      	mov	r4, r1
 80089ca:	2001      	movs	r0, #1
 80089cc:	e7a5      	b.n	800891a <_vfiprintf_r+0x11a>
 80089ce:	2300      	movs	r3, #0
 80089d0:	3401      	adds	r4, #1
 80089d2:	9305      	str	r3, [sp, #20]
 80089d4:	4619      	mov	r1, r3
 80089d6:	f04f 0c0a 	mov.w	ip, #10
 80089da:	4620      	mov	r0, r4
 80089dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e0:	3a30      	subs	r2, #48	; 0x30
 80089e2:	2a09      	cmp	r2, #9
 80089e4:	d903      	bls.n	80089ee <_vfiprintf_r+0x1ee>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0c5      	beq.n	8008976 <_vfiprintf_r+0x176>
 80089ea:	9105      	str	r1, [sp, #20]
 80089ec:	e7c3      	b.n	8008976 <_vfiprintf_r+0x176>
 80089ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f2:	4604      	mov	r4, r0
 80089f4:	2301      	movs	r3, #1
 80089f6:	e7f0      	b.n	80089da <_vfiprintf_r+0x1da>
 80089f8:	ab03      	add	r3, sp, #12
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	462a      	mov	r2, r5
 80089fe:	4b16      	ldr	r3, [pc, #88]	; (8008a58 <_vfiprintf_r+0x258>)
 8008a00:	a904      	add	r1, sp, #16
 8008a02:	4630      	mov	r0, r6
 8008a04:	f3af 8000 	nop.w
 8008a08:	4607      	mov	r7, r0
 8008a0a:	1c78      	adds	r0, r7, #1
 8008a0c:	d1d6      	bne.n	80089bc <_vfiprintf_r+0x1bc>
 8008a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a10:	07d9      	lsls	r1, r3, #31
 8008a12:	d405      	bmi.n	8008a20 <_vfiprintf_r+0x220>
 8008a14:	89ab      	ldrh	r3, [r5, #12]
 8008a16:	059a      	lsls	r2, r3, #22
 8008a18:	d402      	bmi.n	8008a20 <_vfiprintf_r+0x220>
 8008a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a1c:	f000 fc45 	bl	80092aa <__retarget_lock_release_recursive>
 8008a20:	89ab      	ldrh	r3, [r5, #12]
 8008a22:	065b      	lsls	r3, r3, #25
 8008a24:	f53f af12 	bmi.w	800884c <_vfiprintf_r+0x4c>
 8008a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a2a:	e711      	b.n	8008850 <_vfiprintf_r+0x50>
 8008a2c:	ab03      	add	r3, sp, #12
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	462a      	mov	r2, r5
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <_vfiprintf_r+0x258>)
 8008a34:	a904      	add	r1, sp, #16
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 f880 	bl	8008b3c <_printf_i>
 8008a3c:	e7e4      	b.n	8008a08 <_vfiprintf_r+0x208>
 8008a3e:	bf00      	nop
 8008a40:	0800c950 	.word	0x0800c950
 8008a44:	0800c970 	.word	0x0800c970
 8008a48:	0800c930 	.word	0x0800c930
 8008a4c:	0800c8fa 	.word	0x0800c8fa
 8008a50:	0800c904 	.word	0x0800c904
 8008a54:	00000000 	.word	0x00000000
 8008a58:	080087db 	.word	0x080087db
 8008a5c:	0800c900 	.word	0x0800c900

08008a60 <_printf_common>:
 8008a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a64:	4616      	mov	r6, r2
 8008a66:	4699      	mov	r9, r3
 8008a68:	688a      	ldr	r2, [r1, #8]
 8008a6a:	690b      	ldr	r3, [r1, #16]
 8008a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a70:	4293      	cmp	r3, r2
 8008a72:	bfb8      	it	lt
 8008a74:	4613      	movlt	r3, r2
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	460c      	mov	r4, r1
 8008a80:	b10a      	cbz	r2, 8008a86 <_printf_common+0x26>
 8008a82:	3301      	adds	r3, #1
 8008a84:	6033      	str	r3, [r6, #0]
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	0699      	lsls	r1, r3, #26
 8008a8a:	bf42      	ittt	mi
 8008a8c:	6833      	ldrmi	r3, [r6, #0]
 8008a8e:	3302      	addmi	r3, #2
 8008a90:	6033      	strmi	r3, [r6, #0]
 8008a92:	6825      	ldr	r5, [r4, #0]
 8008a94:	f015 0506 	ands.w	r5, r5, #6
 8008a98:	d106      	bne.n	8008aa8 <_printf_common+0x48>
 8008a9a:	f104 0a19 	add.w	sl, r4, #25
 8008a9e:	68e3      	ldr	r3, [r4, #12]
 8008aa0:	6832      	ldr	r2, [r6, #0]
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	42ab      	cmp	r3, r5
 8008aa6:	dc26      	bgt.n	8008af6 <_printf_common+0x96>
 8008aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008aac:	1e13      	subs	r3, r2, #0
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	bf18      	it	ne
 8008ab2:	2301      	movne	r3, #1
 8008ab4:	0692      	lsls	r2, r2, #26
 8008ab6:	d42b      	bmi.n	8008b10 <_printf_common+0xb0>
 8008ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008abc:	4649      	mov	r1, r9
 8008abe:	4638      	mov	r0, r7
 8008ac0:	47c0      	blx	r8
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	d01e      	beq.n	8008b04 <_printf_common+0xa4>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	68e5      	ldr	r5, [r4, #12]
 8008aca:	6832      	ldr	r2, [r6, #0]
 8008acc:	f003 0306 	and.w	r3, r3, #6
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	bf08      	it	eq
 8008ad4:	1aad      	subeq	r5, r5, r2
 8008ad6:	68a3      	ldr	r3, [r4, #8]
 8008ad8:	6922      	ldr	r2, [r4, #16]
 8008ada:	bf0c      	ite	eq
 8008adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ae0:	2500      	movne	r5, #0
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	bfc4      	itt	gt
 8008ae6:	1a9b      	subgt	r3, r3, r2
 8008ae8:	18ed      	addgt	r5, r5, r3
 8008aea:	2600      	movs	r6, #0
 8008aec:	341a      	adds	r4, #26
 8008aee:	42b5      	cmp	r5, r6
 8008af0:	d11a      	bne.n	8008b28 <_printf_common+0xc8>
 8008af2:	2000      	movs	r0, #0
 8008af4:	e008      	b.n	8008b08 <_printf_common+0xa8>
 8008af6:	2301      	movs	r3, #1
 8008af8:	4652      	mov	r2, sl
 8008afa:	4649      	mov	r1, r9
 8008afc:	4638      	mov	r0, r7
 8008afe:	47c0      	blx	r8
 8008b00:	3001      	adds	r0, #1
 8008b02:	d103      	bne.n	8008b0c <_printf_common+0xac>
 8008b04:	f04f 30ff 	mov.w	r0, #4294967295
 8008b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b0c:	3501      	adds	r5, #1
 8008b0e:	e7c6      	b.n	8008a9e <_printf_common+0x3e>
 8008b10:	18e1      	adds	r1, r4, r3
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	2030      	movs	r0, #48	; 0x30
 8008b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b1a:	4422      	add	r2, r4
 8008b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b24:	3302      	adds	r3, #2
 8008b26:	e7c7      	b.n	8008ab8 <_printf_common+0x58>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	4638      	mov	r0, r7
 8008b30:	47c0      	blx	r8
 8008b32:	3001      	adds	r0, #1
 8008b34:	d0e6      	beq.n	8008b04 <_printf_common+0xa4>
 8008b36:	3601      	adds	r6, #1
 8008b38:	e7d9      	b.n	8008aee <_printf_common+0x8e>
	...

08008b3c <_printf_i>:
 8008b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b40:	460c      	mov	r4, r1
 8008b42:	4691      	mov	r9, r2
 8008b44:	7e27      	ldrb	r7, [r4, #24]
 8008b46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b48:	2f78      	cmp	r7, #120	; 0x78
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	469a      	mov	sl, r3
 8008b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b52:	d807      	bhi.n	8008b64 <_printf_i+0x28>
 8008b54:	2f62      	cmp	r7, #98	; 0x62
 8008b56:	d80a      	bhi.n	8008b6e <_printf_i+0x32>
 8008b58:	2f00      	cmp	r7, #0
 8008b5a:	f000 80d8 	beq.w	8008d0e <_printf_i+0x1d2>
 8008b5e:	2f58      	cmp	r7, #88	; 0x58
 8008b60:	f000 80a3 	beq.w	8008caa <_printf_i+0x16e>
 8008b64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b6c:	e03a      	b.n	8008be4 <_printf_i+0xa8>
 8008b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b72:	2b15      	cmp	r3, #21
 8008b74:	d8f6      	bhi.n	8008b64 <_printf_i+0x28>
 8008b76:	a001      	add	r0, pc, #4	; (adr r0, 8008b7c <_printf_i+0x40>)
 8008b78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b7c:	08008bd5 	.word	0x08008bd5
 8008b80:	08008be9 	.word	0x08008be9
 8008b84:	08008b65 	.word	0x08008b65
 8008b88:	08008b65 	.word	0x08008b65
 8008b8c:	08008b65 	.word	0x08008b65
 8008b90:	08008b65 	.word	0x08008b65
 8008b94:	08008be9 	.word	0x08008be9
 8008b98:	08008b65 	.word	0x08008b65
 8008b9c:	08008b65 	.word	0x08008b65
 8008ba0:	08008b65 	.word	0x08008b65
 8008ba4:	08008b65 	.word	0x08008b65
 8008ba8:	08008cf5 	.word	0x08008cf5
 8008bac:	08008c19 	.word	0x08008c19
 8008bb0:	08008cd7 	.word	0x08008cd7
 8008bb4:	08008b65 	.word	0x08008b65
 8008bb8:	08008b65 	.word	0x08008b65
 8008bbc:	08008d17 	.word	0x08008d17
 8008bc0:	08008b65 	.word	0x08008b65
 8008bc4:	08008c19 	.word	0x08008c19
 8008bc8:	08008b65 	.word	0x08008b65
 8008bcc:	08008b65 	.word	0x08008b65
 8008bd0:	08008cdf 	.word	0x08008cdf
 8008bd4:	680b      	ldr	r3, [r1, #0]
 8008bd6:	1d1a      	adds	r2, r3, #4
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	600a      	str	r2, [r1, #0]
 8008bdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008be4:	2301      	movs	r3, #1
 8008be6:	e0a3      	b.n	8008d30 <_printf_i+0x1f4>
 8008be8:	6825      	ldr	r5, [r4, #0]
 8008bea:	6808      	ldr	r0, [r1, #0]
 8008bec:	062e      	lsls	r6, r5, #24
 8008bee:	f100 0304 	add.w	r3, r0, #4
 8008bf2:	d50a      	bpl.n	8008c0a <_printf_i+0xce>
 8008bf4:	6805      	ldr	r5, [r0, #0]
 8008bf6:	600b      	str	r3, [r1, #0]
 8008bf8:	2d00      	cmp	r5, #0
 8008bfa:	da03      	bge.n	8008c04 <_printf_i+0xc8>
 8008bfc:	232d      	movs	r3, #45	; 0x2d
 8008bfe:	426d      	negs	r5, r5
 8008c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c04:	485e      	ldr	r0, [pc, #376]	; (8008d80 <_printf_i+0x244>)
 8008c06:	230a      	movs	r3, #10
 8008c08:	e019      	b.n	8008c3e <_printf_i+0x102>
 8008c0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c0e:	6805      	ldr	r5, [r0, #0]
 8008c10:	600b      	str	r3, [r1, #0]
 8008c12:	bf18      	it	ne
 8008c14:	b22d      	sxthne	r5, r5
 8008c16:	e7ef      	b.n	8008bf8 <_printf_i+0xbc>
 8008c18:	680b      	ldr	r3, [r1, #0]
 8008c1a:	6825      	ldr	r5, [r4, #0]
 8008c1c:	1d18      	adds	r0, r3, #4
 8008c1e:	6008      	str	r0, [r1, #0]
 8008c20:	0628      	lsls	r0, r5, #24
 8008c22:	d501      	bpl.n	8008c28 <_printf_i+0xec>
 8008c24:	681d      	ldr	r5, [r3, #0]
 8008c26:	e002      	b.n	8008c2e <_printf_i+0xf2>
 8008c28:	0669      	lsls	r1, r5, #25
 8008c2a:	d5fb      	bpl.n	8008c24 <_printf_i+0xe8>
 8008c2c:	881d      	ldrh	r5, [r3, #0]
 8008c2e:	4854      	ldr	r0, [pc, #336]	; (8008d80 <_printf_i+0x244>)
 8008c30:	2f6f      	cmp	r7, #111	; 0x6f
 8008c32:	bf0c      	ite	eq
 8008c34:	2308      	moveq	r3, #8
 8008c36:	230a      	movne	r3, #10
 8008c38:	2100      	movs	r1, #0
 8008c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c3e:	6866      	ldr	r6, [r4, #4]
 8008c40:	60a6      	str	r6, [r4, #8]
 8008c42:	2e00      	cmp	r6, #0
 8008c44:	bfa2      	ittt	ge
 8008c46:	6821      	ldrge	r1, [r4, #0]
 8008c48:	f021 0104 	bicge.w	r1, r1, #4
 8008c4c:	6021      	strge	r1, [r4, #0]
 8008c4e:	b90d      	cbnz	r5, 8008c54 <_printf_i+0x118>
 8008c50:	2e00      	cmp	r6, #0
 8008c52:	d04d      	beq.n	8008cf0 <_printf_i+0x1b4>
 8008c54:	4616      	mov	r6, r2
 8008c56:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c5a:	fb03 5711 	mls	r7, r3, r1, r5
 8008c5e:	5dc7      	ldrb	r7, [r0, r7]
 8008c60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c64:	462f      	mov	r7, r5
 8008c66:	42bb      	cmp	r3, r7
 8008c68:	460d      	mov	r5, r1
 8008c6a:	d9f4      	bls.n	8008c56 <_printf_i+0x11a>
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d10b      	bne.n	8008c88 <_printf_i+0x14c>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	07df      	lsls	r7, r3, #31
 8008c74:	d508      	bpl.n	8008c88 <_printf_i+0x14c>
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	6861      	ldr	r1, [r4, #4]
 8008c7a:	4299      	cmp	r1, r3
 8008c7c:	bfde      	ittt	le
 8008c7e:	2330      	movle	r3, #48	; 0x30
 8008c80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c88:	1b92      	subs	r2, r2, r6
 8008c8a:	6122      	str	r2, [r4, #16]
 8008c8c:	f8cd a000 	str.w	sl, [sp]
 8008c90:	464b      	mov	r3, r9
 8008c92:	aa03      	add	r2, sp, #12
 8008c94:	4621      	mov	r1, r4
 8008c96:	4640      	mov	r0, r8
 8008c98:	f7ff fee2 	bl	8008a60 <_printf_common>
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d14c      	bne.n	8008d3a <_printf_i+0x1fe>
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	b004      	add	sp, #16
 8008ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008caa:	4835      	ldr	r0, [pc, #212]	; (8008d80 <_printf_i+0x244>)
 8008cac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	680e      	ldr	r6, [r1, #0]
 8008cb4:	061f      	lsls	r7, r3, #24
 8008cb6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008cba:	600e      	str	r6, [r1, #0]
 8008cbc:	d514      	bpl.n	8008ce8 <_printf_i+0x1ac>
 8008cbe:	07d9      	lsls	r1, r3, #31
 8008cc0:	bf44      	itt	mi
 8008cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8008cc6:	6023      	strmi	r3, [r4, #0]
 8008cc8:	b91d      	cbnz	r5, 8008cd2 <_printf_i+0x196>
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	f023 0320 	bic.w	r3, r3, #32
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	2310      	movs	r3, #16
 8008cd4:	e7b0      	b.n	8008c38 <_printf_i+0xfc>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	f043 0320 	orr.w	r3, r3, #32
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	2378      	movs	r3, #120	; 0x78
 8008ce0:	4828      	ldr	r0, [pc, #160]	; (8008d84 <_printf_i+0x248>)
 8008ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ce6:	e7e3      	b.n	8008cb0 <_printf_i+0x174>
 8008ce8:	065e      	lsls	r6, r3, #25
 8008cea:	bf48      	it	mi
 8008cec:	b2ad      	uxthmi	r5, r5
 8008cee:	e7e6      	b.n	8008cbe <_printf_i+0x182>
 8008cf0:	4616      	mov	r6, r2
 8008cf2:	e7bb      	b.n	8008c6c <_printf_i+0x130>
 8008cf4:	680b      	ldr	r3, [r1, #0]
 8008cf6:	6826      	ldr	r6, [r4, #0]
 8008cf8:	6960      	ldr	r0, [r4, #20]
 8008cfa:	1d1d      	adds	r5, r3, #4
 8008cfc:	600d      	str	r5, [r1, #0]
 8008cfe:	0635      	lsls	r5, r6, #24
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	d501      	bpl.n	8008d08 <_printf_i+0x1cc>
 8008d04:	6018      	str	r0, [r3, #0]
 8008d06:	e002      	b.n	8008d0e <_printf_i+0x1d2>
 8008d08:	0671      	lsls	r1, r6, #25
 8008d0a:	d5fb      	bpl.n	8008d04 <_printf_i+0x1c8>
 8008d0c:	8018      	strh	r0, [r3, #0]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6123      	str	r3, [r4, #16]
 8008d12:	4616      	mov	r6, r2
 8008d14:	e7ba      	b.n	8008c8c <_printf_i+0x150>
 8008d16:	680b      	ldr	r3, [r1, #0]
 8008d18:	1d1a      	adds	r2, r3, #4
 8008d1a:	600a      	str	r2, [r1, #0]
 8008d1c:	681e      	ldr	r6, [r3, #0]
 8008d1e:	6862      	ldr	r2, [r4, #4]
 8008d20:	2100      	movs	r1, #0
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7f7 fa54 	bl	80001d0 <memchr>
 8008d28:	b108      	cbz	r0, 8008d2e <_printf_i+0x1f2>
 8008d2a:	1b80      	subs	r0, r0, r6
 8008d2c:	6060      	str	r0, [r4, #4]
 8008d2e:	6863      	ldr	r3, [r4, #4]
 8008d30:	6123      	str	r3, [r4, #16]
 8008d32:	2300      	movs	r3, #0
 8008d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d38:	e7a8      	b.n	8008c8c <_printf_i+0x150>
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	4632      	mov	r2, r6
 8008d3e:	4649      	mov	r1, r9
 8008d40:	4640      	mov	r0, r8
 8008d42:	47d0      	blx	sl
 8008d44:	3001      	adds	r0, #1
 8008d46:	d0ab      	beq.n	8008ca0 <_printf_i+0x164>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	079b      	lsls	r3, r3, #30
 8008d4c:	d413      	bmi.n	8008d76 <_printf_i+0x23a>
 8008d4e:	68e0      	ldr	r0, [r4, #12]
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	4298      	cmp	r0, r3
 8008d54:	bfb8      	it	lt
 8008d56:	4618      	movlt	r0, r3
 8008d58:	e7a4      	b.n	8008ca4 <_printf_i+0x168>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	4649      	mov	r1, r9
 8008d60:	4640      	mov	r0, r8
 8008d62:	47d0      	blx	sl
 8008d64:	3001      	adds	r0, #1
 8008d66:	d09b      	beq.n	8008ca0 <_printf_i+0x164>
 8008d68:	3501      	adds	r5, #1
 8008d6a:	68e3      	ldr	r3, [r4, #12]
 8008d6c:	9903      	ldr	r1, [sp, #12]
 8008d6e:	1a5b      	subs	r3, r3, r1
 8008d70:	42ab      	cmp	r3, r5
 8008d72:	dcf2      	bgt.n	8008d5a <_printf_i+0x21e>
 8008d74:	e7eb      	b.n	8008d4e <_printf_i+0x212>
 8008d76:	2500      	movs	r5, #0
 8008d78:	f104 0619 	add.w	r6, r4, #25
 8008d7c:	e7f5      	b.n	8008d6a <_printf_i+0x22e>
 8008d7e:	bf00      	nop
 8008d80:	0800c90b 	.word	0x0800c90b
 8008d84:	0800c91c 	.word	0x0800c91c

08008d88 <_sbrk_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4d06      	ldr	r5, [pc, #24]	; (8008da4 <_sbrk_r+0x1c>)
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4608      	mov	r0, r1
 8008d92:	602b      	str	r3, [r5, #0]
 8008d94:	f7fa fa50 	bl	8003238 <_sbrk>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	d102      	bne.n	8008da2 <_sbrk_r+0x1a>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	b103      	cbz	r3, 8008da2 <_sbrk_r+0x1a>
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	20000544 	.word	0x20000544

08008da8 <__swbuf_r>:
 8008da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008daa:	460e      	mov	r6, r1
 8008dac:	4614      	mov	r4, r2
 8008dae:	4605      	mov	r5, r0
 8008db0:	b118      	cbz	r0, 8008dba <__swbuf_r+0x12>
 8008db2:	6983      	ldr	r3, [r0, #24]
 8008db4:	b90b      	cbnz	r3, 8008dba <__swbuf_r+0x12>
 8008db6:	f000 f9d9 	bl	800916c <__sinit>
 8008dba:	4b21      	ldr	r3, [pc, #132]	; (8008e40 <__swbuf_r+0x98>)
 8008dbc:	429c      	cmp	r4, r3
 8008dbe:	d12b      	bne.n	8008e18 <__swbuf_r+0x70>
 8008dc0:	686c      	ldr	r4, [r5, #4]
 8008dc2:	69a3      	ldr	r3, [r4, #24]
 8008dc4:	60a3      	str	r3, [r4, #8]
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	071a      	lsls	r2, r3, #28
 8008dca:	d52f      	bpl.n	8008e2c <__swbuf_r+0x84>
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	b36b      	cbz	r3, 8008e2c <__swbuf_r+0x84>
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	6820      	ldr	r0, [r4, #0]
 8008dd4:	1ac0      	subs	r0, r0, r3
 8008dd6:	6963      	ldr	r3, [r4, #20]
 8008dd8:	b2f6      	uxtb	r6, r6
 8008dda:	4283      	cmp	r3, r0
 8008ddc:	4637      	mov	r7, r6
 8008dde:	dc04      	bgt.n	8008dea <__swbuf_r+0x42>
 8008de0:	4621      	mov	r1, r4
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 f92e 	bl	8009044 <_fflush_r>
 8008de8:	bb30      	cbnz	r0, 8008e38 <__swbuf_r+0x90>
 8008dea:	68a3      	ldr	r3, [r4, #8]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	60a3      	str	r3, [r4, #8]
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	6022      	str	r2, [r4, #0]
 8008df6:	701e      	strb	r6, [r3, #0]
 8008df8:	6963      	ldr	r3, [r4, #20]
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	4283      	cmp	r3, r0
 8008dfe:	d004      	beq.n	8008e0a <__swbuf_r+0x62>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	07db      	lsls	r3, r3, #31
 8008e04:	d506      	bpl.n	8008e14 <__swbuf_r+0x6c>
 8008e06:	2e0a      	cmp	r6, #10
 8008e08:	d104      	bne.n	8008e14 <__swbuf_r+0x6c>
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f000 f919 	bl	8009044 <_fflush_r>
 8008e12:	b988      	cbnz	r0, 8008e38 <__swbuf_r+0x90>
 8008e14:	4638      	mov	r0, r7
 8008e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e18:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <__swbuf_r+0x9c>)
 8008e1a:	429c      	cmp	r4, r3
 8008e1c:	d101      	bne.n	8008e22 <__swbuf_r+0x7a>
 8008e1e:	68ac      	ldr	r4, [r5, #8]
 8008e20:	e7cf      	b.n	8008dc2 <__swbuf_r+0x1a>
 8008e22:	4b09      	ldr	r3, [pc, #36]	; (8008e48 <__swbuf_r+0xa0>)
 8008e24:	429c      	cmp	r4, r3
 8008e26:	bf08      	it	eq
 8008e28:	68ec      	ldreq	r4, [r5, #12]
 8008e2a:	e7ca      	b.n	8008dc2 <__swbuf_r+0x1a>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 f80c 	bl	8008e4c <__swsetup_r>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d0cb      	beq.n	8008dd0 <__swbuf_r+0x28>
 8008e38:	f04f 37ff 	mov.w	r7, #4294967295
 8008e3c:	e7ea      	b.n	8008e14 <__swbuf_r+0x6c>
 8008e3e:	bf00      	nop
 8008e40:	0800c950 	.word	0x0800c950
 8008e44:	0800c970 	.word	0x0800c970
 8008e48:	0800c930 	.word	0x0800c930

08008e4c <__swsetup_r>:
 8008e4c:	4b32      	ldr	r3, [pc, #200]	; (8008f18 <__swsetup_r+0xcc>)
 8008e4e:	b570      	push	{r4, r5, r6, lr}
 8008e50:	681d      	ldr	r5, [r3, #0]
 8008e52:	4606      	mov	r6, r0
 8008e54:	460c      	mov	r4, r1
 8008e56:	b125      	cbz	r5, 8008e62 <__swsetup_r+0x16>
 8008e58:	69ab      	ldr	r3, [r5, #24]
 8008e5a:	b913      	cbnz	r3, 8008e62 <__swsetup_r+0x16>
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f000 f985 	bl	800916c <__sinit>
 8008e62:	4b2e      	ldr	r3, [pc, #184]	; (8008f1c <__swsetup_r+0xd0>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	d10f      	bne.n	8008e88 <__swsetup_r+0x3c>
 8008e68:	686c      	ldr	r4, [r5, #4]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e70:	0719      	lsls	r1, r3, #28
 8008e72:	d42c      	bmi.n	8008ece <__swsetup_r+0x82>
 8008e74:	06dd      	lsls	r5, r3, #27
 8008e76:	d411      	bmi.n	8008e9c <__swsetup_r+0x50>
 8008e78:	2309      	movs	r3, #9
 8008e7a:	6033      	str	r3, [r6, #0]
 8008e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	f04f 30ff 	mov.w	r0, #4294967295
 8008e86:	e03e      	b.n	8008f06 <__swsetup_r+0xba>
 8008e88:	4b25      	ldr	r3, [pc, #148]	; (8008f20 <__swsetup_r+0xd4>)
 8008e8a:	429c      	cmp	r4, r3
 8008e8c:	d101      	bne.n	8008e92 <__swsetup_r+0x46>
 8008e8e:	68ac      	ldr	r4, [r5, #8]
 8008e90:	e7eb      	b.n	8008e6a <__swsetup_r+0x1e>
 8008e92:	4b24      	ldr	r3, [pc, #144]	; (8008f24 <__swsetup_r+0xd8>)
 8008e94:	429c      	cmp	r4, r3
 8008e96:	bf08      	it	eq
 8008e98:	68ec      	ldreq	r4, [r5, #12]
 8008e9a:	e7e6      	b.n	8008e6a <__swsetup_r+0x1e>
 8008e9c:	0758      	lsls	r0, r3, #29
 8008e9e:	d512      	bpl.n	8008ec6 <__swsetup_r+0x7a>
 8008ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ea2:	b141      	cbz	r1, 8008eb6 <__swsetup_r+0x6a>
 8008ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ea8:	4299      	cmp	r1, r3
 8008eaa:	d002      	beq.n	8008eb2 <__swsetup_r+0x66>
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff fbd3 	bl	8008658 <_free_r>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	6063      	str	r3, [r4, #4]
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	f043 0308 	orr.w	r3, r3, #8
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	6923      	ldr	r3, [r4, #16]
 8008ed0:	b94b      	cbnz	r3, 8008ee6 <__swsetup_r+0x9a>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008edc:	d003      	beq.n	8008ee6 <__swsetup_r+0x9a>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f000 fa07 	bl	80092f4 <__smakebuf_r>
 8008ee6:	89a0      	ldrh	r0, [r4, #12]
 8008ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eec:	f010 0301 	ands.w	r3, r0, #1
 8008ef0:	d00a      	beq.n	8008f08 <__swsetup_r+0xbc>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60a3      	str	r3, [r4, #8]
 8008ef6:	6963      	ldr	r3, [r4, #20]
 8008ef8:	425b      	negs	r3, r3
 8008efa:	61a3      	str	r3, [r4, #24]
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	b943      	cbnz	r3, 8008f12 <__swsetup_r+0xc6>
 8008f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f04:	d1ba      	bne.n	8008e7c <__swsetup_r+0x30>
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	0781      	lsls	r1, r0, #30
 8008f0a:	bf58      	it	pl
 8008f0c:	6963      	ldrpl	r3, [r4, #20]
 8008f0e:	60a3      	str	r3, [r4, #8]
 8008f10:	e7f4      	b.n	8008efc <__swsetup_r+0xb0>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e7f7      	b.n	8008f06 <__swsetup_r+0xba>
 8008f16:	bf00      	nop
 8008f18:	2000004c 	.word	0x2000004c
 8008f1c:	0800c950 	.word	0x0800c950
 8008f20:	0800c970 	.word	0x0800c970
 8008f24:	0800c930 	.word	0x0800c930

08008f28 <abort>:
 8008f28:	b508      	push	{r3, lr}
 8008f2a:	2006      	movs	r0, #6
 8008f2c:	f000 fa56 	bl	80093dc <raise>
 8008f30:	2001      	movs	r0, #1
 8008f32:	f7fa f909 	bl	8003148 <_exit>
	...

08008f38 <__sflush_r>:
 8008f38:	898a      	ldrh	r2, [r1, #12]
 8008f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3e:	4605      	mov	r5, r0
 8008f40:	0710      	lsls	r0, r2, #28
 8008f42:	460c      	mov	r4, r1
 8008f44:	d458      	bmi.n	8008ff8 <__sflush_r+0xc0>
 8008f46:	684b      	ldr	r3, [r1, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dc05      	bgt.n	8008f58 <__sflush_r+0x20>
 8008f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	dc02      	bgt.n	8008f58 <__sflush_r+0x20>
 8008f52:	2000      	movs	r0, #0
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	d0f9      	beq.n	8008f52 <__sflush_r+0x1a>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f64:	682f      	ldr	r7, [r5, #0]
 8008f66:	602b      	str	r3, [r5, #0]
 8008f68:	d032      	beq.n	8008fd0 <__sflush_r+0x98>
 8008f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	075a      	lsls	r2, r3, #29
 8008f70:	d505      	bpl.n	8008f7e <__sflush_r+0x46>
 8008f72:	6863      	ldr	r3, [r4, #4]
 8008f74:	1ac0      	subs	r0, r0, r3
 8008f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f78:	b10b      	cbz	r3, 8008f7e <__sflush_r+0x46>
 8008f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f7c:	1ac0      	subs	r0, r0, r3
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4602      	mov	r2, r0
 8008f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f84:	6a21      	ldr	r1, [r4, #32]
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b0      	blx	r6
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	d106      	bne.n	8008f9e <__sflush_r+0x66>
 8008f90:	6829      	ldr	r1, [r5, #0]
 8008f92:	291d      	cmp	r1, #29
 8008f94:	d82c      	bhi.n	8008ff0 <__sflush_r+0xb8>
 8008f96:	4a2a      	ldr	r2, [pc, #168]	; (8009040 <__sflush_r+0x108>)
 8008f98:	40ca      	lsrs	r2, r1
 8008f9a:	07d6      	lsls	r6, r2, #31
 8008f9c:	d528      	bpl.n	8008ff0 <__sflush_r+0xb8>
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	6062      	str	r2, [r4, #4]
 8008fa2:	04d9      	lsls	r1, r3, #19
 8008fa4:	6922      	ldr	r2, [r4, #16]
 8008fa6:	6022      	str	r2, [r4, #0]
 8008fa8:	d504      	bpl.n	8008fb4 <__sflush_r+0x7c>
 8008faa:	1c42      	adds	r2, r0, #1
 8008fac:	d101      	bne.n	8008fb2 <__sflush_r+0x7a>
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	b903      	cbnz	r3, 8008fb4 <__sflush_r+0x7c>
 8008fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8008fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb6:	602f      	str	r7, [r5, #0]
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	d0ca      	beq.n	8008f52 <__sflush_r+0x1a>
 8008fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc0:	4299      	cmp	r1, r3
 8008fc2:	d002      	beq.n	8008fca <__sflush_r+0x92>
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f7ff fb47 	bl	8008658 <_free_r>
 8008fca:	2000      	movs	r0, #0
 8008fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8008fce:	e7c1      	b.n	8008f54 <__sflush_r+0x1c>
 8008fd0:	6a21      	ldr	r1, [r4, #32]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b0      	blx	r6
 8008fd8:	1c41      	adds	r1, r0, #1
 8008fda:	d1c7      	bne.n	8008f6c <__sflush_r+0x34>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0c4      	beq.n	8008f6c <__sflush_r+0x34>
 8008fe2:	2b1d      	cmp	r3, #29
 8008fe4:	d001      	beq.n	8008fea <__sflush_r+0xb2>
 8008fe6:	2b16      	cmp	r3, #22
 8008fe8:	d101      	bne.n	8008fee <__sflush_r+0xb6>
 8008fea:	602f      	str	r7, [r5, #0]
 8008fec:	e7b1      	b.n	8008f52 <__sflush_r+0x1a>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff4:	81a3      	strh	r3, [r4, #12]
 8008ff6:	e7ad      	b.n	8008f54 <__sflush_r+0x1c>
 8008ff8:	690f      	ldr	r7, [r1, #16]
 8008ffa:	2f00      	cmp	r7, #0
 8008ffc:	d0a9      	beq.n	8008f52 <__sflush_r+0x1a>
 8008ffe:	0793      	lsls	r3, r2, #30
 8009000:	680e      	ldr	r6, [r1, #0]
 8009002:	bf08      	it	eq
 8009004:	694b      	ldreq	r3, [r1, #20]
 8009006:	600f      	str	r7, [r1, #0]
 8009008:	bf18      	it	ne
 800900a:	2300      	movne	r3, #0
 800900c:	eba6 0807 	sub.w	r8, r6, r7
 8009010:	608b      	str	r3, [r1, #8]
 8009012:	f1b8 0f00 	cmp.w	r8, #0
 8009016:	dd9c      	ble.n	8008f52 <__sflush_r+0x1a>
 8009018:	6a21      	ldr	r1, [r4, #32]
 800901a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800901c:	4643      	mov	r3, r8
 800901e:	463a      	mov	r2, r7
 8009020:	4628      	mov	r0, r5
 8009022:	47b0      	blx	r6
 8009024:	2800      	cmp	r0, #0
 8009026:	dc06      	bgt.n	8009036 <__sflush_r+0xfe>
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	e78e      	b.n	8008f54 <__sflush_r+0x1c>
 8009036:	4407      	add	r7, r0
 8009038:	eba8 0800 	sub.w	r8, r8, r0
 800903c:	e7e9      	b.n	8009012 <__sflush_r+0xda>
 800903e:	bf00      	nop
 8009040:	20400001 	.word	0x20400001

08009044 <_fflush_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	690b      	ldr	r3, [r1, #16]
 8009048:	4605      	mov	r5, r0
 800904a:	460c      	mov	r4, r1
 800904c:	b913      	cbnz	r3, 8009054 <_fflush_r+0x10>
 800904e:	2500      	movs	r5, #0
 8009050:	4628      	mov	r0, r5
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	b118      	cbz	r0, 800905e <_fflush_r+0x1a>
 8009056:	6983      	ldr	r3, [r0, #24]
 8009058:	b90b      	cbnz	r3, 800905e <_fflush_r+0x1a>
 800905a:	f000 f887 	bl	800916c <__sinit>
 800905e:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <_fflush_r+0x6c>)
 8009060:	429c      	cmp	r4, r3
 8009062:	d11b      	bne.n	800909c <_fflush_r+0x58>
 8009064:	686c      	ldr	r4, [r5, #4]
 8009066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0ef      	beq.n	800904e <_fflush_r+0xa>
 800906e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009070:	07d0      	lsls	r0, r2, #31
 8009072:	d404      	bmi.n	800907e <_fflush_r+0x3a>
 8009074:	0599      	lsls	r1, r3, #22
 8009076:	d402      	bmi.n	800907e <_fflush_r+0x3a>
 8009078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800907a:	f000 f915 	bl	80092a8 <__retarget_lock_acquire_recursive>
 800907e:	4628      	mov	r0, r5
 8009080:	4621      	mov	r1, r4
 8009082:	f7ff ff59 	bl	8008f38 <__sflush_r>
 8009086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009088:	07da      	lsls	r2, r3, #31
 800908a:	4605      	mov	r5, r0
 800908c:	d4e0      	bmi.n	8009050 <_fflush_r+0xc>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	059b      	lsls	r3, r3, #22
 8009092:	d4dd      	bmi.n	8009050 <_fflush_r+0xc>
 8009094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009096:	f000 f908 	bl	80092aa <__retarget_lock_release_recursive>
 800909a:	e7d9      	b.n	8009050 <_fflush_r+0xc>
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <_fflush_r+0x70>)
 800909e:	429c      	cmp	r4, r3
 80090a0:	d101      	bne.n	80090a6 <_fflush_r+0x62>
 80090a2:	68ac      	ldr	r4, [r5, #8]
 80090a4:	e7df      	b.n	8009066 <_fflush_r+0x22>
 80090a6:	4b04      	ldr	r3, [pc, #16]	; (80090b8 <_fflush_r+0x74>)
 80090a8:	429c      	cmp	r4, r3
 80090aa:	bf08      	it	eq
 80090ac:	68ec      	ldreq	r4, [r5, #12]
 80090ae:	e7da      	b.n	8009066 <_fflush_r+0x22>
 80090b0:	0800c950 	.word	0x0800c950
 80090b4:	0800c970 	.word	0x0800c970
 80090b8:	0800c930 	.word	0x0800c930

080090bc <std>:
 80090bc:	2300      	movs	r3, #0
 80090be:	b510      	push	{r4, lr}
 80090c0:	4604      	mov	r4, r0
 80090c2:	e9c0 3300 	strd	r3, r3, [r0]
 80090c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ca:	6083      	str	r3, [r0, #8]
 80090cc:	8181      	strh	r1, [r0, #12]
 80090ce:	6643      	str	r3, [r0, #100]	; 0x64
 80090d0:	81c2      	strh	r2, [r0, #14]
 80090d2:	6183      	str	r3, [r0, #24]
 80090d4:	4619      	mov	r1, r3
 80090d6:	2208      	movs	r2, #8
 80090d8:	305c      	adds	r0, #92	; 0x5c
 80090da:	f7ff f9e3 	bl	80084a4 <memset>
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <std+0x38>)
 80090e0:	6263      	str	r3, [r4, #36]	; 0x24
 80090e2:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <std+0x3c>)
 80090e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <std+0x40>)
 80090e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <std+0x44>)
 80090ec:	6224      	str	r4, [r4, #32]
 80090ee:	6323      	str	r3, [r4, #48]	; 0x30
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	bf00      	nop
 80090f4:	08009415 	.word	0x08009415
 80090f8:	08009437 	.word	0x08009437
 80090fc:	0800946f 	.word	0x0800946f
 8009100:	08009493 	.word	0x08009493

08009104 <_cleanup_r>:
 8009104:	4901      	ldr	r1, [pc, #4]	; (800910c <_cleanup_r+0x8>)
 8009106:	f000 b8af 	b.w	8009268 <_fwalk_reent>
 800910a:	bf00      	nop
 800910c:	08009045 	.word	0x08009045

08009110 <__sfmoreglue>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	1e4a      	subs	r2, r1, #1
 8009114:	2568      	movs	r5, #104	; 0x68
 8009116:	4355      	muls	r5, r2
 8009118:	460e      	mov	r6, r1
 800911a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800911e:	f7ff faeb 	bl	80086f8 <_malloc_r>
 8009122:	4604      	mov	r4, r0
 8009124:	b140      	cbz	r0, 8009138 <__sfmoreglue+0x28>
 8009126:	2100      	movs	r1, #0
 8009128:	e9c0 1600 	strd	r1, r6, [r0]
 800912c:	300c      	adds	r0, #12
 800912e:	60a0      	str	r0, [r4, #8]
 8009130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009134:	f7ff f9b6 	bl	80084a4 <memset>
 8009138:	4620      	mov	r0, r4
 800913a:	bd70      	pop	{r4, r5, r6, pc}

0800913c <__sfp_lock_acquire>:
 800913c:	4801      	ldr	r0, [pc, #4]	; (8009144 <__sfp_lock_acquire+0x8>)
 800913e:	f000 b8b3 	b.w	80092a8 <__retarget_lock_acquire_recursive>
 8009142:	bf00      	nop
 8009144:	20000550 	.word	0x20000550

08009148 <__sfp_lock_release>:
 8009148:	4801      	ldr	r0, [pc, #4]	; (8009150 <__sfp_lock_release+0x8>)
 800914a:	f000 b8ae 	b.w	80092aa <__retarget_lock_release_recursive>
 800914e:	bf00      	nop
 8009150:	20000550 	.word	0x20000550

08009154 <__sinit_lock_acquire>:
 8009154:	4801      	ldr	r0, [pc, #4]	; (800915c <__sinit_lock_acquire+0x8>)
 8009156:	f000 b8a7 	b.w	80092a8 <__retarget_lock_acquire_recursive>
 800915a:	bf00      	nop
 800915c:	2000054b 	.word	0x2000054b

08009160 <__sinit_lock_release>:
 8009160:	4801      	ldr	r0, [pc, #4]	; (8009168 <__sinit_lock_release+0x8>)
 8009162:	f000 b8a2 	b.w	80092aa <__retarget_lock_release_recursive>
 8009166:	bf00      	nop
 8009168:	2000054b 	.word	0x2000054b

0800916c <__sinit>:
 800916c:	b510      	push	{r4, lr}
 800916e:	4604      	mov	r4, r0
 8009170:	f7ff fff0 	bl	8009154 <__sinit_lock_acquire>
 8009174:	69a3      	ldr	r3, [r4, #24]
 8009176:	b11b      	cbz	r3, 8009180 <__sinit+0x14>
 8009178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800917c:	f7ff bff0 	b.w	8009160 <__sinit_lock_release>
 8009180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009184:	6523      	str	r3, [r4, #80]	; 0x50
 8009186:	4b13      	ldr	r3, [pc, #76]	; (80091d4 <__sinit+0x68>)
 8009188:	4a13      	ldr	r2, [pc, #76]	; (80091d8 <__sinit+0x6c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	62a2      	str	r2, [r4, #40]	; 0x28
 800918e:	42a3      	cmp	r3, r4
 8009190:	bf04      	itt	eq
 8009192:	2301      	moveq	r3, #1
 8009194:	61a3      	streq	r3, [r4, #24]
 8009196:	4620      	mov	r0, r4
 8009198:	f000 f820 	bl	80091dc <__sfp>
 800919c:	6060      	str	r0, [r4, #4]
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 f81c 	bl	80091dc <__sfp>
 80091a4:	60a0      	str	r0, [r4, #8]
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 f818 	bl	80091dc <__sfp>
 80091ac:	2200      	movs	r2, #0
 80091ae:	60e0      	str	r0, [r4, #12]
 80091b0:	2104      	movs	r1, #4
 80091b2:	6860      	ldr	r0, [r4, #4]
 80091b4:	f7ff ff82 	bl	80090bc <std>
 80091b8:	68a0      	ldr	r0, [r4, #8]
 80091ba:	2201      	movs	r2, #1
 80091bc:	2109      	movs	r1, #9
 80091be:	f7ff ff7d 	bl	80090bc <std>
 80091c2:	68e0      	ldr	r0, [r4, #12]
 80091c4:	2202      	movs	r2, #2
 80091c6:	2112      	movs	r1, #18
 80091c8:	f7ff ff78 	bl	80090bc <std>
 80091cc:	2301      	movs	r3, #1
 80091ce:	61a3      	str	r3, [r4, #24]
 80091d0:	e7d2      	b.n	8009178 <__sinit+0xc>
 80091d2:	bf00      	nop
 80091d4:	0800c844 	.word	0x0800c844
 80091d8:	08009105 	.word	0x08009105

080091dc <__sfp>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	4607      	mov	r7, r0
 80091e0:	f7ff ffac 	bl	800913c <__sfp_lock_acquire>
 80091e4:	4b1e      	ldr	r3, [pc, #120]	; (8009260 <__sfp+0x84>)
 80091e6:	681e      	ldr	r6, [r3, #0]
 80091e8:	69b3      	ldr	r3, [r6, #24]
 80091ea:	b913      	cbnz	r3, 80091f2 <__sfp+0x16>
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7ff ffbd 	bl	800916c <__sinit>
 80091f2:	3648      	adds	r6, #72	; 0x48
 80091f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	d503      	bpl.n	8009204 <__sfp+0x28>
 80091fc:	6833      	ldr	r3, [r6, #0]
 80091fe:	b30b      	cbz	r3, 8009244 <__sfp+0x68>
 8009200:	6836      	ldr	r6, [r6, #0]
 8009202:	e7f7      	b.n	80091f4 <__sfp+0x18>
 8009204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009208:	b9d5      	cbnz	r5, 8009240 <__sfp+0x64>
 800920a:	4b16      	ldr	r3, [pc, #88]	; (8009264 <__sfp+0x88>)
 800920c:	60e3      	str	r3, [r4, #12]
 800920e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009212:	6665      	str	r5, [r4, #100]	; 0x64
 8009214:	f000 f847 	bl	80092a6 <__retarget_lock_init_recursive>
 8009218:	f7ff ff96 	bl	8009148 <__sfp_lock_release>
 800921c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009224:	6025      	str	r5, [r4, #0]
 8009226:	61a5      	str	r5, [r4, #24]
 8009228:	2208      	movs	r2, #8
 800922a:	4629      	mov	r1, r5
 800922c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009230:	f7ff f938 	bl	80084a4 <memset>
 8009234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800923c:	4620      	mov	r0, r4
 800923e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009240:	3468      	adds	r4, #104	; 0x68
 8009242:	e7d9      	b.n	80091f8 <__sfp+0x1c>
 8009244:	2104      	movs	r1, #4
 8009246:	4638      	mov	r0, r7
 8009248:	f7ff ff62 	bl	8009110 <__sfmoreglue>
 800924c:	4604      	mov	r4, r0
 800924e:	6030      	str	r0, [r6, #0]
 8009250:	2800      	cmp	r0, #0
 8009252:	d1d5      	bne.n	8009200 <__sfp+0x24>
 8009254:	f7ff ff78 	bl	8009148 <__sfp_lock_release>
 8009258:	230c      	movs	r3, #12
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	e7ee      	b.n	800923c <__sfp+0x60>
 800925e:	bf00      	nop
 8009260:	0800c844 	.word	0x0800c844
 8009264:	ffff0001 	.word	0xffff0001

08009268 <_fwalk_reent>:
 8009268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800926c:	4606      	mov	r6, r0
 800926e:	4688      	mov	r8, r1
 8009270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009274:	2700      	movs	r7, #0
 8009276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800927a:	f1b9 0901 	subs.w	r9, r9, #1
 800927e:	d505      	bpl.n	800928c <_fwalk_reent+0x24>
 8009280:	6824      	ldr	r4, [r4, #0]
 8009282:	2c00      	cmp	r4, #0
 8009284:	d1f7      	bne.n	8009276 <_fwalk_reent+0xe>
 8009286:	4638      	mov	r0, r7
 8009288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800928c:	89ab      	ldrh	r3, [r5, #12]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d907      	bls.n	80092a2 <_fwalk_reent+0x3a>
 8009292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009296:	3301      	adds	r3, #1
 8009298:	d003      	beq.n	80092a2 <_fwalk_reent+0x3a>
 800929a:	4629      	mov	r1, r5
 800929c:	4630      	mov	r0, r6
 800929e:	47c0      	blx	r8
 80092a0:	4307      	orrs	r7, r0
 80092a2:	3568      	adds	r5, #104	; 0x68
 80092a4:	e7e9      	b.n	800927a <_fwalk_reent+0x12>

080092a6 <__retarget_lock_init_recursive>:
 80092a6:	4770      	bx	lr

080092a8 <__retarget_lock_acquire_recursive>:
 80092a8:	4770      	bx	lr

080092aa <__retarget_lock_release_recursive>:
 80092aa:	4770      	bx	lr

080092ac <__swhatbuf_r>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	460e      	mov	r6, r1
 80092b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b4:	2900      	cmp	r1, #0
 80092b6:	b096      	sub	sp, #88	; 0x58
 80092b8:	4614      	mov	r4, r2
 80092ba:	461d      	mov	r5, r3
 80092bc:	da07      	bge.n	80092ce <__swhatbuf_r+0x22>
 80092be:	2300      	movs	r3, #0
 80092c0:	602b      	str	r3, [r5, #0]
 80092c2:	89b3      	ldrh	r3, [r6, #12]
 80092c4:	061a      	lsls	r2, r3, #24
 80092c6:	d410      	bmi.n	80092ea <__swhatbuf_r+0x3e>
 80092c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092cc:	e00e      	b.n	80092ec <__swhatbuf_r+0x40>
 80092ce:	466a      	mov	r2, sp
 80092d0:	f000 f906 	bl	80094e0 <_fstat_r>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	dbf2      	blt.n	80092be <__swhatbuf_r+0x12>
 80092d8:	9a01      	ldr	r2, [sp, #4]
 80092da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092e2:	425a      	negs	r2, r3
 80092e4:	415a      	adcs	r2, r3
 80092e6:	602a      	str	r2, [r5, #0]
 80092e8:	e7ee      	b.n	80092c8 <__swhatbuf_r+0x1c>
 80092ea:	2340      	movs	r3, #64	; 0x40
 80092ec:	2000      	movs	r0, #0
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	b016      	add	sp, #88	; 0x58
 80092f2:	bd70      	pop	{r4, r5, r6, pc}

080092f4 <__smakebuf_r>:
 80092f4:	898b      	ldrh	r3, [r1, #12]
 80092f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092f8:	079d      	lsls	r5, r3, #30
 80092fa:	4606      	mov	r6, r0
 80092fc:	460c      	mov	r4, r1
 80092fe:	d507      	bpl.n	8009310 <__smakebuf_r+0x1c>
 8009300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	6123      	str	r3, [r4, #16]
 8009308:	2301      	movs	r3, #1
 800930a:	6163      	str	r3, [r4, #20]
 800930c:	b002      	add	sp, #8
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	ab01      	add	r3, sp, #4
 8009312:	466a      	mov	r2, sp
 8009314:	f7ff ffca 	bl	80092ac <__swhatbuf_r>
 8009318:	9900      	ldr	r1, [sp, #0]
 800931a:	4605      	mov	r5, r0
 800931c:	4630      	mov	r0, r6
 800931e:	f7ff f9eb 	bl	80086f8 <_malloc_r>
 8009322:	b948      	cbnz	r0, 8009338 <__smakebuf_r+0x44>
 8009324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009328:	059a      	lsls	r2, r3, #22
 800932a:	d4ef      	bmi.n	800930c <__smakebuf_r+0x18>
 800932c:	f023 0303 	bic.w	r3, r3, #3
 8009330:	f043 0302 	orr.w	r3, r3, #2
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	e7e3      	b.n	8009300 <__smakebuf_r+0xc>
 8009338:	4b0d      	ldr	r3, [pc, #52]	; (8009370 <__smakebuf_r+0x7c>)
 800933a:	62b3      	str	r3, [r6, #40]	; 0x28
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	6020      	str	r0, [r4, #0]
 8009340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009344:	81a3      	strh	r3, [r4, #12]
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	6163      	str	r3, [r4, #20]
 800934a:	9b01      	ldr	r3, [sp, #4]
 800934c:	6120      	str	r0, [r4, #16]
 800934e:	b15b      	cbz	r3, 8009368 <__smakebuf_r+0x74>
 8009350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009354:	4630      	mov	r0, r6
 8009356:	f000 f8d5 	bl	8009504 <_isatty_r>
 800935a:	b128      	cbz	r0, 8009368 <__smakebuf_r+0x74>
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	f023 0303 	bic.w	r3, r3, #3
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	89a0      	ldrh	r0, [r4, #12]
 800936a:	4305      	orrs	r5, r0
 800936c:	81a5      	strh	r5, [r4, #12]
 800936e:	e7cd      	b.n	800930c <__smakebuf_r+0x18>
 8009370:	08009105 	.word	0x08009105

08009374 <__malloc_lock>:
 8009374:	4801      	ldr	r0, [pc, #4]	; (800937c <__malloc_lock+0x8>)
 8009376:	f7ff bf97 	b.w	80092a8 <__retarget_lock_acquire_recursive>
 800937a:	bf00      	nop
 800937c:	2000054c 	.word	0x2000054c

08009380 <__malloc_unlock>:
 8009380:	4801      	ldr	r0, [pc, #4]	; (8009388 <__malloc_unlock+0x8>)
 8009382:	f7ff bf92 	b.w	80092aa <__retarget_lock_release_recursive>
 8009386:	bf00      	nop
 8009388:	2000054c 	.word	0x2000054c

0800938c <_raise_r>:
 800938c:	291f      	cmp	r1, #31
 800938e:	b538      	push	{r3, r4, r5, lr}
 8009390:	4604      	mov	r4, r0
 8009392:	460d      	mov	r5, r1
 8009394:	d904      	bls.n	80093a0 <_raise_r+0x14>
 8009396:	2316      	movs	r3, #22
 8009398:	6003      	str	r3, [r0, #0]
 800939a:	f04f 30ff 	mov.w	r0, #4294967295
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093a2:	b112      	cbz	r2, 80093aa <_raise_r+0x1e>
 80093a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093a8:	b94b      	cbnz	r3, 80093be <_raise_r+0x32>
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 f830 	bl	8009410 <_getpid_r>
 80093b0:	462a      	mov	r2, r5
 80093b2:	4601      	mov	r1, r0
 80093b4:	4620      	mov	r0, r4
 80093b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ba:	f000 b817 	b.w	80093ec <_kill_r>
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d00a      	beq.n	80093d8 <_raise_r+0x4c>
 80093c2:	1c59      	adds	r1, r3, #1
 80093c4:	d103      	bne.n	80093ce <_raise_r+0x42>
 80093c6:	2316      	movs	r3, #22
 80093c8:	6003      	str	r3, [r0, #0]
 80093ca:	2001      	movs	r0, #1
 80093cc:	e7e7      	b.n	800939e <_raise_r+0x12>
 80093ce:	2400      	movs	r4, #0
 80093d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093d4:	4628      	mov	r0, r5
 80093d6:	4798      	blx	r3
 80093d8:	2000      	movs	r0, #0
 80093da:	e7e0      	b.n	800939e <_raise_r+0x12>

080093dc <raise>:
 80093dc:	4b02      	ldr	r3, [pc, #8]	; (80093e8 <raise+0xc>)
 80093de:	4601      	mov	r1, r0
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	f7ff bfd3 	b.w	800938c <_raise_r>
 80093e6:	bf00      	nop
 80093e8:	2000004c 	.word	0x2000004c

080093ec <_kill_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4d07      	ldr	r5, [pc, #28]	; (800940c <_kill_r+0x20>)
 80093f0:	2300      	movs	r3, #0
 80093f2:	4604      	mov	r4, r0
 80093f4:	4608      	mov	r0, r1
 80093f6:	4611      	mov	r1, r2
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	f7f9 fe95 	bl	8003128 <_kill>
 80093fe:	1c43      	adds	r3, r0, #1
 8009400:	d102      	bne.n	8009408 <_kill_r+0x1c>
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	b103      	cbz	r3, 8009408 <_kill_r+0x1c>
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	bf00      	nop
 800940c:	20000544 	.word	0x20000544

08009410 <_getpid_r>:
 8009410:	f7f9 be82 	b.w	8003118 <_getpid>

08009414 <__sread>:
 8009414:	b510      	push	{r4, lr}
 8009416:	460c      	mov	r4, r1
 8009418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941c:	f000 f894 	bl	8009548 <_read_r>
 8009420:	2800      	cmp	r0, #0
 8009422:	bfab      	itete	ge
 8009424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009426:	89a3      	ldrhlt	r3, [r4, #12]
 8009428:	181b      	addge	r3, r3, r0
 800942a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800942e:	bfac      	ite	ge
 8009430:	6563      	strge	r3, [r4, #84]	; 0x54
 8009432:	81a3      	strhlt	r3, [r4, #12]
 8009434:	bd10      	pop	{r4, pc}

08009436 <__swrite>:
 8009436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943a:	461f      	mov	r7, r3
 800943c:	898b      	ldrh	r3, [r1, #12]
 800943e:	05db      	lsls	r3, r3, #23
 8009440:	4605      	mov	r5, r0
 8009442:	460c      	mov	r4, r1
 8009444:	4616      	mov	r6, r2
 8009446:	d505      	bpl.n	8009454 <__swrite+0x1e>
 8009448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944c:	2302      	movs	r3, #2
 800944e:	2200      	movs	r2, #0
 8009450:	f000 f868 	bl	8009524 <_lseek_r>
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800945a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	4632      	mov	r2, r6
 8009462:	463b      	mov	r3, r7
 8009464:	4628      	mov	r0, r5
 8009466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800946a:	f000 b817 	b.w	800949c <_write_r>

0800946e <__sseek>:
 800946e:	b510      	push	{r4, lr}
 8009470:	460c      	mov	r4, r1
 8009472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009476:	f000 f855 	bl	8009524 <_lseek_r>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	bf15      	itete	ne
 8009480:	6560      	strne	r0, [r4, #84]	; 0x54
 8009482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800948a:	81a3      	strheq	r3, [r4, #12]
 800948c:	bf18      	it	ne
 800948e:	81a3      	strhne	r3, [r4, #12]
 8009490:	bd10      	pop	{r4, pc}

08009492 <__sclose>:
 8009492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009496:	f000 b813 	b.w	80094c0 <_close_r>
	...

0800949c <_write_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d07      	ldr	r5, [pc, #28]	; (80094bc <_write_r+0x20>)
 80094a0:	4604      	mov	r4, r0
 80094a2:	4608      	mov	r0, r1
 80094a4:	4611      	mov	r1, r2
 80094a6:	2200      	movs	r2, #0
 80094a8:	602a      	str	r2, [r5, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f7f9 fe73 	bl	8003196 <_write>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_write_r+0x1e>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_write_r+0x1e>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20000544 	.word	0x20000544

080094c0 <_close_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d06      	ldr	r5, [pc, #24]	; (80094dc <_close_r+0x1c>)
 80094c4:	2300      	movs	r3, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	f7f9 fe7f 	bl	80031ce <_close>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_close_r+0x1a>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_close_r+0x1a>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	20000544 	.word	0x20000544

080094e0 <_fstat_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d07      	ldr	r5, [pc, #28]	; (8009500 <_fstat_r+0x20>)
 80094e4:	2300      	movs	r3, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	4611      	mov	r1, r2
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	f7f9 fe7a 	bl	80031e6 <_fstat>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	d102      	bne.n	80094fc <_fstat_r+0x1c>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	b103      	cbz	r3, 80094fc <_fstat_r+0x1c>
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	bf00      	nop
 8009500:	20000544 	.word	0x20000544

08009504 <_isatty_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d06      	ldr	r5, [pc, #24]	; (8009520 <_isatty_r+0x1c>)
 8009508:	2300      	movs	r3, #0
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	f7f9 fe79 	bl	8003206 <_isatty>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_isatty_r+0x1a>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_isatty_r+0x1a>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	20000544 	.word	0x20000544

08009524 <_lseek_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4d07      	ldr	r5, [pc, #28]	; (8009544 <_lseek_r+0x20>)
 8009528:	4604      	mov	r4, r0
 800952a:	4608      	mov	r0, r1
 800952c:	4611      	mov	r1, r2
 800952e:	2200      	movs	r2, #0
 8009530:	602a      	str	r2, [r5, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	f7f9 fe72 	bl	800321c <_lseek>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d102      	bne.n	8009542 <_lseek_r+0x1e>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b103      	cbz	r3, 8009542 <_lseek_r+0x1e>
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	20000544 	.word	0x20000544

08009548 <_read_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d07      	ldr	r5, [pc, #28]	; (8009568 <_read_r+0x20>)
 800954c:	4604      	mov	r4, r0
 800954e:	4608      	mov	r0, r1
 8009550:	4611      	mov	r1, r2
 8009552:	2200      	movs	r2, #0
 8009554:	602a      	str	r2, [r5, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	f7f9 fe00 	bl	800315c <_read>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_read_r+0x1e>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_read_r+0x1e>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	20000544 	.word	0x20000544

0800956c <sqrt>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	ed2d 8b02 	vpush	{d8}
 8009572:	ec55 4b10 	vmov	r4, r5, d0
 8009576:	f000 f82d 	bl	80095d4 <__ieee754_sqrt>
 800957a:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <sqrt+0x64>)
 800957c:	eeb0 8a40 	vmov.f32	s16, s0
 8009580:	eef0 8a60 	vmov.f32	s17, s1
 8009584:	f993 3000 	ldrsb.w	r3, [r3]
 8009588:	3301      	adds	r3, #1
 800958a:	d019      	beq.n	80095c0 <sqrt+0x54>
 800958c:	4622      	mov	r2, r4
 800958e:	462b      	mov	r3, r5
 8009590:	4620      	mov	r0, r4
 8009592:	4629      	mov	r1, r5
 8009594:	f7f7 fac2 	bl	8000b1c <__aeabi_dcmpun>
 8009598:	b990      	cbnz	r0, 80095c0 <sqrt+0x54>
 800959a:	2200      	movs	r2, #0
 800959c:	2300      	movs	r3, #0
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f7f7 fa93 	bl	8000acc <__aeabi_dcmplt>
 80095a6:	b158      	cbz	r0, 80095c0 <sqrt+0x54>
 80095a8:	f7fe ff52 	bl	8008450 <__errno>
 80095ac:	2321      	movs	r3, #33	; 0x21
 80095ae:	6003      	str	r3, [r0, #0]
 80095b0:	2200      	movs	r2, #0
 80095b2:	2300      	movs	r3, #0
 80095b4:	4610      	mov	r0, r2
 80095b6:	4619      	mov	r1, r3
 80095b8:	f7f7 f940 	bl	800083c <__aeabi_ddiv>
 80095bc:	ec41 0b18 	vmov	d8, r0, r1
 80095c0:	eeb0 0a48 	vmov.f32	s0, s16
 80095c4:	eef0 0a68 	vmov.f32	s1, s17
 80095c8:	ecbd 8b02 	vpop	{d8}
 80095cc:	bd38      	pop	{r3, r4, r5, pc}
 80095ce:	bf00      	nop
 80095d0:	200000b0 	.word	0x200000b0

080095d4 <__ieee754_sqrt>:
 80095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	ec55 4b10 	vmov	r4, r5, d0
 80095dc:	4e56      	ldr	r6, [pc, #344]	; (8009738 <__ieee754_sqrt+0x164>)
 80095de:	43ae      	bics	r6, r5
 80095e0:	ee10 0a10 	vmov	r0, s0
 80095e4:	ee10 3a10 	vmov	r3, s0
 80095e8:	4629      	mov	r1, r5
 80095ea:	462a      	mov	r2, r5
 80095ec:	d110      	bne.n	8009610 <__ieee754_sqrt+0x3c>
 80095ee:	ee10 2a10 	vmov	r2, s0
 80095f2:	462b      	mov	r3, r5
 80095f4:	f7f6 fff8 	bl	80005e8 <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4620      	mov	r0, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f6 fe3c 	bl	800027c <__adddf3>
 8009604:	4604      	mov	r4, r0
 8009606:	460d      	mov	r5, r1
 8009608:	ec45 4b10 	vmov	d0, r4, r5
 800960c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009610:	2d00      	cmp	r5, #0
 8009612:	dc10      	bgt.n	8009636 <__ieee754_sqrt+0x62>
 8009614:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009618:	4330      	orrs	r0, r6
 800961a:	d0f5      	beq.n	8009608 <__ieee754_sqrt+0x34>
 800961c:	b15d      	cbz	r5, 8009636 <__ieee754_sqrt+0x62>
 800961e:	ee10 2a10 	vmov	r2, s0
 8009622:	462b      	mov	r3, r5
 8009624:	ee10 0a10 	vmov	r0, s0
 8009628:	f7f6 fe26 	bl	8000278 <__aeabi_dsub>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	f7f7 f904 	bl	800083c <__aeabi_ddiv>
 8009634:	e7e6      	b.n	8009604 <__ieee754_sqrt+0x30>
 8009636:	1509      	asrs	r1, r1, #20
 8009638:	d076      	beq.n	8009728 <__ieee754_sqrt+0x154>
 800963a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800963e:	07ce      	lsls	r6, r1, #31
 8009640:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009644:	bf5e      	ittt	pl
 8009646:	0fda      	lsrpl	r2, r3, #31
 8009648:	005b      	lslpl	r3, r3, #1
 800964a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800964e:	0fda      	lsrs	r2, r3, #31
 8009650:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009654:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009658:	2000      	movs	r0, #0
 800965a:	106d      	asrs	r5, r5, #1
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	f04f 0e16 	mov.w	lr, #22
 8009662:	4684      	mov	ip, r0
 8009664:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009668:	eb0c 0401 	add.w	r4, ip, r1
 800966c:	4294      	cmp	r4, r2
 800966e:	bfde      	ittt	le
 8009670:	1b12      	suble	r2, r2, r4
 8009672:	eb04 0c01 	addle.w	ip, r4, r1
 8009676:	1840      	addle	r0, r0, r1
 8009678:	0052      	lsls	r2, r2, #1
 800967a:	f1be 0e01 	subs.w	lr, lr, #1
 800967e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009682:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009686:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800968a:	d1ed      	bne.n	8009668 <__ieee754_sqrt+0x94>
 800968c:	4671      	mov	r1, lr
 800968e:	2720      	movs	r7, #32
 8009690:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009694:	4562      	cmp	r2, ip
 8009696:	eb04 060e 	add.w	r6, r4, lr
 800969a:	dc02      	bgt.n	80096a2 <__ieee754_sqrt+0xce>
 800969c:	d113      	bne.n	80096c6 <__ieee754_sqrt+0xf2>
 800969e:	429e      	cmp	r6, r3
 80096a0:	d811      	bhi.n	80096c6 <__ieee754_sqrt+0xf2>
 80096a2:	2e00      	cmp	r6, #0
 80096a4:	eb06 0e04 	add.w	lr, r6, r4
 80096a8:	da43      	bge.n	8009732 <__ieee754_sqrt+0x15e>
 80096aa:	f1be 0f00 	cmp.w	lr, #0
 80096ae:	db40      	blt.n	8009732 <__ieee754_sqrt+0x15e>
 80096b0:	f10c 0801 	add.w	r8, ip, #1
 80096b4:	eba2 020c 	sub.w	r2, r2, ip
 80096b8:	429e      	cmp	r6, r3
 80096ba:	bf88      	it	hi
 80096bc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80096c0:	1b9b      	subs	r3, r3, r6
 80096c2:	4421      	add	r1, r4
 80096c4:	46c4      	mov	ip, r8
 80096c6:	0052      	lsls	r2, r2, #1
 80096c8:	3f01      	subs	r7, #1
 80096ca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80096ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80096d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096d6:	d1dd      	bne.n	8009694 <__ieee754_sqrt+0xc0>
 80096d8:	4313      	orrs	r3, r2
 80096da:	d006      	beq.n	80096ea <__ieee754_sqrt+0x116>
 80096dc:	1c4c      	adds	r4, r1, #1
 80096de:	bf13      	iteet	ne
 80096e0:	3101      	addne	r1, #1
 80096e2:	3001      	addeq	r0, #1
 80096e4:	4639      	moveq	r1, r7
 80096e6:	f021 0101 	bicne.w	r1, r1, #1
 80096ea:	1043      	asrs	r3, r0, #1
 80096ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80096f0:	0849      	lsrs	r1, r1, #1
 80096f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80096f6:	07c2      	lsls	r2, r0, #31
 80096f8:	bf48      	it	mi
 80096fa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80096fe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009702:	460c      	mov	r4, r1
 8009704:	463d      	mov	r5, r7
 8009706:	e77f      	b.n	8009608 <__ieee754_sqrt+0x34>
 8009708:	0ada      	lsrs	r2, r3, #11
 800970a:	3815      	subs	r0, #21
 800970c:	055b      	lsls	r3, r3, #21
 800970e:	2a00      	cmp	r2, #0
 8009710:	d0fa      	beq.n	8009708 <__ieee754_sqrt+0x134>
 8009712:	02d7      	lsls	r7, r2, #11
 8009714:	d50a      	bpl.n	800972c <__ieee754_sqrt+0x158>
 8009716:	f1c1 0420 	rsb	r4, r1, #32
 800971a:	fa23 f404 	lsr.w	r4, r3, r4
 800971e:	1e4d      	subs	r5, r1, #1
 8009720:	408b      	lsls	r3, r1
 8009722:	4322      	orrs	r2, r4
 8009724:	1b41      	subs	r1, r0, r5
 8009726:	e788      	b.n	800963a <__ieee754_sqrt+0x66>
 8009728:	4608      	mov	r0, r1
 800972a:	e7f0      	b.n	800970e <__ieee754_sqrt+0x13a>
 800972c:	0052      	lsls	r2, r2, #1
 800972e:	3101      	adds	r1, #1
 8009730:	e7ef      	b.n	8009712 <__ieee754_sqrt+0x13e>
 8009732:	46e0      	mov	r8, ip
 8009734:	e7be      	b.n	80096b4 <__ieee754_sqrt+0xe0>
 8009736:	bf00      	nop
 8009738:	7ff00000 	.word	0x7ff00000

0800973c <_gettimeofday>:
 800973c:	4b02      	ldr	r3, [pc, #8]	; (8009748 <_gettimeofday+0xc>)
 800973e:	2258      	movs	r2, #88	; 0x58
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	f04f 30ff 	mov.w	r0, #4294967295
 8009746:	4770      	bx	lr
 8009748:	20000544 	.word	0x20000544

0800974c <_init>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	bf00      	nop
 8009750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009752:	bc08      	pop	{r3}
 8009754:	469e      	mov	lr, r3
 8009756:	4770      	bx	lr

08009758 <_fini>:
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975a:	bf00      	nop
 800975c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975e:	bc08      	pop	{r3}
 8009760:	469e      	mov	lr, r3
 8009762:	4770      	bx	lr
